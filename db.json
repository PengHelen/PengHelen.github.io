{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/JS-Equality-Table.png","path":"images/JS-Equality-Table.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Base64与图片互转.html","hash":"e960c7bdbc58ec71d9a5b8f816f805ef50a0ecaf","modified":1675429033224},{"_id":"source/_posts/CSS层级.md","hash":"1fd6c093cbe6e505dac0d71b78dbc517fc2a4e64","modified":1675065218547},{"_id":"source/_posts/CSS篇-auto关键词.md","hash":"c46a53220c13b9b08c4d40af35638696f2087011","modified":1675150284903},{"_id":"source/_posts/JavaScript定义变量.md","hash":"b9b1f42dff09831568e2ec2149523ef1ba9e878e","modified":1669705062577},{"_id":"source/_posts/JSON转化.html","hash":"c510f2c8b722d62d22f95630171e28f141586baa","modified":1669705044163},{"_id":"source/_posts/Promise.md","hash":"b60c5d87f5d7eaad3c2eca789bc26cc89c00091c","modified":1675150139629},{"_id":"source/_posts/closure.md","hash":"20882c5f0c5125c96462d7140faab8554289ee24","modified":1675766081547},{"_id":"source/_posts/colorList.html","hash":"fc7f7d7d23e0d82d35f36c90928b07983a94b985","modified":1666173321074},{"_id":"source/_posts/first.md","hash":"de1fdbd08730222f18daf3255c26d53baca59861","modified":1640241458000},{"_id":"source/_posts/js图片验证码.html","hash":"e30220f5eda0fabb2410ec85bdb6c606123ed035","modified":1668046686131},{"_id":"source/_posts/import与export.md","hash":"134a56becf0e32964a5aca704690453e0a306625","modified":1640586268000},{"_id":"source/_posts/js深拷贝与浅拷贝.md","hash":"82464d4e6d86b3f47f26a2625fe3636756413ed8","modified":1640852390000},{"_id":"source/_posts/vuejs的nextTick.md","hash":"b8c1ed7770b956aa6248972433fb99971aa4531e","modified":1675836832421},{"_id":"source/_posts/变量和事件名.md","hash":"f6f004003a4d129dfcebbea18b862c86262486c1","modified":1666851476606},{"_id":"source/_posts/宏任务和微任务.md","hash":"26cc95c5c5619efc0683eb6a9509c5eb9458aae0","modified":1675923450422},{"_id":"source/_posts/正则表达式.md","hash":"1c109dd9f9f45cc7be1aa96dc7576d381ebf7292","modified":1675081733557},{"_id":"source/_posts/浏览器标签-Tab的标题和图标.md","hash":"0e4e8a4372684c58b5d55cb5093516726e3ed355","modified":1672902718917},{"_id":"source/_posts/类型转换.md","hash":"f0b98aad992186f6b1d9565720a0326cb831c70d","modified":1673614098811},{"_id":"source/about/index.md","hash":"0ff4cdf69af8e00e015dbd472aee41cd578c121f","modified":1675428124823},{"_id":"source/about/me.md","hash":"3d6e938a51a70bb835a7b5698b74052eb382067b","modified":1675425376744},{"_id":"source/images/JS-Equality-Table.png","hash":"c9e693870a72ed2885615957735d5557c5229e29","modified":1673578609131},{"_id":"source/lifetime/index.md","hash":"b20131b74c52845d1b4b8b5bf16d56175d48c1a1","modified":1675427896789},{"_id":"source/lifetime/me.md","hash":"6b981f22c24d1851c01b5a502fcee227ec4fd874","modified":1666183497834},{"_id":"source/work/index.md","hash":"63e187b810113a5c88c6d84e6dacef0361333eb4","modified":1675427935818},{"_id":"source/work/work.md","hash":"b9bb5a213f8e8f46400ed801c0ac28d1b365698c","modified":1666183550065},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"7ac53121df225a6d5ee9051fd57626ac42596932","modified":1675426631461},{"_id":"themes/landscape/_config.yml","hash":"7106ff0e93d017efa98d3fd925a5780be72109fd","modified":1675428141767},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/lifetime.ejs","hash":"0e806eb63f161b6ade2ac0239ab4428468251b20","modified":1675426245411},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/layout/work.ejs","hash":"0ac48d257485a216d75600fcaac1aa006e56a335","modified":1675426321581},{"_id":"themes/landscape/languages/default.yml","hash":"c61f154644e47e1242de545821dba2e9402d8699","modified":1675426674017},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1675426709021},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"1d22171d8f05371e9a89701f21098c0b0e330423","modified":1640166758000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"7c603afdbbd579ea536aa19a286cbc5163bfd2b5","modified":1640156680000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/lifetime.ejs","hash":"71096cb3ed4f89e3cb043a7b4682538a00498a7c","modified":1675426386918},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_partial/work.ejs","hash":"6f1e9340c7f3712e8208d3af78a2f7958cd70edf","modified":1675426417766},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"public/2023/02/07/closure/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675923833751},{"_id":"public/2023/01/31/Promise/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675923833751},{"_id":"public/2023/01/30/正则表达式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675923833751},{"_id":"public/2023/01/16/CSS层级/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675923833751},{"_id":"public/2023/01/13/类型转换/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675923833751},{"_id":"public/2023/01/06/CSS篇-auto关键词/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675923833751},{"_id":"public/2023/01/05/浏览器标签-Tab的标题和图标/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675923833751},{"_id":"public/about/me.html","hash":"46b3631b82486256cb93c052d452979d3abd4bb0","modified":1675923833751},{"_id":"public/lifetime/index.html","hash":"273480b94ca8da9a01368bdc3cb9ed34a9718fe3","modified":1675923833751},{"_id":"public/lifetime/me.html","hash":"9e817ee54004ee9d8627f5e35d35584469e6aea5","modified":1675923833751},{"_id":"public/about/index.html","hash":"058287162c84436a880cf105f31503a65a8aa645","modified":1675923833751},{"_id":"public/work/index.html","hash":"8f639d8f5033640301175a0484893eb8d10c36ae","modified":1675923833751},{"_id":"public/work/work.html","hash":"b283bc2c0d1692897c726ebfe0dc46ed3b52948c","modified":1675923833751},{"_id":"public/2023/02/08/vuejs的nextTick/index.html","hash":"d49ac28ec8b3654af0497b30e913b44a6aa33182","modified":1675923833751},{"_id":"public/2022/10/27/变量和事件名/index.html","hash":"2ef783c97bf0093dbad78244ccb9fb27b620a856","modified":1675923833751},{"_id":"public/2021/12/30/js深拷贝与浅拷贝/index.html","hash":"e901dc6215870c6be3c7c85ce14876fa90de6c9b","modified":1675923833751},{"_id":"public/2021/12/27/import与export/index.html","hash":"c4c444b06da30c7c8a4c9d16e614f06b98692f9c","modified":1675923833751},{"_id":"public/2021/12/23/first/index.html","hash":"970cc0d054b5c1009da3c48e126b78656e3d458b","modified":1675923833751},{"_id":"public/archives/index.html","hash":"8ea316e57c908a2ed83fc2935ffa5ff84b504600","modified":1675923833751},{"_id":"public/archives/page/2/index.html","hash":"535eadbe40b4e8d4a56dbe4b6800a79f71e7e55d","modified":1675923833751},{"_id":"public/archives/2021/index.html","hash":"3e2931cbfcf27c3f4b0eb12a4781e76f9570e4e1","modified":1675923833751},{"_id":"public/archives/2021/12/index.html","hash":"035605aed47ca3639a31d262938c75466680fde0","modified":1675923833751},{"_id":"public/archives/2022/index.html","hash":"a57c649a60be4c545d5b0b4d66e638c06e7f28a4","modified":1675923833751},{"_id":"public/archives/2022/10/index.html","hash":"67eec7bf55c8de337d4f4b19605600a6e67ce519","modified":1675923833751},{"_id":"public/archives/2023/index.html","hash":"6bdeb7fd3f936e65215b748dc52a16e8a2ff14e4","modified":1675923833751},{"_id":"public/archives/2023/01/index.html","hash":"f62d8ea639c64702061f7fe9a257cdd721524750","modified":1675923833751},{"_id":"public/archives/2023/02/index.html","hash":"999ef7d504fe201126ad38548d29a44c511aab21","modified":1675923833751},{"_id":"public/categories/work/index.html","hash":"c0d85c2629842d2dd71b4c6b89984024f24479d2","modified":1675923833751},{"_id":"public/tags/work/index.html","hash":"bba586c8a4cf617b77f11cd0d9c944b5d25290bf","modified":1675923833751},{"_id":"public/2023/02/08/宏任务和微任务/index.html","hash":"829e3e9cda0b4314ce49d947d6c98d196aed084b","modified":1675923833751},{"_id":"public/2021/12/23/JavaScript定义变量/index.html","hash":"6733e1f749ca9c63d1d8df29cdb7c1b161c063e9","modified":1675923833751},{"_id":"public/index.html","hash":"2863846843f10f23b54a4bd0b90ae138b657f8a5","modified":1675923833751},{"_id":"public/page/2/index.html","hash":"e6bae3590e1130b190a9f9481f308983d82e7fbe","modified":1675923833751},{"_id":"public/images/JS-Equality-Table.png","hash":"c9e693870a72ed2885615957735d5557c5229e29","modified":1675923833751},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1675923833751},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1675923833751},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1675923833751},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1675923833751},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1675923833751},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1675923833751},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1675923833751},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1675923833751},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1675923833751},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1675923833751},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1675923833751},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1675923833751},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1675923833751},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1675923833751},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1675923833751},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1675923833751},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1675923833751},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1675923833751},{"_id":"public/css/style.css","hash":"11af6ebdbbb76c7dc312f5bb9bdbf42e8930b957","modified":1675923833751},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1675923833751},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1675923833751},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1675923833751},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1675923833751}],"Category":[{"name":"work","_id":"cldwps2is0008qg3mf51hcs21"}],"Data":[],"Page":[{"title":"About me","date":"2023-02-03T11:51:36.000Z","_content":"\n# 这是一篇测试文章\n\n{% codeblock %}\nalert('Hello World!');\n{% endcodeblock %}\n","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2023-02-03 19:51:36\n---\n\n# 这是一篇测试文章\n\n{% codeblock %}\nalert('Hello World!');\n{% endcodeblock %}\n","updated":"2023-02-03T11:56:16.744Z","path":"about/me.html","comments":1,"layout":"page","_id":"cldwps2il0000qg3m960y4i3g","content":"<h1 id=\"这是一篇测试文章\"><a href=\"#这是一篇测试文章\" class=\"headerlink\" title=\"这是一篇测试文章\"></a>这是一篇测试文章</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"这是一篇测试文章\"><a href=\"#这是一篇测试文章\" class=\"headerlink\" title=\"这是一篇测试文章\"></a>这是一篇测试文章</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure>\n"},{"title":"lifetime","date":"2023-02-03T12:38:16.000Z","_content":"","source":"lifetime/index.md","raw":"---\ntitle: lifetime\ndate: 2023-02-03 20:38:16\n---\n","updated":"2023-02-03T12:38:16.789Z","path":"lifetime/index.html","comments":1,"layout":"page","_id":"cldwps2ip0002qg3md2gw4lue","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About me","date":"2022-10-19T12:44:57.000Z","_content":"","source":"lifetime/me.md","raw":"---\ntitle: About me\ndate: 2022-10-19 20:44:57\n---\n","updated":"2022-10-19T12:44:57.834Z","path":"lifetime/me.html","comments":1,"layout":"page","_id":"cldwps2iq0004qg3mcu0195tj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-02-03T12:42:04.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-02-03 20:42:04\n---\n","updated":"2023-02-03T12:42:04.823Z","path":"about/index.html","comments":1,"layout":"page","_id":"cldwps2ir0006qg3m4pra49k0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"work","date":"2023-02-03T12:38:55.000Z","_content":"","source":"work/index.md","raw":"---\ntitle: work\ndate: 2023-02-03 20:38:55\n---\n","updated":"2023-02-03T12:38:55.818Z","path":"work/index.html","comments":1,"layout":"page","_id":"cldwps2iu0009qg3m176s5s2t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"work","date":"2022-10-19T12:45:50.000Z","_content":"","source":"work/work.md","raw":"---\ntitle: work\ndate: 2022-10-19 20:45:50\n---\n","updated":"2022-10-19T12:45:50.065Z","path":"work/work.html","comments":1,"layout":"page","_id":"cldwps2iv000bqg3m9bq71u5a","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"layout","title":"CSS层级","date":"2023-01-16T07:19:26.000Z","_content":"\n# 层叠影响因素\n\n* 资源顺序（平级）\n* 优先级（等级压制）\n* 重要程度（覆盖所有优先级）\n\n# 资源顺序\n\n当应用两条同级别的规则到一个元素的时候，写在后面的（在CSS样式表中的顺序，<s>在HTML中顺序</s>）就是实际使用的规则\n\n# 优先级\n\n仅当某一列的优先级权重相同时，才评估下一列；\n否则，可直接忽略低等级的选择器，因为它们无法覆盖高优先级等级的选择器\n\n例：即无论选择器中有多少个 ID，内联样式总是比其它任何优先级的权重都要高\n\n* 内联样式(1000)\n* ID(100)\n* 类，伪类，属性选择器(10)\n* 元素，伪元素（如::after）(1)\n\n否定（:not()）和任意匹配（:is()）的参数，对优先级算法有贡献的参数的优先级的最大值将作为该伪类选择器的优先级\n\n### 不影响优先级\n通用选择器 \\* 组合选择器(+,>,~,'') 调整优先级选择器(:where())\n\n# 重要程度\n覆盖所有上面所有优先级计算  \n!important与优先级无关，但它与最终的结果直接相关\n\n### 使用场景\n* 覆盖内联样式\n* 覆盖优先级高的选择器\n\n# a标签伪类元素优先级\nlink-visited-hover-active   \nLVHA  \n趣味记法：LoVe HAte\n\n# 参考文献\n\nhttps://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\n\nhttps://www.freecodecamp.org/news/what-is-css-specificity/\n\nhttps://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/CSS层级.md","raw":"---\nlayout:\n  - layout\ntitle: CSS层级\ndate: 2023-01-16 15:19:26\ntags:\n---\n\n# 层叠影响因素\n\n* 资源顺序（平级）\n* 优先级（等级压制）\n* 重要程度（覆盖所有优先级）\n\n# 资源顺序\n\n当应用两条同级别的规则到一个元素的时候，写在后面的（在CSS样式表中的顺序，<s>在HTML中顺序</s>）就是实际使用的规则\n\n# 优先级\n\n仅当某一列的优先级权重相同时，才评估下一列；\n否则，可直接忽略低等级的选择器，因为它们无法覆盖高优先级等级的选择器\n\n例：即无论选择器中有多少个 ID，内联样式总是比其它任何优先级的权重都要高\n\n* 内联样式(1000)\n* ID(100)\n* 类，伪类，属性选择器(10)\n* 元素，伪元素（如::after）(1)\n\n否定（:not()）和任意匹配（:is()）的参数，对优先级算法有贡献的参数的优先级的最大值将作为该伪类选择器的优先级\n\n### 不影响优先级\n通用选择器 \\* 组合选择器(+,>,~,'') 调整优先级选择器(:where())\n\n# 重要程度\n覆盖所有上面所有优先级计算  \n!important与优先级无关，但它与最终的结果直接相关\n\n### 使用场景\n* 覆盖内联样式\n* 覆盖优先级高的选择器\n\n# a标签伪类元素优先级\nlink-visited-hover-active   \nLVHA  \n趣味记法：LoVe HAte\n\n# 参考文献\n\nhttps://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\n\nhttps://www.freecodecamp.org/news/what-is-css-specificity/\n\nhttps://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/\n\n\n\n\n\n\n\n\n\n\n","slug":"CSS层级","published":1,"updated":"2023-01-30T07:53:38.547Z","comments":1,"photos":[],"link":"","_id":"cldwps2in0001qg3m52o9gcqk","content":"<h1 id=\"层叠影响因素\"><a href=\"#层叠影响因素\" class=\"headerlink\" title=\"层叠影响因素\"></a>层叠影响因素</h1><ul>\n<li>资源顺序（平级）</li>\n<li>优先级（等级压制）</li>\n<li>重要程度（覆盖所有优先级）</li>\n</ul>\n<h1 id=\"资源顺序\"><a href=\"#资源顺序\" class=\"headerlink\" title=\"资源顺序\"></a>资源顺序</h1><p>当应用两条同级别的规则到一个元素的时候，写在后面的（在CSS样式表中的顺序，<s>在HTML中顺序</s>）就是实际使用的规则</p>\n<h1 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h1><p>仅当某一列的优先级权重相同时，才评估下一列；<br>否则，可直接忽略低等级的选择器，因为它们无法覆盖高优先级等级的选择器</p>\n<p>例：即无论选择器中有多少个 ID，内联样式总是比其它任何优先级的权重都要高</p>\n<ul>\n<li>内联样式(1000)</li>\n<li>ID(100)</li>\n<li>类，伪类，属性选择器(10)</li>\n<li>元素，伪元素（如::after）(1)</li>\n</ul>\n<p>否定（:not()）和任意匹配（:is()）的参数，对优先级算法有贡献的参数的优先级的最大值将作为该伪类选择器的优先级</p>\n<h3 id=\"不影响优先级\"><a href=\"#不影响优先级\" class=\"headerlink\" title=\"不影响优先级\"></a>不影响优先级</h3><p>通用选择器 * 组合选择器(+,&gt;,~,’’) 调整优先级选择器(:where())</p>\n<h1 id=\"重要程度\"><a href=\"#重要程度\" class=\"headerlink\" title=\"重要程度\"></a>重要程度</h1><p>覆盖所有上面所有优先级计算<br>!important与优先级无关，但它与最终的结果直接相关</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>覆盖内联样式</li>\n<li>覆盖优先级高的选择器</li>\n</ul>\n<h1 id=\"a标签伪类元素优先级\"><a href=\"#a标签伪类元素优先级\" class=\"headerlink\" title=\"a标签伪类元素优先级\"></a>a标签伪类元素优先级</h1><p>link-visited-hover-active<br>LVHA<br>趣味记法：LoVe HAte</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/what-is-css-specificity/\">https://www.freecodecamp.org/news/what-is-css-specificity/</a></p>\n<p><a href=\"https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/\">https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"层叠影响因素\"><a href=\"#层叠影响因素\" class=\"headerlink\" title=\"层叠影响因素\"></a>层叠影响因素</h1><ul>\n<li>资源顺序（平级）</li>\n<li>优先级（等级压制）</li>\n<li>重要程度（覆盖所有优先级）</li>\n</ul>\n<h1 id=\"资源顺序\"><a href=\"#资源顺序\" class=\"headerlink\" title=\"资源顺序\"></a>资源顺序</h1><p>当应用两条同级别的规则到一个元素的时候，写在后面的（在CSS样式表中的顺序，<s>在HTML中顺序</s>）就是实际使用的规则</p>\n<h1 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h1><p>仅当某一列的优先级权重相同时，才评估下一列；<br>否则，可直接忽略低等级的选择器，因为它们无法覆盖高优先级等级的选择器</p>\n<p>例：即无论选择器中有多少个 ID，内联样式总是比其它任何优先级的权重都要高</p>\n<ul>\n<li>内联样式(1000)</li>\n<li>ID(100)</li>\n<li>类，伪类，属性选择器(10)</li>\n<li>元素，伪元素（如::after）(1)</li>\n</ul>\n<p>否定（:not()）和任意匹配（:is()）的参数，对优先级算法有贡献的参数的优先级的最大值将作为该伪类选择器的优先级</p>\n<h3 id=\"不影响优先级\"><a href=\"#不影响优先级\" class=\"headerlink\" title=\"不影响优先级\"></a>不影响优先级</h3><p>通用选择器 * 组合选择器(+,&gt;,~,’’) 调整优先级选择器(:where())</p>\n<h1 id=\"重要程度\"><a href=\"#重要程度\" class=\"headerlink\" title=\"重要程度\"></a>重要程度</h1><p>覆盖所有上面所有优先级计算<br>!important与优先级无关，但它与最终的结果直接相关</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>覆盖内联样式</li>\n<li>覆盖优先级高的选择器</li>\n</ul>\n<h1 id=\"a标签伪类元素优先级\"><a href=\"#a标签伪类元素优先级\" class=\"headerlink\" title=\"a标签伪类元素优先级\"></a>a标签伪类元素优先级</h1><p>link-visited-hover-active<br>LVHA<br>趣味记法：LoVe HAte</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/what-is-css-specificity/\">https://www.freecodecamp.org/news/what-is-css-specificity/</a></p>\n<p><a href=\"https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/\">https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/</a></p>\n"},{"layout":"layout","title":"CSS篇-auto关键词","date":"2023-01-06T03:09:07.000Z","_content":"\n---\n\n> 根据auto在CSS常用属性的实际表现来探究auto的作用\n\nauto是自适应，自动的意思\n\n# 1.width:auto;\nwidth默认值（即不设置width值时）是auto\n当使用`width:auto;`时，元素的宽被限制在父元素内，元素内容的宽度会自动减去元素的margin，padding和border，即元素内容自动充满元素剩余空间\n\n## width:auto; VS width:100%;\n`width:auto;`表示：父元素内容宽度=子元素margin+padding+border+content(元素内容宽度，即元素的剩余空间)\n\n`width:100%;`表示：父元素内容宽度=子元素content(即子元素内容宽度等于父元素宽度)\n\n**注意：适用标准浏览器的盒子模型，不适用IE盒子模型**\n\n# 2.height:auto;\nheight默认值是auto\n`height:auto;`，元素高度等于元素内容高度，此时即使设置`height:100%;`元素高度也还是元素的内容高度\n\n# 3.margin:auto;\nmargin的默认值是0，表示元素没有margin\n当使用`margin:auto;`，除去元素的content内容的宽高、padding、border，剩余空间都由margin来填充\n\n如下代码，元素宽高确定，巧用`margin:auto;`，达到水平垂直居中效果\n\n```\n<div class=\"wrapper\">\n  <div class=\"item\">I am centered.</div>\n</div>\n.wrapper {\n    position: relative;\n}\n.item {\n    width: 200px;\n    height: 100px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n```\n\n如下代码，元素宽确定，巧用`margin:0 auto;`，让元素水平居中\n\n```\n<div class=\"wrapper\">\n  <div class=\"item\">I am centered.</div>\n</div>\n.item {\n    width: 200px;\n    margin: auto;\n}\n```\n\n**margin-inline和margin-block属性是实验中属性，暂不研究**\n\n# 4.background-size:auto;\nbackground-size默认值是auto，以背景图片的比例缩放背景图片\n\n# 5.top/right/bottom/left:auto;\ntop/right/bottom/left的默认值是auto\n\n**MDN** \n**left:auto**\n\n**对于绝对定位元素，元素将忽略此属性而以right属性为准，如果此时设置width: auto，将基于内容需要的宽度设置宽度；如果right也为auto的话，元素的水平位置就是它假如作为静态 (即 static) 元素时该在的位置**\n\n**对于相对定位元素，元素相对正常位置的偏移量将基于right属性；如果right也为auto的话，元素将不会有偏移**\n\n# 6.z-index:auto;\nz-index默认值是auto\n盒子不会创建一个新的本地堆叠上下文  \n在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同\n\n# 7.overflow:auto;\noverflow默认值是visible，内容不能被裁减并且可能渲染到边距盒（padding）的外部\n\n**MDN：`overflow:auto;`**\n**取决于用户代理。如果内容适应边距（padding）盒，它看起来与 visible 相同，但是仍然建立了一个新的块级格式化上下文；如果内容溢出，则浏览器提供滚动条**\n\n# 8.cursor:auto;\ncursor默认值是auto，浏览器根据当前内容决定指针样式\n\n# 9.table-layout:auto;\ntable-layout默认值是auto，表格及单元格的宽度取决于其包含的内容\n\n# 10.flex:auto;\nflex默认值是`0 1 auto`，flex是flex-grow，flex-shrink，flex-basis的合并简写属性\n当使用`flex:auto;`，等同于`flex:1 1 auto;`\n\n### flex+margin-left:auto;可使元素右对齐\n```\n<div class=\"wrapper\">\n  <div class=\"item\">Item1</div>\n  <div class=\"item item-2\">Item2</div>\n</div>\n.wrapper {\n  display: flex;\n}\n.item-2 {\n  margin-left: auto;\n}\n```\n\n### flex+margin:auto;可使元素水平垂直居中\n```\n<div class=\"wrapper\">\n  <div class=\"item\">Item1</div>\n</div>\n.wrapper {\n  display: flex;\n  height: 400px;\n  background-color: blue;\n}\n.item {\n  width: 200px;\n  height: 100px;\n  margin: auto auto;\n  background-color: red;\n}\n```\n\n**grid可参考flex，暂不研究**\n\n---\n\n---\n\n# 参考文献：  \n英文版：https://ishadeed.com/article/auto-css/  \n\n中文翻译版：https://blog.csdn.net/qq449245884/article/details/105963479/   \nhttps://css-tricks.com/how-auto-margins-work-in-flexbox/  \n\n---\n","source":"_posts/CSS篇-auto关键词.md","raw":"---\nlayout:\n  - layout\ntitle: CSS篇-auto关键词\ndate: 2023-01-06 11:09:07\ntags:\n---\n\n---\n\n> 根据auto在CSS常用属性的实际表现来探究auto的作用\n\nauto是自适应，自动的意思\n\n# 1.width:auto;\nwidth默认值（即不设置width值时）是auto\n当使用`width:auto;`时，元素的宽被限制在父元素内，元素内容的宽度会自动减去元素的margin，padding和border，即元素内容自动充满元素剩余空间\n\n## width:auto; VS width:100%;\n`width:auto;`表示：父元素内容宽度=子元素margin+padding+border+content(元素内容宽度，即元素的剩余空间)\n\n`width:100%;`表示：父元素内容宽度=子元素content(即子元素内容宽度等于父元素宽度)\n\n**注意：适用标准浏览器的盒子模型，不适用IE盒子模型**\n\n# 2.height:auto;\nheight默认值是auto\n`height:auto;`，元素高度等于元素内容高度，此时即使设置`height:100%;`元素高度也还是元素的内容高度\n\n# 3.margin:auto;\nmargin的默认值是0，表示元素没有margin\n当使用`margin:auto;`，除去元素的content内容的宽高、padding、border，剩余空间都由margin来填充\n\n如下代码，元素宽高确定，巧用`margin:auto;`，达到水平垂直居中效果\n\n```\n<div class=\"wrapper\">\n  <div class=\"item\">I am centered.</div>\n</div>\n.wrapper {\n    position: relative;\n}\n.item {\n    width: 200px;\n    height: 100px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n```\n\n如下代码，元素宽确定，巧用`margin:0 auto;`，让元素水平居中\n\n```\n<div class=\"wrapper\">\n  <div class=\"item\">I am centered.</div>\n</div>\n.item {\n    width: 200px;\n    margin: auto;\n}\n```\n\n**margin-inline和margin-block属性是实验中属性，暂不研究**\n\n# 4.background-size:auto;\nbackground-size默认值是auto，以背景图片的比例缩放背景图片\n\n# 5.top/right/bottom/left:auto;\ntop/right/bottom/left的默认值是auto\n\n**MDN** \n**left:auto**\n\n**对于绝对定位元素，元素将忽略此属性而以right属性为准，如果此时设置width: auto，将基于内容需要的宽度设置宽度；如果right也为auto的话，元素的水平位置就是它假如作为静态 (即 static) 元素时该在的位置**\n\n**对于相对定位元素，元素相对正常位置的偏移量将基于right属性；如果right也为auto的话，元素将不会有偏移**\n\n# 6.z-index:auto;\nz-index默认值是auto\n盒子不会创建一个新的本地堆叠上下文  \n在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同\n\n# 7.overflow:auto;\noverflow默认值是visible，内容不能被裁减并且可能渲染到边距盒（padding）的外部\n\n**MDN：`overflow:auto;`**\n**取决于用户代理。如果内容适应边距（padding）盒，它看起来与 visible 相同，但是仍然建立了一个新的块级格式化上下文；如果内容溢出，则浏览器提供滚动条**\n\n# 8.cursor:auto;\ncursor默认值是auto，浏览器根据当前内容决定指针样式\n\n# 9.table-layout:auto;\ntable-layout默认值是auto，表格及单元格的宽度取决于其包含的内容\n\n# 10.flex:auto;\nflex默认值是`0 1 auto`，flex是flex-grow，flex-shrink，flex-basis的合并简写属性\n当使用`flex:auto;`，等同于`flex:1 1 auto;`\n\n### flex+margin-left:auto;可使元素右对齐\n```\n<div class=\"wrapper\">\n  <div class=\"item\">Item1</div>\n  <div class=\"item item-2\">Item2</div>\n</div>\n.wrapper {\n  display: flex;\n}\n.item-2 {\n  margin-left: auto;\n}\n```\n\n### flex+margin:auto;可使元素水平垂直居中\n```\n<div class=\"wrapper\">\n  <div class=\"item\">Item1</div>\n</div>\n.wrapper {\n  display: flex;\n  height: 400px;\n  background-color: blue;\n}\n.item {\n  width: 200px;\n  height: 100px;\n  margin: auto auto;\n  background-color: red;\n}\n```\n\n**grid可参考flex，暂不研究**\n\n---\n\n---\n\n# 参考文献：  \n英文版：https://ishadeed.com/article/auto-css/  \n\n中文翻译版：https://blog.csdn.net/qq449245884/article/details/105963479/   \nhttps://css-tricks.com/how-auto-margins-work-in-flexbox/  \n\n---\n","slug":"CSS篇-auto关键词","published":1,"updated":"2023-01-31T07:31:24.903Z","comments":1,"photos":[],"link":"","_id":"cldwps2ip0003qg3m74tg5sna","content":"<hr>\n<blockquote>\n<p>根据auto在CSS常用属性的实际表现来探究auto的作用</p>\n</blockquote>\n<p>auto是自适应，自动的意思</p>\n<h1 id=\"1-width-auto\"><a href=\"#1-width-auto\" class=\"headerlink\" title=\"1.width:auto;\"></a>1.width:auto;</h1><p>width默认值（即不设置width值时）是auto<br>当使用<code>width:auto;</code>时，元素的宽被限制在父元素内，元素内容的宽度会自动减去元素的margin，padding和border，即元素内容自动充满元素剩余空间</p>\n<h2 id=\"width-auto-VS-width-100\"><a href=\"#width-auto-VS-width-100\" class=\"headerlink\" title=\"width:auto; VS width:100%;\"></a>width:auto; VS width:100%;</h2><p><code>width:auto;</code>表示：父元素内容宽度=子元素margin+padding+border+content(元素内容宽度，即元素的剩余空间)</p>\n<p><code>width:100%;</code>表示：父元素内容宽度=子元素content(即子元素内容宽度等于父元素宽度)</p>\n<p><strong>注意：适用标准浏览器的盒子模型，不适用IE盒子模型</strong></p>\n<h1 id=\"2-height-auto\"><a href=\"#2-height-auto\" class=\"headerlink\" title=\"2.height:auto;\"></a>2.height:auto;</h1><p>height默认值是auto<br><code>height:auto;</code>，元素高度等于元素内容高度，此时即使设置<code>height:100%;</code>元素高度也还是元素的内容高度</p>\n<h1 id=\"3-margin-auto\"><a href=\"#3-margin-auto\" class=\"headerlink\" title=\"3.margin:auto;\"></a>3.margin:auto;</h1><p>margin的默认值是0，表示元素没有margin<br>当使用<code>margin:auto;</code>，除去元素的content内容的宽高、padding、border，剩余空间都由margin来填充</p>\n<p>如下代码，元素宽高确定，巧用<code>margin:auto;</code>，达到水平垂直居中效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;I am centered.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下代码，元素宽确定，巧用<code>margin:0 auto;</code>，让元素水平居中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;I am centered.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>margin-inline和margin-block属性是实验中属性，暂不研究</strong></p>\n<h1 id=\"4-background-size-auto\"><a href=\"#4-background-size-auto\" class=\"headerlink\" title=\"4.background-size:auto;\"></a>4.background-size:auto;</h1><p>background-size默认值是auto，以背景图片的比例缩放背景图片</p>\n<h1 id=\"5-top-right-bottom-left-auto\"><a href=\"#5-top-right-bottom-left-auto\" class=\"headerlink\" title=\"5.top/right/bottom/left:auto;\"></a>5.top/right/bottom/left:auto;</h1><p>top/right/bottom/left的默认值是auto</p>\n<p><strong>MDN</strong><br><strong>left:auto</strong></p>\n<p><strong>对于绝对定位元素，元素将忽略此属性而以right属性为准，如果此时设置width: auto，将基于内容需要的宽度设置宽度；如果right也为auto的话，元素的水平位置就是它假如作为静态 (即 static) 元素时该在的位置</strong></p>\n<p><strong>对于相对定位元素，元素相对正常位置的偏移量将基于right属性；如果right也为auto的话，元素将不会有偏移</strong></p>\n<h1 id=\"6-z-index-auto\"><a href=\"#6-z-index-auto\" class=\"headerlink\" title=\"6.z-index:auto;\"></a>6.z-index:auto;</h1><p>z-index默认值是auto<br>盒子不会创建一个新的本地堆叠上下文<br>在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同</p>\n<h1 id=\"7-overflow-auto\"><a href=\"#7-overflow-auto\" class=\"headerlink\" title=\"7.overflow:auto;\"></a>7.overflow:auto;</h1><p>overflow默认值是visible，内容不能被裁减并且可能渲染到边距盒（padding）的外部</p>\n<p><strong>MDN：<code>overflow:auto;</code></strong><br><strong>取决于用户代理。如果内容适应边距（padding）盒，它看起来与 visible 相同，但是仍然建立了一个新的块级格式化上下文；如果内容溢出，则浏览器提供滚动条</strong></p>\n<h1 id=\"8-cursor-auto\"><a href=\"#8-cursor-auto\" class=\"headerlink\" title=\"8.cursor:auto;\"></a>8.cursor:auto;</h1><p>cursor默认值是auto，浏览器根据当前内容决定指针样式</p>\n<h1 id=\"9-table-layout-auto\"><a href=\"#9-table-layout-auto\" class=\"headerlink\" title=\"9.table-layout:auto;\"></a>9.table-layout:auto;</h1><p>table-layout默认值是auto，表格及单元格的宽度取决于其包含的内容</p>\n<h1 id=\"10-flex-auto\"><a href=\"#10-flex-auto\" class=\"headerlink\" title=\"10.flex:auto;\"></a>10.flex:auto;</h1><p>flex默认值是<code>0 1 auto</code>，flex是flex-grow，flex-shrink，flex-basis的合并简写属性<br>当使用<code>flex:auto;</code>，等同于<code>flex:1 1 auto;</code></p>\n<h3 id=\"flex-margin-left-auto-可使元素右对齐\"><a href=\"#flex-margin-left-auto-可使元素右对齐\" class=\"headerlink\" title=\"flex+margin-left:auto;可使元素右对齐\"></a>flex+margin-left:auto;可使元素右对齐</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;Item1&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item item-2&quot;&gt;Item2&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item-2 &#123;</span><br><span class=\"line\">  margin-left: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"flex-margin-auto-可使元素水平垂直居中\"><a href=\"#flex-margin-auto-可使元素水平垂直居中\" class=\"headerlink\" title=\"flex+margin:auto;可使元素水平垂直居中\"></a>flex+margin:auto;可使元素水平垂直居中</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;Item1&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  height: 400px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">  width: 200px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  margin: auto auto;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>grid可参考flex，暂不研究</strong></p>\n<hr>\n<hr>\n<h1 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h1><p>英文版：<a href=\"https://ishadeed.com/article/auto-css/\">https://ishadeed.com/article/auto-css/</a>  </p>\n<p>中文翻译版：<a href=\"https://blog.csdn.net/qq449245884/article/details/105963479/\">https://blog.csdn.net/qq449245884/article/details/105963479/</a><br><a href=\"https://css-tricks.com/how-auto-margins-work-in-flexbox/\">https://css-tricks.com/how-auto-margins-work-in-flexbox/</a>  </p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<blockquote>\n<p>根据auto在CSS常用属性的实际表现来探究auto的作用</p>\n</blockquote>\n<p>auto是自适应，自动的意思</p>\n<h1 id=\"1-width-auto\"><a href=\"#1-width-auto\" class=\"headerlink\" title=\"1.width:auto;\"></a>1.width:auto;</h1><p>width默认值（即不设置width值时）是auto<br>当使用<code>width:auto;</code>时，元素的宽被限制在父元素内，元素内容的宽度会自动减去元素的margin，padding和border，即元素内容自动充满元素剩余空间</p>\n<h2 id=\"width-auto-VS-width-100\"><a href=\"#width-auto-VS-width-100\" class=\"headerlink\" title=\"width:auto; VS width:100%;\"></a>width:auto; VS width:100%;</h2><p><code>width:auto;</code>表示：父元素内容宽度=子元素margin+padding+border+content(元素内容宽度，即元素的剩余空间)</p>\n<p><code>width:100%;</code>表示：父元素内容宽度=子元素content(即子元素内容宽度等于父元素宽度)</p>\n<p><strong>注意：适用标准浏览器的盒子模型，不适用IE盒子模型</strong></p>\n<h1 id=\"2-height-auto\"><a href=\"#2-height-auto\" class=\"headerlink\" title=\"2.height:auto;\"></a>2.height:auto;</h1><p>height默认值是auto<br><code>height:auto;</code>，元素高度等于元素内容高度，此时即使设置<code>height:100%;</code>元素高度也还是元素的内容高度</p>\n<h1 id=\"3-margin-auto\"><a href=\"#3-margin-auto\" class=\"headerlink\" title=\"3.margin:auto;\"></a>3.margin:auto;</h1><p>margin的默认值是0，表示元素没有margin<br>当使用<code>margin:auto;</code>，除去元素的content内容的宽高、padding、border，剩余空间都由margin来填充</p>\n<p>如下代码，元素宽高确定，巧用<code>margin:auto;</code>，达到水平垂直居中效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;I am centered.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下代码，元素宽确定，巧用<code>margin:0 auto;</code>，让元素水平居中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;I am centered.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>margin-inline和margin-block属性是实验中属性，暂不研究</strong></p>\n<h1 id=\"4-background-size-auto\"><a href=\"#4-background-size-auto\" class=\"headerlink\" title=\"4.background-size:auto;\"></a>4.background-size:auto;</h1><p>background-size默认值是auto，以背景图片的比例缩放背景图片</p>\n<h1 id=\"5-top-right-bottom-left-auto\"><a href=\"#5-top-right-bottom-left-auto\" class=\"headerlink\" title=\"5.top/right/bottom/left:auto;\"></a>5.top/right/bottom/left:auto;</h1><p>top/right/bottom/left的默认值是auto</p>\n<p><strong>MDN</strong><br><strong>left:auto</strong></p>\n<p><strong>对于绝对定位元素，元素将忽略此属性而以right属性为准，如果此时设置width: auto，将基于内容需要的宽度设置宽度；如果right也为auto的话，元素的水平位置就是它假如作为静态 (即 static) 元素时该在的位置</strong></p>\n<p><strong>对于相对定位元素，元素相对正常位置的偏移量将基于right属性；如果right也为auto的话，元素将不会有偏移</strong></p>\n<h1 id=\"6-z-index-auto\"><a href=\"#6-z-index-auto\" class=\"headerlink\" title=\"6.z-index:auto;\"></a>6.z-index:auto;</h1><p>z-index默认值是auto<br>盒子不会创建一个新的本地堆叠上下文<br>在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同</p>\n<h1 id=\"7-overflow-auto\"><a href=\"#7-overflow-auto\" class=\"headerlink\" title=\"7.overflow:auto;\"></a>7.overflow:auto;</h1><p>overflow默认值是visible，内容不能被裁减并且可能渲染到边距盒（padding）的外部</p>\n<p><strong>MDN：<code>overflow:auto;</code></strong><br><strong>取决于用户代理。如果内容适应边距（padding）盒，它看起来与 visible 相同，但是仍然建立了一个新的块级格式化上下文；如果内容溢出，则浏览器提供滚动条</strong></p>\n<h1 id=\"8-cursor-auto\"><a href=\"#8-cursor-auto\" class=\"headerlink\" title=\"8.cursor:auto;\"></a>8.cursor:auto;</h1><p>cursor默认值是auto，浏览器根据当前内容决定指针样式</p>\n<h1 id=\"9-table-layout-auto\"><a href=\"#9-table-layout-auto\" class=\"headerlink\" title=\"9.table-layout:auto;\"></a>9.table-layout:auto;</h1><p>table-layout默认值是auto，表格及单元格的宽度取决于其包含的内容</p>\n<h1 id=\"10-flex-auto\"><a href=\"#10-flex-auto\" class=\"headerlink\" title=\"10.flex:auto;\"></a>10.flex:auto;</h1><p>flex默认值是<code>0 1 auto</code>，flex是flex-grow，flex-shrink，flex-basis的合并简写属性<br>当使用<code>flex:auto;</code>，等同于<code>flex:1 1 auto;</code></p>\n<h3 id=\"flex-margin-left-auto-可使元素右对齐\"><a href=\"#flex-margin-left-auto-可使元素右对齐\" class=\"headerlink\" title=\"flex+margin-left:auto;可使元素右对齐\"></a>flex+margin-left:auto;可使元素右对齐</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;Item1&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item item-2&quot;&gt;Item2&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item-2 &#123;</span><br><span class=\"line\">  margin-left: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"flex-margin-auto-可使元素水平垂直居中\"><a href=\"#flex-margin-auto-可使元素水平垂直居中\" class=\"headerlink\" title=\"flex+margin:auto;可使元素水平垂直居中\"></a>flex+margin:auto;可使元素水平垂直居中</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;Item1&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  height: 400px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">  width: 200px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  margin: auto auto;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>grid可参考flex，暂不研究</strong></p>\n<hr>\n<hr>\n<h1 id=\"参考文献：\"><a href=\"#参考文献：\" class=\"headerlink\" title=\"参考文献：\"></a>参考文献：</h1><p>英文版：<a href=\"https://ishadeed.com/article/auto-css/\">https://ishadeed.com/article/auto-css/</a>  </p>\n<p>中文翻译版：<a href=\"https://blog.csdn.net/qq449245884/article/details/105963479/\">https://blog.csdn.net/qq449245884/article/details/105963479/</a><br><a href=\"https://css-tricks.com/how-auto-margins-work-in-flexbox/\">https://css-tricks.com/how-auto-margins-work-in-flexbox/</a>  </p>\n<hr>\n"},{"title":"JavaScript定义变量","date":"2021-12-23T06:22:39.000Z","_content":"\n## 一、声明变量\n\n**1.** 优先执行：在执行任何代码之前进行处理\n**2.** 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的\n**3.** 作用域在当前执行上下文：作用域限制函数内或全局作用域\n\n**注：** 建议先声明变量再使用，在 ES5 严格模式下，分配值给未声明变量将引发错误\n\n---\n\n声明变量的方法：\nES5：var 和 function\nES6：var、function、let、const、import、class\n\n---\n\n#### 优先执行\n\n**变量提升：** 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”\n始终在作用域顶部声明变量（全局/函数代码的顶部）\n变量提升影响变量声明，不影响其值的初始化\n\n#### 不可配置性\n\n```\nvar a=1;\nb=2;\ndelete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示\ndelete this.b;\nconsole.info(a,b);//抛出refrenceerror（引用错误，b已被删除）\n```\n\n#### 声明多个变量\n\n**隐式声明全局变量**\n在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）\n\n```\nvar a=b='A';\n//等效于\nb='A';\nvar a='A';\n//连等操作是从右向左执行的，相当于b = 'A'、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量\nvar a=(b='A');\nconsole.info(a,b);//'A','A'\n//并且赋值号返回右侧变量的值\n\nvar x=y,y='A';\nconsole.info(x+y);//undefinedA\n//当\"x = y\"执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是'undefined'\n\nvar x=0;\nfunction f(){\n  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1\n}\nf();//不执行函数f，获取x的值全局声明的x，y则是未定义\nconsole.info(x,y);//0,1 //此处获取的全局的x,y\n```\n\n## 二、var 定义变量\n\nvar 声明的变量作用域是它当前的**执行上下文**，作用域是函数内或全局\n多次用 var 声明变量，变量不会丢失其值\n\n## 三、let 定义变量\n\nlet 声明的变量作用域被限制在块级中的变量、语句或者表达式\n在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError（语法错误）\n**注：** 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误\n\n#### var 与 let 不同\n\n初始化：\nlet 定义被执行时（编译时）才初始化\nvar 在作用域最顶部初始化且值为 undefined\n作用域：\nlet 被限制在块级中的变量、语句或者表达式\nvar 只能是全局或者整个函数块的\n\n#### 暂存死区\n\n“暂时性死区”（temporal dead zone，简称 TDZ）\n\n暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量（摘自 ES6 入门-->阮一峰）\n\n(let,const)在变量初始化之前访问变量导致 ReferenceError，该变量处在一个自顶部到初始化处理的“暂存死区”中\n使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError\n\n```\nfunction test(){\n   var foo = 33;\n   if (foo) {\n      let foo = (foo + 55); // ReferenceError\n      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）\n   }\n}\ntest();\n\nfunction go(n) {\n  // n here is defined!\n  console.info(n); // Object {a: [1,2,3]}\n\n  for (let n of n.a) { // ReferenceError，n.a被解析为位于指令本身(\"let n\")中的“ n”对象的属性“ a”。\n    console.info(n);\n  }\n}\ngo({a: [1, 2, 3]});\n\nlet x = 1;\n{\n  var x = 2; // SyntaxError for re-declaration\n}\n//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量\n//等效-->\nlet x=1;\nvar x;//重复\n{\n  x=2;\n}\n```\n\n## 四、cosnt 定义变量\n\n与 let 声明变量类似\nconst 定义块级常量，声明必须赋值\n创建一个值的只读引用，变量标识符不能重新分配\n在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）\n一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称\n\n```\nconst MY_FAV=7;\nif (MY_FAV === 7) {\n  // 没问题，并且创建了一个块作用域变量 MY_FAV\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n  console.info('my favorite number is ' + MY_FAV);//20\n  // 这被提升到全局上下文并引发错误\n  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明\n}\nconsole.info('my favorite number is ' + MY_FAV);//全局,7\n\nconst MY_OBJECT={'key':'value'}\nMY_OBJECT={'OTHER_KEY':'value'};//Uncaught TypeError: Assignment to constant variable 分配常量值错误\nMY_OBJECT.key='otherValue';\n\nconst MY_ARRAY = [];\n// 可以向数组填充数据\nMY_ARRAY.push('A'); // [\"A\"]\n// 但是，将一个新数组赋给变量会引发错误\nMY_ARRAY = ['B'];// Uncaught TypeError: Assignment to constant variable.\n```\n\n将对象冻结，使用 Object.freeze()，不让对象的引用值改变\n\n## 五、块级作用域与函数声明\n\nES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明\n浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数\nES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用\nES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n\n#### 对 ES6 的浏览器\n\n- 允许在块级作用域内声明函数\n- 函数声明类似于 var，即会提升到全局作用域或函数作用域的头部\n- 同时，函数声明还会提升到所在的块级作用域的头部\n\n严格模式下，函数只能声明在当前作用域的顶层。\n","source":"_posts/JavaScript定义变量.md","raw":"---\ntitle: JavaScript定义变量\ndate: 2021-12-23 14:22:39\ncategories:\n  - work\n---\n\n## 一、声明变量\n\n**1.** 优先执行：在执行任何代码之前进行处理\n**2.** 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的\n**3.** 作用域在当前执行上下文：作用域限制函数内或全局作用域\n\n**注：** 建议先声明变量再使用，在 ES5 严格模式下，分配值给未声明变量将引发错误\n\n---\n\n声明变量的方法：\nES5：var 和 function\nES6：var、function、let、const、import、class\n\n---\n\n#### 优先执行\n\n**变量提升：** 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”\n始终在作用域顶部声明变量（全局/函数代码的顶部）\n变量提升影响变量声明，不影响其值的初始化\n\n#### 不可配置性\n\n```\nvar a=1;\nb=2;\ndelete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示\ndelete this.b;\nconsole.info(a,b);//抛出refrenceerror（引用错误，b已被删除）\n```\n\n#### 声明多个变量\n\n**隐式声明全局变量**\n在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）\n\n```\nvar a=b='A';\n//等效于\nb='A';\nvar a='A';\n//连等操作是从右向左执行的，相当于b = 'A'、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量\nvar a=(b='A');\nconsole.info(a,b);//'A','A'\n//并且赋值号返回右侧变量的值\n\nvar x=y,y='A';\nconsole.info(x+y);//undefinedA\n//当\"x = y\"执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是'undefined'\n\nvar x=0;\nfunction f(){\n  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1\n}\nf();//不执行函数f，获取x的值全局声明的x，y则是未定义\nconsole.info(x,y);//0,1 //此处获取的全局的x,y\n```\n\n## 二、var 定义变量\n\nvar 声明的变量作用域是它当前的**执行上下文**，作用域是函数内或全局\n多次用 var 声明变量，变量不会丢失其值\n\n## 三、let 定义变量\n\nlet 声明的变量作用域被限制在块级中的变量、语句或者表达式\n在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError（语法错误）\n**注：** 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误\n\n#### var 与 let 不同\n\n初始化：\nlet 定义被执行时（编译时）才初始化\nvar 在作用域最顶部初始化且值为 undefined\n作用域：\nlet 被限制在块级中的变量、语句或者表达式\nvar 只能是全局或者整个函数块的\n\n#### 暂存死区\n\n“暂时性死区”（temporal dead zone，简称 TDZ）\n\n暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量（摘自 ES6 入门-->阮一峰）\n\n(let,const)在变量初始化之前访问变量导致 ReferenceError，该变量处在一个自顶部到初始化处理的“暂存死区”中\n使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError\n\n```\nfunction test(){\n   var foo = 33;\n   if (foo) {\n      let foo = (foo + 55); // ReferenceError\n      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）\n   }\n}\ntest();\n\nfunction go(n) {\n  // n here is defined!\n  console.info(n); // Object {a: [1,2,3]}\n\n  for (let n of n.a) { // ReferenceError，n.a被解析为位于指令本身(\"let n\")中的“ n”对象的属性“ a”。\n    console.info(n);\n  }\n}\ngo({a: [1, 2, 3]});\n\nlet x = 1;\n{\n  var x = 2; // SyntaxError for re-declaration\n}\n//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量\n//等效-->\nlet x=1;\nvar x;//重复\n{\n  x=2;\n}\n```\n\n## 四、cosnt 定义变量\n\n与 let 声明变量类似\nconst 定义块级常量，声明必须赋值\n创建一个值的只读引用，变量标识符不能重新分配\n在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）\n一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称\n\n```\nconst MY_FAV=7;\nif (MY_FAV === 7) {\n  // 没问题，并且创建了一个块作用域变量 MY_FAV\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n  console.info('my favorite number is ' + MY_FAV);//20\n  // 这被提升到全局上下文并引发错误\n  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明\n}\nconsole.info('my favorite number is ' + MY_FAV);//全局,7\n\nconst MY_OBJECT={'key':'value'}\nMY_OBJECT={'OTHER_KEY':'value'};//Uncaught TypeError: Assignment to constant variable 分配常量值错误\nMY_OBJECT.key='otherValue';\n\nconst MY_ARRAY = [];\n// 可以向数组填充数据\nMY_ARRAY.push('A'); // [\"A\"]\n// 但是，将一个新数组赋给变量会引发错误\nMY_ARRAY = ['B'];// Uncaught TypeError: Assignment to constant variable.\n```\n\n将对象冻结，使用 Object.freeze()，不让对象的引用值改变\n\n## 五、块级作用域与函数声明\n\nES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明\n浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数\nES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用\nES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n\n#### 对 ES6 的浏览器\n\n- 允许在块级作用域内声明函数\n- 函数声明类似于 var，即会提升到全局作用域或函数作用域的头部\n- 同时，函数声明还会提升到所在的块级作用域的头部\n\n严格模式下，函数只能声明在当前作用域的顶层。\n","slug":"JavaScript定义变量","published":1,"updated":"2022-11-29T06:57:42.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwps2ir0005qg3mf55ldll1","content":"<h2 id=\"一、声明变量\"><a href=\"#一、声明变量\" class=\"headerlink\" title=\"一、声明变量\"></a>一、声明变量</h2><p><strong>1.</strong> 优先执行：在执行任何代码之前进行处理<br><strong>2.</strong> 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的<br><strong>3.</strong> 作用域在当前执行上下文：作用域限制函数内或全局作用域</p>\n<p><strong>注：</strong> 建议先声明变量再使用，在 ES5 严格模式下，分配值给未声明变量将引发错误</p>\n<hr>\n<p>声明变量的方法：<br>ES5：var 和 function<br>ES6：var、function、let、const、import、class</p>\n<hr>\n<h4 id=\"优先执行\"><a href=\"#优先执行\" class=\"headerlink\" title=\"优先执行\"></a>优先执行</h4><p><strong>变量提升：</strong> 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”<br>始终在作用域顶部声明变量（全局/函数代码的顶部）<br>变量提升影响变量声明，不影响其值的初始化</p>\n<h4 id=\"不可配置性\"><a href=\"#不可配置性\" class=\"headerlink\" title=\"不可配置性\"></a>不可配置性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">b=2;</span><br><span class=\"line\">delete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示</span><br><span class=\"line\">delete this.b;</span><br><span class=\"line\">console.info(a,b);//抛出refrenceerror（引用错误，b已被删除）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明多个变量\"><a href=\"#声明多个变量\" class=\"headerlink\" title=\"声明多个变量\"></a>声明多个变量</h4><p><strong>隐式声明全局变量</strong><br>在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=b=&#x27;A&#x27;;</span><br><span class=\"line\">//等效于</span><br><span class=\"line\">b=&#x27;A&#x27;;</span><br><span class=\"line\">var a=&#x27;A&#x27;;</span><br><span class=\"line\">//连等操作是从右向左执行的，相当于b = &#x27;A&#x27;、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量</span><br><span class=\"line\">var a=(b=&#x27;A&#x27;);</span><br><span class=\"line\">console.info(a,b);//&#x27;A&#x27;,&#x27;A&#x27;</span><br><span class=\"line\">//并且赋值号返回右侧变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">var x=y,y=&#x27;A&#x27;;</span><br><span class=\"line\">console.info(x+y);//undefinedA</span><br><span class=\"line\">//当&quot;x = y&quot;执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是&#x27;undefined&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var x=0;</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();//不执行函数f，获取x的值全局声明的x，y则是未定义</span><br><span class=\"line\">console.info(x,y);//0,1 //此处获取的全局的x,y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、var-定义变量\"><a href=\"#二、var-定义变量\" class=\"headerlink\" title=\"二、var 定义变量\"></a>二、var 定义变量</h2><p>var 声明的变量作用域是它当前的<strong>执行上下文</strong>，作用域是函数内或全局<br>多次用 var 声明变量，变量不会丢失其值</p>\n<h2 id=\"三、let-定义变量\"><a href=\"#三、let-定义变量\" class=\"headerlink\" title=\"三、let 定义变量\"></a>三、let 定义变量</h2><p>let 声明的变量作用域被限制在块级中的变量、语句或者表达式<br>在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError（语法错误）<br><strong>注：</strong> 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误</p>\n<h4 id=\"var-与-let-不同\"><a href=\"#var-与-let-不同\" class=\"headerlink\" title=\"var 与 let 不同\"></a>var 与 let 不同</h4><p>初始化：<br>let 定义被执行时（编译时）才初始化<br>var 在作用域最顶部初始化且值为 undefined<br>作用域：<br>let 被限制在块级中的变量、语句或者表达式<br>var 只能是全局或者整个函数块的</p>\n<h4 id=\"暂存死区\"><a href=\"#暂存死区\" class=\"headerlink\" title=\"暂存死区\"></a>暂存死区</h4><p>“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量（摘自 ES6 入门–&gt;阮一峰）</p>\n<p>(let,const)在变量初始化之前访问变量导致 ReferenceError，该变量处在一个自顶部到初始化处理的“暂存死区”中<br>使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">   var foo = 33;</span><br><span class=\"line\">   if (foo) &#123;</span><br><span class=\"line\">      let foo = (foo + 55); // ReferenceError</span><br><span class=\"line\">      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\">function go(n) &#123;</span><br><span class=\"line\">  // n here is defined!</span><br><span class=\"line\">  console.info(n); // Object &#123;a: [1,2,3]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let n of n.a) &#123; // ReferenceError，n.a被解析为位于指令本身(&quot;let n&quot;)中的“ n”对象的属性“ a”。</span><br><span class=\"line\">    console.info(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">go(&#123;a: [1, 2, 3]&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">let x = 1;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  var x = 2; // SyntaxError for re-declaration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量</span><br><span class=\"line\">//等效--&gt;</span><br><span class=\"line\">let x=1;</span><br><span class=\"line\">var x;//重复</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  x=2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、cosnt-定义变量\"><a href=\"#四、cosnt-定义变量\" class=\"headerlink\" title=\"四、cosnt 定义变量\"></a>四、cosnt 定义变量</h2><p>与 let 声明变量类似<br>const 定义块级常量，声明必须赋值<br>创建一个值的只读引用，变量标识符不能重新分配<br>在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）<br>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MY_FAV=7;</span><br><span class=\"line\">if (MY_FAV === 7) &#123;</span><br><span class=\"line\">  // 没问题，并且创建了一个块作用域变量 MY_FAV</span><br><span class=\"line\">  // (works equally well with let to declare a block scoped non const variable)</span><br><span class=\"line\">  let MY_FAV = 20;</span><br><span class=\"line\">  console.info(&#x27;my favorite number is &#x27; + MY_FAV);//20</span><br><span class=\"line\">  // 这被提升到全局上下文并引发错误</span><br><span class=\"line\">  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.info(&#x27;my favorite number is &#x27; + MY_FAV);//全局,7</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_OBJECT=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;</span><br><span class=\"line\">MY_OBJECT=&#123;&#x27;OTHER_KEY&#x27;:&#x27;value&#x27;&#125;;//Uncaught TypeError: Assignment to constant variable 分配常量值错误</span><br><span class=\"line\">MY_OBJECT.key=&#x27;otherValue&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_ARRAY = [];</span><br><span class=\"line\">// 可以向数组填充数据</span><br><span class=\"line\">MY_ARRAY.push(&#x27;A&#x27;); // [&quot;A&quot;]</span><br><span class=\"line\">// 但是，将一个新数组赋给变量会引发错误</span><br><span class=\"line\">MY_ARRAY = [&#x27;B&#x27;];// Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n\n<p>将对象冻结，使用 Object.freeze()，不让对象的引用值改变</p>\n<h2 id=\"五、块级作用域与函数声明\"><a href=\"#五、块级作用域与函数声明\" class=\"headerlink\" title=\"五、块级作用域与函数声明\"></a>五、块级作用域与函数声明</h2><p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明<br>浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数<br>ES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用<br>ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>\n<h4 id=\"对-ES6-的浏览器\"><a href=\"#对-ES6-的浏览器\" class=\"headerlink\" title=\"对 ES6 的浏览器\"></a>对 ES6 的浏览器</h4><ul>\n<li>允许在块级作用域内声明函数</li>\n<li>函数声明类似于 var，即会提升到全局作用域或函数作用域的头部</li>\n<li>同时，函数声明还会提升到所在的块级作用域的头部</li>\n</ul>\n<p>严格模式下，函数只能声明在当前作用域的顶层。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、声明变量\"><a href=\"#一、声明变量\" class=\"headerlink\" title=\"一、声明变量\"></a>一、声明变量</h2><p><strong>1.</strong> 优先执行：在执行任何代码之前进行处理<br><strong>2.</strong> 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的<br><strong>3.</strong> 作用域在当前执行上下文：作用域限制函数内或全局作用域</p>\n<p><strong>注：</strong> 建议先声明变量再使用，在 ES5 严格模式下，分配值给未声明变量将引发错误</p>\n<hr>\n<p>声明变量的方法：<br>ES5：var 和 function<br>ES6：var、function、let、const、import、class</p>\n<hr>\n<h4 id=\"优先执行\"><a href=\"#优先执行\" class=\"headerlink\" title=\"优先执行\"></a>优先执行</h4><p><strong>变量提升：</strong> 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”<br>始终在作用域顶部声明变量（全局/函数代码的顶部）<br>变量提升影响变量声明，不影响其值的初始化</p>\n<h4 id=\"不可配置性\"><a href=\"#不可配置性\" class=\"headerlink\" title=\"不可配置性\"></a>不可配置性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">b=2;</span><br><span class=\"line\">delete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示</span><br><span class=\"line\">delete this.b;</span><br><span class=\"line\">console.info(a,b);//抛出refrenceerror（引用错误，b已被删除）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明多个变量\"><a href=\"#声明多个变量\" class=\"headerlink\" title=\"声明多个变量\"></a>声明多个变量</h4><p><strong>隐式声明全局变量</strong><br>在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=b=&#x27;A&#x27;;</span><br><span class=\"line\">//等效于</span><br><span class=\"line\">b=&#x27;A&#x27;;</span><br><span class=\"line\">var a=&#x27;A&#x27;;</span><br><span class=\"line\">//连等操作是从右向左执行的，相当于b = &#x27;A&#x27;、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量</span><br><span class=\"line\">var a=(b=&#x27;A&#x27;);</span><br><span class=\"line\">console.info(a,b);//&#x27;A&#x27;,&#x27;A&#x27;</span><br><span class=\"line\">//并且赋值号返回右侧变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">var x=y,y=&#x27;A&#x27;;</span><br><span class=\"line\">console.info(x+y);//undefinedA</span><br><span class=\"line\">//当&quot;x = y&quot;执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是&#x27;undefined&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var x=0;</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();//不执行函数f，获取x的值全局声明的x，y则是未定义</span><br><span class=\"line\">console.info(x,y);//0,1 //此处获取的全局的x,y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、var-定义变量\"><a href=\"#二、var-定义变量\" class=\"headerlink\" title=\"二、var 定义变量\"></a>二、var 定义变量</h2><p>var 声明的变量作用域是它当前的<strong>执行上下文</strong>，作用域是函数内或全局<br>多次用 var 声明变量，变量不会丢失其值</p>\n<h2 id=\"三、let-定义变量\"><a href=\"#三、let-定义变量\" class=\"headerlink\" title=\"三、let 定义变量\"></a>三、let 定义变量</h2><p>let 声明的变量作用域被限制在块级中的变量、语句或者表达式<br>在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError（语法错误）<br><strong>注：</strong> 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误</p>\n<h4 id=\"var-与-let-不同\"><a href=\"#var-与-let-不同\" class=\"headerlink\" title=\"var 与 let 不同\"></a>var 与 let 不同</h4><p>初始化：<br>let 定义被执行时（编译时）才初始化<br>var 在作用域最顶部初始化且值为 undefined<br>作用域：<br>let 被限制在块级中的变量、语句或者表达式<br>var 只能是全局或者整个函数块的</p>\n<h4 id=\"暂存死区\"><a href=\"#暂存死区\" class=\"headerlink\" title=\"暂存死区\"></a>暂存死区</h4><p>“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量（摘自 ES6 入门–&gt;阮一峰）</p>\n<p>(let,const)在变量初始化之前访问变量导致 ReferenceError，该变量处在一个自顶部到初始化处理的“暂存死区”中<br>使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">   var foo = 33;</span><br><span class=\"line\">   if (foo) &#123;</span><br><span class=\"line\">      let foo = (foo + 55); // ReferenceError</span><br><span class=\"line\">      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\">function go(n) &#123;</span><br><span class=\"line\">  // n here is defined!</span><br><span class=\"line\">  console.info(n); // Object &#123;a: [1,2,3]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let n of n.a) &#123; // ReferenceError，n.a被解析为位于指令本身(&quot;let n&quot;)中的“ n”对象的属性“ a”。</span><br><span class=\"line\">    console.info(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">go(&#123;a: [1, 2, 3]&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">let x = 1;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  var x = 2; // SyntaxError for re-declaration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量</span><br><span class=\"line\">//等效--&gt;</span><br><span class=\"line\">let x=1;</span><br><span class=\"line\">var x;//重复</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  x=2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、cosnt-定义变量\"><a href=\"#四、cosnt-定义变量\" class=\"headerlink\" title=\"四、cosnt 定义变量\"></a>四、cosnt 定义变量</h2><p>与 let 声明变量类似<br>const 定义块级常量，声明必须赋值<br>创建一个值的只读引用，变量标识符不能重新分配<br>在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）<br>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MY_FAV=7;</span><br><span class=\"line\">if (MY_FAV === 7) &#123;</span><br><span class=\"line\">  // 没问题，并且创建了一个块作用域变量 MY_FAV</span><br><span class=\"line\">  // (works equally well with let to declare a block scoped non const variable)</span><br><span class=\"line\">  let MY_FAV = 20;</span><br><span class=\"line\">  console.info(&#x27;my favorite number is &#x27; + MY_FAV);//20</span><br><span class=\"line\">  // 这被提升到全局上下文并引发错误</span><br><span class=\"line\">  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.info(&#x27;my favorite number is &#x27; + MY_FAV);//全局,7</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_OBJECT=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;</span><br><span class=\"line\">MY_OBJECT=&#123;&#x27;OTHER_KEY&#x27;:&#x27;value&#x27;&#125;;//Uncaught TypeError: Assignment to constant variable 分配常量值错误</span><br><span class=\"line\">MY_OBJECT.key=&#x27;otherValue&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_ARRAY = [];</span><br><span class=\"line\">// 可以向数组填充数据</span><br><span class=\"line\">MY_ARRAY.push(&#x27;A&#x27;); // [&quot;A&quot;]</span><br><span class=\"line\">// 但是，将一个新数组赋给变量会引发错误</span><br><span class=\"line\">MY_ARRAY = [&#x27;B&#x27;];// Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n\n<p>将对象冻结，使用 Object.freeze()，不让对象的引用值改变</p>\n<h2 id=\"五、块级作用域与函数声明\"><a href=\"#五、块级作用域与函数声明\" class=\"headerlink\" title=\"五、块级作用域与函数声明\"></a>五、块级作用域与函数声明</h2><p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明<br>浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数<br>ES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用<br>ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>\n<h4 id=\"对-ES6-的浏览器\"><a href=\"#对-ES6-的浏览器\" class=\"headerlink\" title=\"对 ES6 的浏览器\"></a>对 ES6 的浏览器</h4><ul>\n<li>允许在块级作用域内声明函数</li>\n<li>函数声明类似于 var，即会提升到全局作用域或函数作用域的头部</li>\n<li>同时，函数声明还会提升到所在的块级作用域的头部</li>\n</ul>\n<p>严格模式下，函数只能声明在当前作用域的顶层。</p>\n"},{"layout":"layout","title":"closure","date":"2023-02-07T07:40:01.000Z","_content":"\n# 特征\n* 外部函数不存在，闭包仍然可以访问外部函数的变量\n* 闭包不能访问其外部函数的args形参???\n\n# 优点\n* 允许将变量添加到执行上下文\n* 闭包中可存储外部函数变量，方便以后使用\n* 可以数据封装\n* 可用于维护模块代码\n\n# 缺点\n* 闭包中的变量不会被垃圾回收\n* 太多的闭包会降低网页运行效率，实际是由于内存中的代码重复造成\n\n# 手动回收闭包中的变量\n```\nfunction test() {\n  var count = 0;\n  return function() {\n    count++;\n  };\n}\nvar x = test();\nx = \"\";\n// 或以下写法\nfunction foo () {\n  var x = test();\n  x();\n}\nfoo();\n```\n","source":"_posts/closure.md","raw":"---\nlayout:\n  - layout\ntitle: closure\ndate: 2023-02-07 15:40:01\ntags: \n---\n\n# 特征\n* 外部函数不存在，闭包仍然可以访问外部函数的变量\n* 闭包不能访问其外部函数的args形参???\n\n# 优点\n* 允许将变量添加到执行上下文\n* 闭包中可存储外部函数变量，方便以后使用\n* 可以数据封装\n* 可用于维护模块代码\n\n# 缺点\n* 闭包中的变量不会被垃圾回收\n* 太多的闭包会降低网页运行效率，实际是由于内存中的代码重复造成\n\n# 手动回收闭包中的变量\n```\nfunction test() {\n  var count = 0;\n  return function() {\n    count++;\n  };\n}\nvar x = test();\nx = \"\";\n// 或以下写法\nfunction foo () {\n  var x = test();\n  x();\n}\nfoo();\n```\n","slug":"closure","published":1,"updated":"2023-02-07T10:34:41.547Z","comments":1,"photos":[],"link":"","_id":"cldwps2is0007qg3m4ahi6cpe","content":"<h1 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h1><ul>\n<li>外部函数不存在，闭包仍然可以访问外部函数的变量</li>\n<li>闭包不能访问其外部函数的args形参???</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li>允许将变量添加到执行上下文</li>\n<li>闭包中可存储外部函数变量，方便以后使用</li>\n<li>可以数据封装</li>\n<li>可用于维护模块代码</li>\n</ul>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ul>\n<li>闭包中的变量不会被垃圾回收</li>\n<li>太多的闭包会降低网页运行效率，实际是由于内存中的代码重复造成</li>\n</ul>\n<h1 id=\"手动回收闭包中的变量\"><a href=\"#手动回收闭包中的变量\" class=\"headerlink\" title=\"手动回收闭包中的变量\"></a>手动回收闭包中的变量</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test() &#123;</span><br><span class=\"line\">  var count = 0;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x = test();</span><br><span class=\"line\">x = &quot;&quot;;</span><br><span class=\"line\">// 或以下写法</span><br><span class=\"line\">function foo () &#123;</span><br><span class=\"line\">  var x = test();</span><br><span class=\"line\">  x();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h1><ul>\n<li>外部函数不存在，闭包仍然可以访问外部函数的变量</li>\n<li>闭包不能访问其外部函数的args形参???</li>\n</ul>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li>允许将变量添加到执行上下文</li>\n<li>闭包中可存储外部函数变量，方便以后使用</li>\n<li>可以数据封装</li>\n<li>可用于维护模块代码</li>\n</ul>\n<h1 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h1><ul>\n<li>闭包中的变量不会被垃圾回收</li>\n<li>太多的闭包会降低网页运行效率，实际是由于内存中的代码重复造成</li>\n</ul>\n<h1 id=\"手动回收闭包中的变量\"><a href=\"#手动回收闭包中的变量\" class=\"headerlink\" title=\"手动回收闭包中的变量\"></a>手动回收闭包中的变量</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test() &#123;</span><br><span class=\"line\">  var count = 0;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x = test();</span><br><span class=\"line\">x = &quot;&quot;;</span><br><span class=\"line\">// 或以下写法</span><br><span class=\"line\">function foo () &#123;</span><br><span class=\"line\">  var x = test();</span><br><span class=\"line\">  x();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n"},{"layout":"layout","title":"Promise","date":"2023-01-31T02:02:41.000Z","_content":"\n# 状态\n* pending 初始状态，未成功也未拒绝\n* fulfilled 操作成功完成\n* rejected 操作失败\n\n# 链式调用\n链式调用中的第一个 `promise` 是嵌套最深的一个，也将是第一个被弹出的\n```\nconst myPromise = new Promise((resolve,reject)=>{\n  setTimeout(()=>{\n    resolve('foo');\n  },500)\n});\nmyPromise\n  .then()\n  .then()\n  .then()\n  .catch()\n  .finally()\n```\n\n# 构造函数\n`Promise()`\n\n# 静态方法\n* Promise.all(iterable)\n* Promise.allSettled(iterable)\n* Promise.any(iterable)\n* Promise.race(iterable)\n* Promise.reject(reason)\n* Promise.resolve(value)\n\n# 实例方法\n* Promise.prototype.catch()\n* Promise.prototype.then()\n* Promise.prototype.finally()\n\n# `Promise.all()` VS `Promise.allSettled()`\n* Promise.all()：所有promise都成功则返回所有成功的结果；数组中出现一个rejected，返回出现rejected的promise\n\n* Promise.allSettled()：结果允许resolved和rejected两种状态，因此返回的都是敲定结果之后的状态，返回的是由多个 `{status:'fulfilled'/'reject',value:''}` 组成的数组\n\n```\nconst promise1 = Promise.resolve(31);\nconst promise2 = Promise.reject('23');\n//(1) const promise2 = 23\nconst promise3 = new Promise(resolve=>setTimeout(()=>resolve(2023),50));\nlet allPromise = [promise1,promise2,promise3];\n\nPromise.all(allPromise).then(res=>console.log(res))\n// Promise {<rejected>: '23'}\n// [[Prototype]]: Promise\n// [[PromiseState]]: \"rejected\"\n// [[PromiseResult]]: \"23\"\n//(1) [31,23,2023] \n\nPromise.allSettled(allPromise).then(res=>console.log(res))\n// [\n//   {status: 'fulfilled', value: 31},\n//   {status: 'rejected', reason: '23'},\n//   {status: 'fulfilled', value: 2023},\n// ]\n// (1) 将以上数组中第二个元素的status修改成'fulfilled'即可\n\n```\n\n# `async/await` (ES2017)\n异步Promise的同步写法\n\n`async`关键字可定义一个异步函数\n```\nasync function sayHi(){\n  return 'Hi';\n}\n// 等同于\nasync function sayHi(){\n  return Promise.resolve('Hi')\n}\n```\n\n`await` 关键字等待一个promise敲定状态，resolved和rejected；仅能放在async声明的函数中，否则报错\n```\nasync function display(){\n  let result = await sayHi();\n  console.log(result);\n}\n```\n\n### 错误处理：try...catch\n```\nasync function getUser(userId) {\n    try {\n       const user = await Promise.reject(new Error('Invalid User Id'));\n    } catch(error) {\n       console.log(error);\n    }\n}\n```\n\n### `promise` 与 `async/await` 区别\n* `async/awai`t 是`promise`处理异步事件的同步写法，一种语法糖\n* `promise` 有三种状态；`async/await` 没有状态，无论resolved还是rejected军返回一个promise\n* `promise` 的错误处理可使用`.then()`和`.catch()`；async/await使用`try...catch`\n* `promise`链式调用太长时会臃肿难理解，`async/await`简洁、易读\n* `promise`链是异步的；`async/await`整个函数作用域都是异步的\n* 多个promise时，可使用`Promise.all()`；`async/await`拆分成多个变量\n\n\n# 参考文献\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\nhttps://dev.to/viclafouch/promise-allsettled-vs-promise-all-in-javascript-4mle\n\nhttps://www.javascripttutorial.net/es-next/javascript-async-await/\n\nhttps://www.geeksforgeeks.org/difference-between-promise-and-async-await-in-node-js/\n\nhttps://levelup.gitconnected.com/async-await-vs-promises-4fe98d11038f\n\n","source":"_posts/Promise.md","raw":"---\nlayout:\n  - layout\ntitle: Promise\ndate: 2023-01-31 10:02:41\ntags:\n---\n\n# 状态\n* pending 初始状态，未成功也未拒绝\n* fulfilled 操作成功完成\n* rejected 操作失败\n\n# 链式调用\n链式调用中的第一个 `promise` 是嵌套最深的一个，也将是第一个被弹出的\n```\nconst myPromise = new Promise((resolve,reject)=>{\n  setTimeout(()=>{\n    resolve('foo');\n  },500)\n});\nmyPromise\n  .then()\n  .then()\n  .then()\n  .catch()\n  .finally()\n```\n\n# 构造函数\n`Promise()`\n\n# 静态方法\n* Promise.all(iterable)\n* Promise.allSettled(iterable)\n* Promise.any(iterable)\n* Promise.race(iterable)\n* Promise.reject(reason)\n* Promise.resolve(value)\n\n# 实例方法\n* Promise.prototype.catch()\n* Promise.prototype.then()\n* Promise.prototype.finally()\n\n# `Promise.all()` VS `Promise.allSettled()`\n* Promise.all()：所有promise都成功则返回所有成功的结果；数组中出现一个rejected，返回出现rejected的promise\n\n* Promise.allSettled()：结果允许resolved和rejected两种状态，因此返回的都是敲定结果之后的状态，返回的是由多个 `{status:'fulfilled'/'reject',value:''}` 组成的数组\n\n```\nconst promise1 = Promise.resolve(31);\nconst promise2 = Promise.reject('23');\n//(1) const promise2 = 23\nconst promise3 = new Promise(resolve=>setTimeout(()=>resolve(2023),50));\nlet allPromise = [promise1,promise2,promise3];\n\nPromise.all(allPromise).then(res=>console.log(res))\n// Promise {<rejected>: '23'}\n// [[Prototype]]: Promise\n// [[PromiseState]]: \"rejected\"\n// [[PromiseResult]]: \"23\"\n//(1) [31,23,2023] \n\nPromise.allSettled(allPromise).then(res=>console.log(res))\n// [\n//   {status: 'fulfilled', value: 31},\n//   {status: 'rejected', reason: '23'},\n//   {status: 'fulfilled', value: 2023},\n// ]\n// (1) 将以上数组中第二个元素的status修改成'fulfilled'即可\n\n```\n\n# `async/await` (ES2017)\n异步Promise的同步写法\n\n`async`关键字可定义一个异步函数\n```\nasync function sayHi(){\n  return 'Hi';\n}\n// 等同于\nasync function sayHi(){\n  return Promise.resolve('Hi')\n}\n```\n\n`await` 关键字等待一个promise敲定状态，resolved和rejected；仅能放在async声明的函数中，否则报错\n```\nasync function display(){\n  let result = await sayHi();\n  console.log(result);\n}\n```\n\n### 错误处理：try...catch\n```\nasync function getUser(userId) {\n    try {\n       const user = await Promise.reject(new Error('Invalid User Id'));\n    } catch(error) {\n       console.log(error);\n    }\n}\n```\n\n### `promise` 与 `async/await` 区别\n* `async/awai`t 是`promise`处理异步事件的同步写法，一种语法糖\n* `promise` 有三种状态；`async/await` 没有状态，无论resolved还是rejected军返回一个promise\n* `promise` 的错误处理可使用`.then()`和`.catch()`；async/await使用`try...catch`\n* `promise`链式调用太长时会臃肿难理解，`async/await`简洁、易读\n* `promise`链是异步的；`async/await`整个函数作用域都是异步的\n* 多个promise时，可使用`Promise.all()`；`async/await`拆分成多个变量\n\n\n# 参考文献\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\nhttps://dev.to/viclafouch/promise-allsettled-vs-promise-all-in-javascript-4mle\n\nhttps://www.javascripttutorial.net/es-next/javascript-async-await/\n\nhttps://www.geeksforgeeks.org/difference-between-promise-and-async-await-in-node-js/\n\nhttps://levelup.gitconnected.com/async-await-vs-promises-4fe98d11038f\n\n","slug":"Promise","published":1,"updated":"2023-01-31T07:28:59.629Z","comments":1,"photos":[],"link":"","_id":"cldwps2iu000aqg3mbse6h5xk","content":"<h1 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h1><ul>\n<li>pending 初始状态，未成功也未拒绝</li>\n<li>fulfilled 操作成功完成</li>\n<li>rejected 操作失败</li>\n</ul>\n<h1 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h1><p>链式调用中的第一个 <code>promise</code> 是嵌套最深的一个，也将是第一个被弹出的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const myPromise = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">  setTimeout(()=&gt;&#123;</span><br><span class=\"line\">    resolve(&#x27;foo&#x27;);</span><br><span class=\"line\">  &#125;,500)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myPromise</span><br><span class=\"line\">  .then()</span><br><span class=\"line\">  .then()</span><br><span class=\"line\">  .then()</span><br><span class=\"line\">  .catch()</span><br><span class=\"line\">  .finally()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h1><p><code>Promise()</code></p>\n<h1 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h1><ul>\n<li>Promise.all(iterable)</li>\n<li>Promise.allSettled(iterable)</li>\n<li>Promise.any(iterable)</li>\n<li>Promise.race(iterable)</li>\n<li>Promise.reject(reason)</li>\n<li>Promise.resolve(value)</li>\n</ul>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><ul>\n<li>Promise.prototype.catch()</li>\n<li>Promise.prototype.then()</li>\n<li>Promise.prototype.finally()</li>\n</ul>\n<h1 id=\"Promise-all-VS-Promise-allSettled\"><a href=\"#Promise-all-VS-Promise-allSettled\" class=\"headerlink\" title=\"Promise.all() VS Promise.allSettled()\"></a><code>Promise.all()</code> VS <code>Promise.allSettled()</code></h1><ul>\n<li><p>Promise.all()：所有promise都成功则返回所有成功的结果；数组中出现一个rejected，返回出现rejected的promise</p>\n</li>\n<li><p>Promise.allSettled()：结果允许resolved和rejected两种状态，因此返回的都是敲定结果之后的状态，返回的是由多个 <code>&#123;status:&#39;fulfilled&#39;/&#39;reject&#39;,value:&#39;&#39;&#125;</code> 组成的数组</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise1 = Promise.resolve(31);</span><br><span class=\"line\">const promise2 = Promise.reject(&#x27;23&#x27;);</span><br><span class=\"line\">//(1) const promise2 = 23</span><br><span class=\"line\">const promise3 = new Promise(resolve=&gt;setTimeout(()=&gt;resolve(2023),50));</span><br><span class=\"line\">let allPromise = [promise1,promise2,promise3];</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all(allPromise).then(res=&gt;console.log(res))</span><br><span class=\"line\">// Promise &#123;&lt;rejected&gt;: &#x27;23&#x27;&#125;</span><br><span class=\"line\">// [[Prototype]]: Promise</span><br><span class=\"line\">// [[PromiseState]]: &quot;rejected&quot;</span><br><span class=\"line\">// [[PromiseResult]]: &quot;23&quot;</span><br><span class=\"line\">//(1) [31,23,2023] </span><br><span class=\"line\"></span><br><span class=\"line\">Promise.allSettled(allPromise).then(res=&gt;console.log(res))</span><br><span class=\"line\">// [</span><br><span class=\"line\">//   &#123;status: &#x27;fulfilled&#x27;, value: 31&#125;,</span><br><span class=\"line\">//   &#123;status: &#x27;rejected&#x27;, reason: &#x27;23&#x27;&#125;,</span><br><span class=\"line\">//   &#123;status: &#x27;fulfilled&#x27;, value: 2023&#125;,</span><br><span class=\"line\">// ]</span><br><span class=\"line\">// (1) 将以上数组中第二个元素的status修改成&#x27;fulfilled&#x27;即可</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"async-await-ES2017\"><a href=\"#async-await-ES2017\" class=\"headerlink\" title=\"async/await (ES2017)\"></a><code>async/await</code> (ES2017)</h1><p>异步Promise的同步写法</p>\n<p><code>async</code>关键字可定义一个异步函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function sayHi()&#123;</span><br><span class=\"line\">  return &#x27;Hi&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">async function sayHi()&#123;</span><br><span class=\"line\">  return Promise.resolve(&#x27;Hi&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>await</code> 关键字等待一个promise敲定状态，resolved和rejected；仅能放在async声明的函数中，否则报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function display()&#123;</span><br><span class=\"line\">  let result = await sayHi();</span><br><span class=\"line\">  console.log(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理：try…catch\"><a href=\"#错误处理：try…catch\" class=\"headerlink\" title=\"错误处理：try…catch\"></a>错误处理：try…catch</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function getUser(userId) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">       const user = await Promise.reject(new Error(&#x27;Invalid User Id&#x27;));</span><br><span class=\"line\">    &#125; catch(error) &#123;</span><br><span class=\"line\">       console.log(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"promise-与-async-await-区别\"><a href=\"#promise-与-async-await-区别\" class=\"headerlink\" title=\"promise 与 async/await 区别\"></a><code>promise</code> 与 <code>async/await</code> 区别</h3><ul>\n<li><code>async/awai</code>t 是<code>promise</code>处理异步事件的同步写法，一种语法糖</li>\n<li><code>promise</code> 有三种状态；<code>async/await</code> 没有状态，无论resolved还是rejected军返回一个promise</li>\n<li><code>promise</code> 的错误处理可使用<code>.then()</code>和<code>.catch()</code>；async/await使用<code>try...catch</code></li>\n<li><code>promise</code>链式调用太长时会臃肿难理解，<code>async/await</code>简洁、易读</li>\n<li><code>promise</code>链是异步的；<code>async/await</code>整个函数作用域都是异步的</li>\n<li>多个promise时，可使用<code>Promise.all()</code>；<code>async/await</code>拆分成多个变量</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>\n<p><a href=\"https://dev.to/viclafouch/promise-allsettled-vs-promise-all-in-javascript-4mle\">https://dev.to/viclafouch/promise-allsettled-vs-promise-all-in-javascript-4mle</a></p>\n<p><a href=\"https://www.javascripttutorial.net/es-next/javascript-async-await/\">https://www.javascripttutorial.net/es-next/javascript-async-await/</a></p>\n<p><a href=\"https://www.geeksforgeeks.org/difference-between-promise-and-async-await-in-node-js/\">https://www.geeksforgeeks.org/difference-between-promise-and-async-await-in-node-js/</a></p>\n<p><a href=\"https://levelup.gitconnected.com/async-await-vs-promises-4fe98d11038f\">https://levelup.gitconnected.com/async-await-vs-promises-4fe98d11038f</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h1><ul>\n<li>pending 初始状态，未成功也未拒绝</li>\n<li>fulfilled 操作成功完成</li>\n<li>rejected 操作失败</li>\n</ul>\n<h1 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h1><p>链式调用中的第一个 <code>promise</code> 是嵌套最深的一个，也将是第一个被弹出的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const myPromise = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">  setTimeout(()=&gt;&#123;</span><br><span class=\"line\">    resolve(&#x27;foo&#x27;);</span><br><span class=\"line\">  &#125;,500)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myPromise</span><br><span class=\"line\">  .then()</span><br><span class=\"line\">  .then()</span><br><span class=\"line\">  .then()</span><br><span class=\"line\">  .catch()</span><br><span class=\"line\">  .finally()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h1><p><code>Promise()</code></p>\n<h1 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h1><ul>\n<li>Promise.all(iterable)</li>\n<li>Promise.allSettled(iterable)</li>\n<li>Promise.any(iterable)</li>\n<li>Promise.race(iterable)</li>\n<li>Promise.reject(reason)</li>\n<li>Promise.resolve(value)</li>\n</ul>\n<h1 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h1><ul>\n<li>Promise.prototype.catch()</li>\n<li>Promise.prototype.then()</li>\n<li>Promise.prototype.finally()</li>\n</ul>\n<h1 id=\"Promise-all-VS-Promise-allSettled\"><a href=\"#Promise-all-VS-Promise-allSettled\" class=\"headerlink\" title=\"Promise.all() VS Promise.allSettled()\"></a><code>Promise.all()</code> VS <code>Promise.allSettled()</code></h1><ul>\n<li><p>Promise.all()：所有promise都成功则返回所有成功的结果；数组中出现一个rejected，返回出现rejected的promise</p>\n</li>\n<li><p>Promise.allSettled()：结果允许resolved和rejected两种状态，因此返回的都是敲定结果之后的状态，返回的是由多个 <code>&#123;status:&#39;fulfilled&#39;/&#39;reject&#39;,value:&#39;&#39;&#125;</code> 组成的数组</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise1 = Promise.resolve(31);</span><br><span class=\"line\">const promise2 = Promise.reject(&#x27;23&#x27;);</span><br><span class=\"line\">//(1) const promise2 = 23</span><br><span class=\"line\">const promise3 = new Promise(resolve=&gt;setTimeout(()=&gt;resolve(2023),50));</span><br><span class=\"line\">let allPromise = [promise1,promise2,promise3];</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.all(allPromise).then(res=&gt;console.log(res))</span><br><span class=\"line\">// Promise &#123;&lt;rejected&gt;: &#x27;23&#x27;&#125;</span><br><span class=\"line\">// [[Prototype]]: Promise</span><br><span class=\"line\">// [[PromiseState]]: &quot;rejected&quot;</span><br><span class=\"line\">// [[PromiseResult]]: &quot;23&quot;</span><br><span class=\"line\">//(1) [31,23,2023] </span><br><span class=\"line\"></span><br><span class=\"line\">Promise.allSettled(allPromise).then(res=&gt;console.log(res))</span><br><span class=\"line\">// [</span><br><span class=\"line\">//   &#123;status: &#x27;fulfilled&#x27;, value: 31&#125;,</span><br><span class=\"line\">//   &#123;status: &#x27;rejected&#x27;, reason: &#x27;23&#x27;&#125;,</span><br><span class=\"line\">//   &#123;status: &#x27;fulfilled&#x27;, value: 2023&#125;,</span><br><span class=\"line\">// ]</span><br><span class=\"line\">// (1) 将以上数组中第二个元素的status修改成&#x27;fulfilled&#x27;即可</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"async-await-ES2017\"><a href=\"#async-await-ES2017\" class=\"headerlink\" title=\"async/await (ES2017)\"></a><code>async/await</code> (ES2017)</h1><p>异步Promise的同步写法</p>\n<p><code>async</code>关键字可定义一个异步函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function sayHi()&#123;</span><br><span class=\"line\">  return &#x27;Hi&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 等同于</span><br><span class=\"line\">async function sayHi()&#123;</span><br><span class=\"line\">  return Promise.resolve(&#x27;Hi&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>await</code> 关键字等待一个promise敲定状态，resolved和rejected；仅能放在async声明的函数中，否则报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function display()&#123;</span><br><span class=\"line\">  let result = await sayHi();</span><br><span class=\"line\">  console.log(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理：try…catch\"><a href=\"#错误处理：try…catch\" class=\"headerlink\" title=\"错误处理：try…catch\"></a>错误处理：try…catch</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function getUser(userId) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">       const user = await Promise.reject(new Error(&#x27;Invalid User Id&#x27;));</span><br><span class=\"line\">    &#125; catch(error) &#123;</span><br><span class=\"line\">       console.log(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"promise-与-async-await-区别\"><a href=\"#promise-与-async-await-区别\" class=\"headerlink\" title=\"promise 与 async/await 区别\"></a><code>promise</code> 与 <code>async/await</code> 区别</h3><ul>\n<li><code>async/awai</code>t 是<code>promise</code>处理异步事件的同步写法，一种语法糖</li>\n<li><code>promise</code> 有三种状态；<code>async/await</code> 没有状态，无论resolved还是rejected军返回一个promise</li>\n<li><code>promise</code> 的错误处理可使用<code>.then()</code>和<code>.catch()</code>；async/await使用<code>try...catch</code></li>\n<li><code>promise</code>链式调用太长时会臃肿难理解，<code>async/await</code>简洁、易读</li>\n<li><code>promise</code>链是异步的；<code>async/await</code>整个函数作用域都是异步的</li>\n<li>多个promise时，可使用<code>Promise.all()</code>；<code>async/await</code>拆分成多个变量</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>\n<p><a href=\"https://dev.to/viclafouch/promise-allsettled-vs-promise-all-in-javascript-4mle\">https://dev.to/viclafouch/promise-allsettled-vs-promise-all-in-javascript-4mle</a></p>\n<p><a href=\"https://www.javascripttutorial.net/es-next/javascript-async-await/\">https://www.javascripttutorial.net/es-next/javascript-async-await/</a></p>\n<p><a href=\"https://www.geeksforgeeks.org/difference-between-promise-and-async-await-in-node-js/\">https://www.geeksforgeeks.org/difference-between-promise-and-async-await-in-node-js/</a></p>\n<p><a href=\"https://levelup.gitconnected.com/async-await-vs-promises-4fe98d11038f\">https://levelup.gitconnected.com/async-await-vs-promises-4fe98d11038f</a></p>\n"},{"title":"我的第一篇博客","date":"2021-12-22T16:00:00.000Z","_content":"\n---\n太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……\n终于拥有一个属于我自己的博客啦\\~哈哈哈哈\n喔喔，欢迎来到我的小空间，Helen的博客主页\\~\n事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！\n---\n\n\n","source":"_posts/first.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2021-12-23\n---\n\n---\n太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……\n终于拥有一个属于我自己的博客啦\\~哈哈哈哈\n喔喔，欢迎来到我的小空间，Helen的博客主页\\~\n事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！\n---\n\n\n","slug":"first","published":1,"updated":"2021-12-23T06:37:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwps2iv000cqg3mb14d3ax8","content":"<hr>\n<p>太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……<br>终于拥有一个属于我自己的博客啦~哈哈哈哈<br>喔喔，欢迎来到我的小空间，Helen的博客主页~<br>事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……<br>终于拥有一个属于我自己的博客啦~哈哈哈哈<br>喔喔，欢迎来到我的小空间，Helen的博客主页~<br>事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！</p>\n<hr>\n"},{"title":"import与export","date":"2021-12-27T02:42:07.000Z","_content":"\n## 一、import\n\n#### 静态 import\n\n初始化加载依赖项的最优选择，在加载时就被编译\n导入的模块运行在严格模式下\n在浏览器中，import 语句只能在声明了 type=\"module\" 的 script 的标签中使用\n\n```\nimport xxx from 'ppp'\nimport * as xxx from 'ppp'\nimport {xxx,yyy} from 'ppp'\nimport {xxx as aaa,yyy as bbb} from 'ppp'\nimport 'ppp';//整个模块仅为副作，运行模块中的全局代码, 但实际上不导入任何值\n```\n\n#### 动态 import\n\n按需加载模块\n不依赖 type=\"module\" 的 script 标签\n关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise，也支持 await 关键字\n\n## 二、export\n\n导出的模块处于严格模式\n\n#### 命名导出（每个模块包含任意数量）\n\n```\nexport {myFunction,myVariable}\n```\n\n#### 默认导出（每个模块包含一个）\n\n```\nexport let name1,name2,...,nameN;//var const均适用\nexport let name1=...,name2=...,...,nameN=...;//var const均适用\nexport function functionName(){...};\nexport class className{...}\n```\n","source":"_posts/import与export.md","raw":"---\ntitle: import与export\ndate: 2021-12-27 10:42:07\ntags: work\n---\n\n## 一、import\n\n#### 静态 import\n\n初始化加载依赖项的最优选择，在加载时就被编译\n导入的模块运行在严格模式下\n在浏览器中，import 语句只能在声明了 type=\"module\" 的 script 的标签中使用\n\n```\nimport xxx from 'ppp'\nimport * as xxx from 'ppp'\nimport {xxx,yyy} from 'ppp'\nimport {xxx as aaa,yyy as bbb} from 'ppp'\nimport 'ppp';//整个模块仅为副作，运行模块中的全局代码, 但实际上不导入任何值\n```\n\n#### 动态 import\n\n按需加载模块\n不依赖 type=\"module\" 的 script 标签\n关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise，也支持 await 关键字\n\n## 二、export\n\n导出的模块处于严格模式\n\n#### 命名导出（每个模块包含任意数量）\n\n```\nexport {myFunction,myVariable}\n```\n\n#### 默认导出（每个模块包含一个）\n\n```\nexport let name1,name2,...,nameN;//var const均适用\nexport let name1=...,name2=...,...,nameN=...;//var const均适用\nexport function functionName(){...};\nexport class className{...}\n```\n","slug":"import与export","published":1,"updated":"2021-12-27T06:24:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwps2iw000dqg3m87kk521m","content":"<h2 id=\"一、import\"><a href=\"#一、import\" class=\"headerlink\" title=\"一、import\"></a>一、import</h2><h4 id=\"静态-import\"><a href=\"#静态-import\" class=\"headerlink\" title=\"静态 import\"></a>静态 import</h4><p>初始化加载依赖项的最优选择，在加载时就被编译<br>导入的模块运行在严格模式下<br>在浏览器中，import 语句只能在声明了 type=”module” 的 script 的标签中使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import xxx from &#x27;ppp&#x27;</span><br><span class=\"line\">import * as xxx from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#123;xxx,yyy&#125; from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#123;xxx as aaa,yyy as bbb&#125; from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#x27;ppp&#x27;;//整个模块仅为副作，运行模块中的全局代码, 但实际上不导入任何值</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态-import\"><a href=\"#动态-import\" class=\"headerlink\" title=\"动态 import\"></a>动态 import</h4><p>按需加载模块<br>不依赖 type=”module” 的 script 标签<br>关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise，也支持 await 关键字</p>\n<h2 id=\"二、export\"><a href=\"#二、export\" class=\"headerlink\" title=\"二、export\"></a>二、export</h2><p>导出的模块处于严格模式</p>\n<h4 id=\"命名导出（每个模块包含任意数量）\"><a href=\"#命名导出（每个模块包含任意数量）\" class=\"headerlink\" title=\"命名导出（每个模块包含任意数量）\"></a>命名导出（每个模块包含任意数量）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;myFunction,myVariable&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认导出（每个模块包含一个）\"><a href=\"#默认导出（每个模块包含一个）\" class=\"headerlink\" title=\"默认导出（每个模块包含一个）\"></a>默认导出（每个模块包含一个）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export let name1,name2,...,nameN;//var const均适用</span><br><span class=\"line\">export let name1=...,name2=...,...,nameN=...;//var const均适用</span><br><span class=\"line\">export function functionName()&#123;...&#125;;</span><br><span class=\"line\">export class className&#123;...&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、import\"><a href=\"#一、import\" class=\"headerlink\" title=\"一、import\"></a>一、import</h2><h4 id=\"静态-import\"><a href=\"#静态-import\" class=\"headerlink\" title=\"静态 import\"></a>静态 import</h4><p>初始化加载依赖项的最优选择，在加载时就被编译<br>导入的模块运行在严格模式下<br>在浏览器中，import 语句只能在声明了 type=”module” 的 script 的标签中使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import xxx from &#x27;ppp&#x27;</span><br><span class=\"line\">import * as xxx from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#123;xxx,yyy&#125; from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#123;xxx as aaa,yyy as bbb&#125; from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#x27;ppp&#x27;;//整个模块仅为副作，运行模块中的全局代码, 但实际上不导入任何值</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态-import\"><a href=\"#动态-import\" class=\"headerlink\" title=\"动态 import\"></a>动态 import</h4><p>按需加载模块<br>不依赖 type=”module” 的 script 标签<br>关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise，也支持 await 关键字</p>\n<h2 id=\"二、export\"><a href=\"#二、export\" class=\"headerlink\" title=\"二、export\"></a>二、export</h2><p>导出的模块处于严格模式</p>\n<h4 id=\"命名导出（每个模块包含任意数量）\"><a href=\"#命名导出（每个模块包含任意数量）\" class=\"headerlink\" title=\"命名导出（每个模块包含任意数量）\"></a>命名导出（每个模块包含任意数量）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;myFunction,myVariable&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认导出（每个模块包含一个）\"><a href=\"#默认导出（每个模块包含一个）\" class=\"headerlink\" title=\"默认导出（每个模块包含一个）\"></a>默认导出（每个模块包含一个）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export let name1,name2,...,nameN;//var const均适用</span><br><span class=\"line\">export let name1=...,name2=...,...,nameN=...;//var const均适用</span><br><span class=\"line\">export function functionName()&#123;...&#125;;</span><br><span class=\"line\">export class className&#123;...&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"js深拷贝与浅拷贝","date":"2021-12-30T08:05:39.000Z","_content":"\n## 一、概念\n\n深拷贝：两个对象经过拷贝后，除了拷贝下来相同的属性之外，没有任何其他关联的两个对象\n浅拷贝：两个对象经过拷贝后，虽然属性相同，也是不同对象，但内部的对象指向同一个内存空间\n\n## 二、实现方式\n\n#### JSON 方法\n\n`let newObj = JSON.parse(JSON.stringify(oldObj))`\n缺点：无法拷贝对象里的函数、原型链的属性\n\n#### 循环递归\n\n```\nfunction deepCopy(source){\n  let target = Array.isArray(source)?[]:{}\n  for(let k in source){\n    if(typeof source[k] ==== 'object'){\n      target[k]=deepCopy(source[k])\n    }else{\n      target[k] = source[k]\n    }\n  }\n  return target;\n}\n```\n","source":"_posts/js深拷贝与浅拷贝.md","raw":"---\ntitle: js深拷贝与浅拷贝\ndate: 2021-12-30 16:05:39\ntags: work\n---\n\n## 一、概念\n\n深拷贝：两个对象经过拷贝后，除了拷贝下来相同的属性之外，没有任何其他关联的两个对象\n浅拷贝：两个对象经过拷贝后，虽然属性相同，也是不同对象，但内部的对象指向同一个内存空间\n\n## 二、实现方式\n\n#### JSON 方法\n\n`let newObj = JSON.parse(JSON.stringify(oldObj))`\n缺点：无法拷贝对象里的函数、原型链的属性\n\n#### 循环递归\n\n```\nfunction deepCopy(source){\n  let target = Array.isArray(source)?[]:{}\n  for(let k in source){\n    if(typeof source[k] ==== 'object'){\n      target[k]=deepCopy(source[k])\n    }else{\n      target[k] = source[k]\n    }\n  }\n  return target;\n}\n```\n","slug":"js深拷贝与浅拷贝","published":1,"updated":"2021-12-30T08:19:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwps2ix000eqg3m8g8n481i","content":"<h2 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h2><p>深拷贝：两个对象经过拷贝后，除了拷贝下来相同的属性之外，没有任何其他关联的两个对象<br>浅拷贝：两个对象经过拷贝后，虽然属性相同，也是不同对象，但内部的对象指向同一个内存空间</p>\n<h2 id=\"二、实现方式\"><a href=\"#二、实现方式\" class=\"headerlink\" title=\"二、实现方式\"></a>二、实现方式</h2><h4 id=\"JSON-方法\"><a href=\"#JSON-方法\" class=\"headerlink\" title=\"JSON 方法\"></a>JSON 方法</h4><p><code>let newObj = JSON.parse(JSON.stringify(oldObj))</code><br>缺点：无法拷贝对象里的函数、原型链的属性</p>\n<h4 id=\"循环递归\"><a href=\"#循环递归\" class=\"headerlink\" title=\"循环递归\"></a>循环递归</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepCopy(source)&#123;</span><br><span class=\"line\">  let target = Array.isArray(source)?[]:&#123;&#125;</span><br><span class=\"line\">  for(let k in source)&#123;</span><br><span class=\"line\">    if(typeof source[k] ==== &#x27;object&#x27;)&#123;</span><br><span class=\"line\">      target[k]=deepCopy(source[k])</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      target[k] = source[k]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h2><p>深拷贝：两个对象经过拷贝后，除了拷贝下来相同的属性之外，没有任何其他关联的两个对象<br>浅拷贝：两个对象经过拷贝后，虽然属性相同，也是不同对象，但内部的对象指向同一个内存空间</p>\n<h2 id=\"二、实现方式\"><a href=\"#二、实现方式\" class=\"headerlink\" title=\"二、实现方式\"></a>二、实现方式</h2><h4 id=\"JSON-方法\"><a href=\"#JSON-方法\" class=\"headerlink\" title=\"JSON 方法\"></a>JSON 方法</h4><p><code>let newObj = JSON.parse(JSON.stringify(oldObj))</code><br>缺点：无法拷贝对象里的函数、原型链的属性</p>\n<h4 id=\"循环递归\"><a href=\"#循环递归\" class=\"headerlink\" title=\"循环递归\"></a>循环递归</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepCopy(source)&#123;</span><br><span class=\"line\">  let target = Array.isArray(source)?[]:&#123;&#125;</span><br><span class=\"line\">  for(let k in source)&#123;</span><br><span class=\"line\">    if(typeof source[k] ==== &#x27;object&#x27;)&#123;</span><br><span class=\"line\">      target[k]=deepCopy(source[k])</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      target[k] = source[k]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vuejs的nextTick","date":"2023-02-08T02:38:46.000Z","_content":"\n# 原因\nVue更新DOM是异步的\n\n# 作用\n回调被推迟到下一个DOM更新周期之后执行\n\n# 语法\n```\nVue.nextTick(function(){\n  //...\n})\n\nmounted () {\n  this.$nextTick(() => {\n    /...\n  });\n  this.$nextTick().then(() => {\n    /...\n  });\n}\n\nasync mounted () {\n  await this.$nextTick(() => {\n    //...\n  });\n}\n```\n\n# 使用场景\n* `created`（dom还没渲染）中获取DOM的操作需要使用它\n* 数据改变，改变DOM\n\n# $nextTick VS setTimeout(fun,0)\n`$nextTick` 在DOM更新后执行操作\n`setTimeout(fun,0)` 回调在其他代码执行完之后（无论多长时间都等）立马执行\n\n# 参考文献\n[vue源码解读之vm.$nextTick](https://nlrx-wjc.github.io/Learn-Vue-Source-Code/instanceMethods/lifecycle.html#_3-vm-nexttick)\n\n[$nextTick VS setTimeout](https://stackoverflow.com/questions/63669783/what-is-the-difference-between-using-vue-nexttick-vs-settimeout-0-in-vuejs)\n\n[setTimeout(fn,0)](https://stackoverflow.com/questions/33955650/what-is-settimeout-doing-when-set-to-0-milliseconds/33963453#33963453)\n","source":"_posts/vuejs的nextTick.md","raw":"---\ntitle: vuejs的nextTick\ndate: 2023-02-08 10:38:46\ntags:\n---\n\n# 原因\nVue更新DOM是异步的\n\n# 作用\n回调被推迟到下一个DOM更新周期之后执行\n\n# 语法\n```\nVue.nextTick(function(){\n  //...\n})\n\nmounted () {\n  this.$nextTick(() => {\n    /...\n  });\n  this.$nextTick().then(() => {\n    /...\n  });\n}\n\nasync mounted () {\n  await this.$nextTick(() => {\n    //...\n  });\n}\n```\n\n# 使用场景\n* `created`（dom还没渲染）中获取DOM的操作需要使用它\n* 数据改变，改变DOM\n\n# $nextTick VS setTimeout(fun,0)\n`$nextTick` 在DOM更新后执行操作\n`setTimeout(fun,0)` 回调在其他代码执行完之后（无论多长时间都等）立马执行\n\n# 参考文献\n[vue源码解读之vm.$nextTick](https://nlrx-wjc.github.io/Learn-Vue-Source-Code/instanceMethods/lifecycle.html#_3-vm-nexttick)\n\n[$nextTick VS setTimeout](https://stackoverflow.com/questions/63669783/what-is-the-difference-between-using-vue-nexttick-vs-settimeout-0-in-vuejs)\n\n[setTimeout(fn,0)](https://stackoverflow.com/questions/33955650/what-is-settimeout-doing-when-set-to-0-milliseconds/33963453#33963453)\n","slug":"vuejs的nextTick","published":1,"updated":"2023-02-08T06:13:52.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwps2iz000gqg3m3iim4foi","content":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>Vue更新DOM是异步的</p>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>回调被推迟到下一个DOM更新周期之后执行</p>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.nextTick(function()&#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">mounted () &#123;</span><br><span class=\"line\">  this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">    /...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  this.$nextTick().then(() =&gt; &#123;</span><br><span class=\"line\">    /...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async mounted () &#123;</span><br><span class=\"line\">  await this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><ul>\n<li><code>created</code>（dom还没渲染）中获取DOM的操作需要使用它</li>\n<li>数据改变，改变DOM</li>\n</ul>\n<h1 id=\"nextTick-VS-setTimeout-fun-0\"><a href=\"#nextTick-VS-setTimeout-fun-0\" class=\"headerlink\" title=\"$nextTick VS setTimeout(fun,0)\"></a>$nextTick VS setTimeout(fun,0)</h1><p><code>$nextTick</code> 在DOM更新后执行操作<br><code>setTimeout(fun,0)</code> 回调在其他代码执行完之后（无论多长时间都等）立马执行</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://nlrx-wjc.github.io/Learn-Vue-Source-Code/instanceMethods/lifecycle.html#_3-vm-nexttick\">vue源码解读之vm.$nextTick</a></p>\n<p><a href=\"https://stackoverflow.com/questions/63669783/what-is-the-difference-between-using-vue-nexttick-vs-settimeout-0-in-vuejs\">$nextTick VS setTimeout</a></p>\n<p><a href=\"https://stackoverflow.com/questions/33955650/what-is-settimeout-doing-when-set-to-0-milliseconds/33963453#33963453\">setTimeout(fn,0)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>Vue更新DOM是异步的</p>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>回调被推迟到下一个DOM更新周期之后执行</p>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.nextTick(function()&#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">mounted () &#123;</span><br><span class=\"line\">  this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">    /...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  this.$nextTick().then(() =&gt; &#123;</span><br><span class=\"line\">    /...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async mounted () &#123;</span><br><span class=\"line\">  await this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><ul>\n<li><code>created</code>（dom还没渲染）中获取DOM的操作需要使用它</li>\n<li>数据改变，改变DOM</li>\n</ul>\n<h1 id=\"nextTick-VS-setTimeout-fun-0\"><a href=\"#nextTick-VS-setTimeout-fun-0\" class=\"headerlink\" title=\"$nextTick VS setTimeout(fun,0)\"></a>$nextTick VS setTimeout(fun,0)</h1><p><code>$nextTick</code> 在DOM更新后执行操作<br><code>setTimeout(fun,0)</code> 回调在其他代码执行完之后（无论多长时间都等）立马执行</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://nlrx-wjc.github.io/Learn-Vue-Source-Code/instanceMethods/lifecycle.html#_3-vm-nexttick\">vue源码解读之vm.$nextTick</a></p>\n<p><a href=\"https://stackoverflow.com/questions/63669783/what-is-the-difference-between-using-vue-nexttick-vs-settimeout-0-in-vuejs\">$nextTick VS setTimeout</a></p>\n<p><a href=\"https://stackoverflow.com/questions/33955650/what-is-settimeout-doing-when-set-to-0-milliseconds/33963453#33963453\">setTimeout(fn,0)</a></p>\n"},{"layout":"post","title":"变量和事件名","date":"2022-10-27T05:50:12.000Z","_content":"\n# 变量名\n\n| 描述 |  前缀 | 命名 |  \n|:-----|:------|:-----| \n| Array 数组 | a | aList,aGroup|  \n| Boolean 布尔 | b | bChecked,bHasLogin |  \n| Function 函数 | f | fGetHtml,fInit |  \n| Number 数字 | n | nPage,nTotal |\n| Object 对象 | o | oButton,oDate |\n| Regular Expression 正则 | r | rDomain,rEmail |\n| String 字符 | s | sName,sHtml |\n\n# 事件名动词\n\n|动词|含义|动词|含义|  \n|:--|:--|:--|:--| \n|get |获取| set |设置|  \n|add |增加|remove |删除|  \n|create |创建|destory |移除| \n|start |启动|stop |停止|\n|open |打开|close |关闭| \n|read |读取|write |写入|\n|load |载入|save |保存|\n|create |创建|destroy |销毁|  \n|begin |开始|end |结束|  \n|backup |备份|restore |恢复| \n|import |导入|export |导出| \n|split |分割|merge |合并|\n|inject |注入|extract |提取|  \n|attach |附着|detach |脱离| \n|bind |绑定|separate |分离|  \n|view |查看|browse |浏览|\n|edit |编辑|modify |修改| \n|select |选取|mark |标记| \n|copy |复制|paste |粘贴|  \n|undo |撤销|redo |重做| \n|insert |插入|delete |移除|  \n|add |加入|append |添加| \n|clean |清理|clear |清除|  \n|index |索引|sort |排序| \n|find |查找|search |搜索|  \n|increase |增加|decrease |减少|\n|play |播放|pause |暂停|  \n|launch |启动|run |运行| \n|compile |编译|execute |执行|  \n|debug |调试|trace |跟踪|\n|observe |观察|listen |监听|  \n|build |构建|publish |发布| \n|input |输入|output |输出| \n|encode |编码|decode |解码|\n|encrypt |加密|decrypt |解密| \n|compress |压缩|decompress |解压缩|  \n|pack |打包|unpack |解包|  \n|parse |解析|emit |生成|\n|connect |连接|disconnect |断开|  \n|send |发送|receive |接收| \n|download |下载|upload |上传| \n|refresh |刷新|synchronize |同步|  \n|update |更新|revert |复原|  \n|lock |锁定|unlock |解锁|\n|check out |签出|check in |签入| \n|submit |提交|commit |交付| \n|push |推|pull |拉|  \n|expand |展开|collapse |折叠| \n|begin |起始|end |结束|  \n|start |开始|finish |完成|  \n|enter |进入|exit |退出|  \n|abort |放弃|quit |离开|  \n|obsolete |废弃|depreciate |废旧| \n|collect |收集|aggregate |聚集|   \n\n","source":"_posts/变量和事件名.md","raw":"---\nlayout:\n  - post\ntitle: 变量和事件名\ndate: 2022-10-27 13:50:12\ntags: work\n---\n\n# 变量名\n\n| 描述 |  前缀 | 命名 |  \n|:-----|:------|:-----| \n| Array 数组 | a | aList,aGroup|  \n| Boolean 布尔 | b | bChecked,bHasLogin |  \n| Function 函数 | f | fGetHtml,fInit |  \n| Number 数字 | n | nPage,nTotal |\n| Object 对象 | o | oButton,oDate |\n| Regular Expression 正则 | r | rDomain,rEmail |\n| String 字符 | s | sName,sHtml |\n\n# 事件名动词\n\n|动词|含义|动词|含义|  \n|:--|:--|:--|:--| \n|get |获取| set |设置|  \n|add |增加|remove |删除|  \n|create |创建|destory |移除| \n|start |启动|stop |停止|\n|open |打开|close |关闭| \n|read |读取|write |写入|\n|load |载入|save |保存|\n|create |创建|destroy |销毁|  \n|begin |开始|end |结束|  \n|backup |备份|restore |恢复| \n|import |导入|export |导出| \n|split |分割|merge |合并|\n|inject |注入|extract |提取|  \n|attach |附着|detach |脱离| \n|bind |绑定|separate |分离|  \n|view |查看|browse |浏览|\n|edit |编辑|modify |修改| \n|select |选取|mark |标记| \n|copy |复制|paste |粘贴|  \n|undo |撤销|redo |重做| \n|insert |插入|delete |移除|  \n|add |加入|append |添加| \n|clean |清理|clear |清除|  \n|index |索引|sort |排序| \n|find |查找|search |搜索|  \n|increase |增加|decrease |减少|\n|play |播放|pause |暂停|  \n|launch |启动|run |运行| \n|compile |编译|execute |执行|  \n|debug |调试|trace |跟踪|\n|observe |观察|listen |监听|  \n|build |构建|publish |发布| \n|input |输入|output |输出| \n|encode |编码|decode |解码|\n|encrypt |加密|decrypt |解密| \n|compress |压缩|decompress |解压缩|  \n|pack |打包|unpack |解包|  \n|parse |解析|emit |生成|\n|connect |连接|disconnect |断开|  \n|send |发送|receive |接收| \n|download |下载|upload |上传| \n|refresh |刷新|synchronize |同步|  \n|update |更新|revert |复原|  \n|lock |锁定|unlock |解锁|\n|check out |签出|check in |签入| \n|submit |提交|commit |交付| \n|push |推|pull |拉|  \n|expand |展开|collapse |折叠| \n|begin |起始|end |结束|  \n|start |开始|finish |完成|  \n|enter |进入|exit |退出|  \n|abort |放弃|quit |离开|  \n|obsolete |废弃|depreciate |废旧| \n|collect |收集|aggregate |聚集|   \n\n","slug":"变量和事件名","published":1,"updated":"2022-10-27T06:17:56.606Z","comments":1,"photos":[],"link":"","_id":"cldwps2j0000iqg3m9q0ufso7","content":"<h1 id=\"变量名\"><a href=\"#变量名\" class=\"headerlink\" title=\"变量名\"></a>变量名</h1><table>\n<thead>\n<tr>\n<th align=\"left\">描述</th>\n<th align=\"left\">前缀</th>\n<th align=\"left\">命名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Array 数组</td>\n<td align=\"left\">a</td>\n<td align=\"left\">aList,aGroup</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean 布尔</td>\n<td align=\"left\">b</td>\n<td align=\"left\">bChecked,bHasLogin</td>\n</tr>\n<tr>\n<td align=\"left\">Function 函数</td>\n<td align=\"left\">f</td>\n<td align=\"left\">fGetHtml,fInit</td>\n</tr>\n<tr>\n<td align=\"left\">Number 数字</td>\n<td align=\"left\">n</td>\n<td align=\"left\">nPage,nTotal</td>\n</tr>\n<tr>\n<td align=\"left\">Object 对象</td>\n<td align=\"left\">o</td>\n<td align=\"left\">oButton,oDate</td>\n</tr>\n<tr>\n<td align=\"left\">Regular Expression 正则</td>\n<td align=\"left\">r</td>\n<td align=\"left\">rDomain,rEmail</td>\n</tr>\n<tr>\n<td align=\"left\">String 字符</td>\n<td align=\"left\">s</td>\n<td align=\"left\">sName,sHtml</td>\n</tr>\n</tbody></table>\n<h1 id=\"事件名动词\"><a href=\"#事件名动词\" class=\"headerlink\" title=\"事件名动词\"></a>事件名动词</h1><table>\n<thead>\n<tr>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">get</td>\n<td align=\"left\">获取</td>\n<td align=\"left\">set</td>\n<td align=\"left\">设置</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">增加</td>\n<td align=\"left\">remove</td>\n<td align=\"left\">删除</td>\n</tr>\n<tr>\n<td align=\"left\">create</td>\n<td align=\"left\">创建</td>\n<td align=\"left\">destory</td>\n<td align=\"left\">移除</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">启动</td>\n<td align=\"left\">stop</td>\n<td align=\"left\">停止</td>\n</tr>\n<tr>\n<td align=\"left\">open</td>\n<td align=\"left\">打开</td>\n<td align=\"left\">close</td>\n<td align=\"left\">关闭</td>\n</tr>\n<tr>\n<td align=\"left\">read</td>\n<td align=\"left\">读取</td>\n<td align=\"left\">write</td>\n<td align=\"left\">写入</td>\n</tr>\n<tr>\n<td align=\"left\">load</td>\n<td align=\"left\">载入</td>\n<td align=\"left\">save</td>\n<td align=\"left\">保存</td>\n</tr>\n<tr>\n<td align=\"left\">create</td>\n<td align=\"left\">创建</td>\n<td align=\"left\">destroy</td>\n<td align=\"left\">销毁</td>\n</tr>\n<tr>\n<td align=\"left\">begin</td>\n<td align=\"left\">开始</td>\n<td align=\"left\">end</td>\n<td align=\"left\">结束</td>\n</tr>\n<tr>\n<td align=\"left\">backup</td>\n<td align=\"left\">备份</td>\n<td align=\"left\">restore</td>\n<td align=\"left\">恢复</td>\n</tr>\n<tr>\n<td align=\"left\">import</td>\n<td align=\"left\">导入</td>\n<td align=\"left\">export</td>\n<td align=\"left\">导出</td>\n</tr>\n<tr>\n<td align=\"left\">split</td>\n<td align=\"left\">分割</td>\n<td align=\"left\">merge</td>\n<td align=\"left\">合并</td>\n</tr>\n<tr>\n<td align=\"left\">inject</td>\n<td align=\"left\">注入</td>\n<td align=\"left\">extract</td>\n<td align=\"left\">提取</td>\n</tr>\n<tr>\n<td align=\"left\">attach</td>\n<td align=\"left\">附着</td>\n<td align=\"left\">detach</td>\n<td align=\"left\">脱离</td>\n</tr>\n<tr>\n<td align=\"left\">bind</td>\n<td align=\"left\">绑定</td>\n<td align=\"left\">separate</td>\n<td align=\"left\">分离</td>\n</tr>\n<tr>\n<td align=\"left\">view</td>\n<td align=\"left\">查看</td>\n<td align=\"left\">browse</td>\n<td align=\"left\">浏览</td>\n</tr>\n<tr>\n<td align=\"left\">edit</td>\n<td align=\"left\">编辑</td>\n<td align=\"left\">modify</td>\n<td align=\"left\">修改</td>\n</tr>\n<tr>\n<td align=\"left\">select</td>\n<td align=\"left\">选取</td>\n<td align=\"left\">mark</td>\n<td align=\"left\">标记</td>\n</tr>\n<tr>\n<td align=\"left\">copy</td>\n<td align=\"left\">复制</td>\n<td align=\"left\">paste</td>\n<td align=\"left\">粘贴</td>\n</tr>\n<tr>\n<td align=\"left\">undo</td>\n<td align=\"left\">撤销</td>\n<td align=\"left\">redo</td>\n<td align=\"left\">重做</td>\n</tr>\n<tr>\n<td align=\"left\">insert</td>\n<td align=\"left\">插入</td>\n<td align=\"left\">delete</td>\n<td align=\"left\">移除</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">加入</td>\n<td align=\"left\">append</td>\n<td align=\"left\">添加</td>\n</tr>\n<tr>\n<td align=\"left\">clean</td>\n<td align=\"left\">清理</td>\n<td align=\"left\">clear</td>\n<td align=\"left\">清除</td>\n</tr>\n<tr>\n<td align=\"left\">index</td>\n<td align=\"left\">索引</td>\n<td align=\"left\">sort</td>\n<td align=\"left\">排序</td>\n</tr>\n<tr>\n<td align=\"left\">find</td>\n<td align=\"left\">查找</td>\n<td align=\"left\">search</td>\n<td align=\"left\">搜索</td>\n</tr>\n<tr>\n<td align=\"left\">increase</td>\n<td align=\"left\">增加</td>\n<td align=\"left\">decrease</td>\n<td align=\"left\">减少</td>\n</tr>\n<tr>\n<td align=\"left\">play</td>\n<td align=\"left\">播放</td>\n<td align=\"left\">pause</td>\n<td align=\"left\">暂停</td>\n</tr>\n<tr>\n<td align=\"left\">launch</td>\n<td align=\"left\">启动</td>\n<td align=\"left\">run</td>\n<td align=\"left\">运行</td>\n</tr>\n<tr>\n<td align=\"left\">compile</td>\n<td align=\"left\">编译</td>\n<td align=\"left\">execute</td>\n<td align=\"left\">执行</td>\n</tr>\n<tr>\n<td align=\"left\">debug</td>\n<td align=\"left\">调试</td>\n<td align=\"left\">trace</td>\n<td align=\"left\">跟踪</td>\n</tr>\n<tr>\n<td align=\"left\">observe</td>\n<td align=\"left\">观察</td>\n<td align=\"left\">listen</td>\n<td align=\"left\">监听</td>\n</tr>\n<tr>\n<td align=\"left\">build</td>\n<td align=\"left\">构建</td>\n<td align=\"left\">publish</td>\n<td align=\"left\">发布</td>\n</tr>\n<tr>\n<td align=\"left\">input</td>\n<td align=\"left\">输入</td>\n<td align=\"left\">output</td>\n<td align=\"left\">输出</td>\n</tr>\n<tr>\n<td align=\"left\">encode</td>\n<td align=\"left\">编码</td>\n<td align=\"left\">decode</td>\n<td align=\"left\">解码</td>\n</tr>\n<tr>\n<td align=\"left\">encrypt</td>\n<td align=\"left\">加密</td>\n<td align=\"left\">decrypt</td>\n<td align=\"left\">解密</td>\n</tr>\n<tr>\n<td align=\"left\">compress</td>\n<td align=\"left\">压缩</td>\n<td align=\"left\">decompress</td>\n<td align=\"left\">解压缩</td>\n</tr>\n<tr>\n<td align=\"left\">pack</td>\n<td align=\"left\">打包</td>\n<td align=\"left\">unpack</td>\n<td align=\"left\">解包</td>\n</tr>\n<tr>\n<td align=\"left\">parse</td>\n<td align=\"left\">解析</td>\n<td align=\"left\">emit</td>\n<td align=\"left\">生成</td>\n</tr>\n<tr>\n<td align=\"left\">connect</td>\n<td align=\"left\">连接</td>\n<td align=\"left\">disconnect</td>\n<td align=\"left\">断开</td>\n</tr>\n<tr>\n<td align=\"left\">send</td>\n<td align=\"left\">发送</td>\n<td align=\"left\">receive</td>\n<td align=\"left\">接收</td>\n</tr>\n<tr>\n<td align=\"left\">download</td>\n<td align=\"left\">下载</td>\n<td align=\"left\">upload</td>\n<td align=\"left\">上传</td>\n</tr>\n<tr>\n<td align=\"left\">refresh</td>\n<td align=\"left\">刷新</td>\n<td align=\"left\">synchronize</td>\n<td align=\"left\">同步</td>\n</tr>\n<tr>\n<td align=\"left\">update</td>\n<td align=\"left\">更新</td>\n<td align=\"left\">revert</td>\n<td align=\"left\">复原</td>\n</tr>\n<tr>\n<td align=\"left\">lock</td>\n<td align=\"left\">锁定</td>\n<td align=\"left\">unlock</td>\n<td align=\"left\">解锁</td>\n</tr>\n<tr>\n<td align=\"left\">check out</td>\n<td align=\"left\">签出</td>\n<td align=\"left\">check in</td>\n<td align=\"left\">签入</td>\n</tr>\n<tr>\n<td align=\"left\">submit</td>\n<td align=\"left\">提交</td>\n<td align=\"left\">commit</td>\n<td align=\"left\">交付</td>\n</tr>\n<tr>\n<td align=\"left\">push</td>\n<td align=\"left\">推</td>\n<td align=\"left\">pull</td>\n<td align=\"left\">拉</td>\n</tr>\n<tr>\n<td align=\"left\">expand</td>\n<td align=\"left\">展开</td>\n<td align=\"left\">collapse</td>\n<td align=\"left\">折叠</td>\n</tr>\n<tr>\n<td align=\"left\">begin</td>\n<td align=\"left\">起始</td>\n<td align=\"left\">end</td>\n<td align=\"left\">结束</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">开始</td>\n<td align=\"left\">finish</td>\n<td align=\"left\">完成</td>\n</tr>\n<tr>\n<td align=\"left\">enter</td>\n<td align=\"left\">进入</td>\n<td align=\"left\">exit</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"left\">abort</td>\n<td align=\"left\">放弃</td>\n<td align=\"left\">quit</td>\n<td align=\"left\">离开</td>\n</tr>\n<tr>\n<td align=\"left\">obsolete</td>\n<td align=\"left\">废弃</td>\n<td align=\"left\">depreciate</td>\n<td align=\"left\">废旧</td>\n</tr>\n<tr>\n<td align=\"left\">collect</td>\n<td align=\"left\">收集</td>\n<td align=\"left\">aggregate</td>\n<td align=\"left\">聚集</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"变量名\"><a href=\"#变量名\" class=\"headerlink\" title=\"变量名\"></a>变量名</h1><table>\n<thead>\n<tr>\n<th align=\"left\">描述</th>\n<th align=\"left\">前缀</th>\n<th align=\"left\">命名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Array 数组</td>\n<td align=\"left\">a</td>\n<td align=\"left\">aList,aGroup</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean 布尔</td>\n<td align=\"left\">b</td>\n<td align=\"left\">bChecked,bHasLogin</td>\n</tr>\n<tr>\n<td align=\"left\">Function 函数</td>\n<td align=\"left\">f</td>\n<td align=\"left\">fGetHtml,fInit</td>\n</tr>\n<tr>\n<td align=\"left\">Number 数字</td>\n<td align=\"left\">n</td>\n<td align=\"left\">nPage,nTotal</td>\n</tr>\n<tr>\n<td align=\"left\">Object 对象</td>\n<td align=\"left\">o</td>\n<td align=\"left\">oButton,oDate</td>\n</tr>\n<tr>\n<td align=\"left\">Regular Expression 正则</td>\n<td align=\"left\">r</td>\n<td align=\"left\">rDomain,rEmail</td>\n</tr>\n<tr>\n<td align=\"left\">String 字符</td>\n<td align=\"left\">s</td>\n<td align=\"left\">sName,sHtml</td>\n</tr>\n</tbody></table>\n<h1 id=\"事件名动词\"><a href=\"#事件名动词\" class=\"headerlink\" title=\"事件名动词\"></a>事件名动词</h1><table>\n<thead>\n<tr>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">get</td>\n<td align=\"left\">获取</td>\n<td align=\"left\">set</td>\n<td align=\"left\">设置</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">增加</td>\n<td align=\"left\">remove</td>\n<td align=\"left\">删除</td>\n</tr>\n<tr>\n<td align=\"left\">create</td>\n<td align=\"left\">创建</td>\n<td align=\"left\">destory</td>\n<td align=\"left\">移除</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">启动</td>\n<td align=\"left\">stop</td>\n<td align=\"left\">停止</td>\n</tr>\n<tr>\n<td align=\"left\">open</td>\n<td align=\"left\">打开</td>\n<td align=\"left\">close</td>\n<td align=\"left\">关闭</td>\n</tr>\n<tr>\n<td align=\"left\">read</td>\n<td align=\"left\">读取</td>\n<td align=\"left\">write</td>\n<td align=\"left\">写入</td>\n</tr>\n<tr>\n<td align=\"left\">load</td>\n<td align=\"left\">载入</td>\n<td align=\"left\">save</td>\n<td align=\"left\">保存</td>\n</tr>\n<tr>\n<td align=\"left\">create</td>\n<td align=\"left\">创建</td>\n<td align=\"left\">destroy</td>\n<td align=\"left\">销毁</td>\n</tr>\n<tr>\n<td align=\"left\">begin</td>\n<td align=\"left\">开始</td>\n<td align=\"left\">end</td>\n<td align=\"left\">结束</td>\n</tr>\n<tr>\n<td align=\"left\">backup</td>\n<td align=\"left\">备份</td>\n<td align=\"left\">restore</td>\n<td align=\"left\">恢复</td>\n</tr>\n<tr>\n<td align=\"left\">import</td>\n<td align=\"left\">导入</td>\n<td align=\"left\">export</td>\n<td align=\"left\">导出</td>\n</tr>\n<tr>\n<td align=\"left\">split</td>\n<td align=\"left\">分割</td>\n<td align=\"left\">merge</td>\n<td align=\"left\">合并</td>\n</tr>\n<tr>\n<td align=\"left\">inject</td>\n<td align=\"left\">注入</td>\n<td align=\"left\">extract</td>\n<td align=\"left\">提取</td>\n</tr>\n<tr>\n<td align=\"left\">attach</td>\n<td align=\"left\">附着</td>\n<td align=\"left\">detach</td>\n<td align=\"left\">脱离</td>\n</tr>\n<tr>\n<td align=\"left\">bind</td>\n<td align=\"left\">绑定</td>\n<td align=\"left\">separate</td>\n<td align=\"left\">分离</td>\n</tr>\n<tr>\n<td align=\"left\">view</td>\n<td align=\"left\">查看</td>\n<td align=\"left\">browse</td>\n<td align=\"left\">浏览</td>\n</tr>\n<tr>\n<td align=\"left\">edit</td>\n<td align=\"left\">编辑</td>\n<td align=\"left\">modify</td>\n<td align=\"left\">修改</td>\n</tr>\n<tr>\n<td align=\"left\">select</td>\n<td align=\"left\">选取</td>\n<td align=\"left\">mark</td>\n<td align=\"left\">标记</td>\n</tr>\n<tr>\n<td align=\"left\">copy</td>\n<td align=\"left\">复制</td>\n<td align=\"left\">paste</td>\n<td align=\"left\">粘贴</td>\n</tr>\n<tr>\n<td align=\"left\">undo</td>\n<td align=\"left\">撤销</td>\n<td align=\"left\">redo</td>\n<td align=\"left\">重做</td>\n</tr>\n<tr>\n<td align=\"left\">insert</td>\n<td align=\"left\">插入</td>\n<td align=\"left\">delete</td>\n<td align=\"left\">移除</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">加入</td>\n<td align=\"left\">append</td>\n<td align=\"left\">添加</td>\n</tr>\n<tr>\n<td align=\"left\">clean</td>\n<td align=\"left\">清理</td>\n<td align=\"left\">clear</td>\n<td align=\"left\">清除</td>\n</tr>\n<tr>\n<td align=\"left\">index</td>\n<td align=\"left\">索引</td>\n<td align=\"left\">sort</td>\n<td align=\"left\">排序</td>\n</tr>\n<tr>\n<td align=\"left\">find</td>\n<td align=\"left\">查找</td>\n<td align=\"left\">search</td>\n<td align=\"left\">搜索</td>\n</tr>\n<tr>\n<td align=\"left\">increase</td>\n<td align=\"left\">增加</td>\n<td align=\"left\">decrease</td>\n<td align=\"left\">减少</td>\n</tr>\n<tr>\n<td align=\"left\">play</td>\n<td align=\"left\">播放</td>\n<td align=\"left\">pause</td>\n<td align=\"left\">暂停</td>\n</tr>\n<tr>\n<td align=\"left\">launch</td>\n<td align=\"left\">启动</td>\n<td align=\"left\">run</td>\n<td align=\"left\">运行</td>\n</tr>\n<tr>\n<td align=\"left\">compile</td>\n<td align=\"left\">编译</td>\n<td align=\"left\">execute</td>\n<td align=\"left\">执行</td>\n</tr>\n<tr>\n<td align=\"left\">debug</td>\n<td align=\"left\">调试</td>\n<td align=\"left\">trace</td>\n<td align=\"left\">跟踪</td>\n</tr>\n<tr>\n<td align=\"left\">observe</td>\n<td align=\"left\">观察</td>\n<td align=\"left\">listen</td>\n<td align=\"left\">监听</td>\n</tr>\n<tr>\n<td align=\"left\">build</td>\n<td align=\"left\">构建</td>\n<td align=\"left\">publish</td>\n<td align=\"left\">发布</td>\n</tr>\n<tr>\n<td align=\"left\">input</td>\n<td align=\"left\">输入</td>\n<td align=\"left\">output</td>\n<td align=\"left\">输出</td>\n</tr>\n<tr>\n<td align=\"left\">encode</td>\n<td align=\"left\">编码</td>\n<td align=\"left\">decode</td>\n<td align=\"left\">解码</td>\n</tr>\n<tr>\n<td align=\"left\">encrypt</td>\n<td align=\"left\">加密</td>\n<td align=\"left\">decrypt</td>\n<td align=\"left\">解密</td>\n</tr>\n<tr>\n<td align=\"left\">compress</td>\n<td align=\"left\">压缩</td>\n<td align=\"left\">decompress</td>\n<td align=\"left\">解压缩</td>\n</tr>\n<tr>\n<td align=\"left\">pack</td>\n<td align=\"left\">打包</td>\n<td align=\"left\">unpack</td>\n<td align=\"left\">解包</td>\n</tr>\n<tr>\n<td align=\"left\">parse</td>\n<td align=\"left\">解析</td>\n<td align=\"left\">emit</td>\n<td align=\"left\">生成</td>\n</tr>\n<tr>\n<td align=\"left\">connect</td>\n<td align=\"left\">连接</td>\n<td align=\"left\">disconnect</td>\n<td align=\"left\">断开</td>\n</tr>\n<tr>\n<td align=\"left\">send</td>\n<td align=\"left\">发送</td>\n<td align=\"left\">receive</td>\n<td align=\"left\">接收</td>\n</tr>\n<tr>\n<td align=\"left\">download</td>\n<td align=\"left\">下载</td>\n<td align=\"left\">upload</td>\n<td align=\"left\">上传</td>\n</tr>\n<tr>\n<td align=\"left\">refresh</td>\n<td align=\"left\">刷新</td>\n<td align=\"left\">synchronize</td>\n<td align=\"left\">同步</td>\n</tr>\n<tr>\n<td align=\"left\">update</td>\n<td align=\"left\">更新</td>\n<td align=\"left\">revert</td>\n<td align=\"left\">复原</td>\n</tr>\n<tr>\n<td align=\"left\">lock</td>\n<td align=\"left\">锁定</td>\n<td align=\"left\">unlock</td>\n<td align=\"left\">解锁</td>\n</tr>\n<tr>\n<td align=\"left\">check out</td>\n<td align=\"left\">签出</td>\n<td align=\"left\">check in</td>\n<td align=\"left\">签入</td>\n</tr>\n<tr>\n<td align=\"left\">submit</td>\n<td align=\"left\">提交</td>\n<td align=\"left\">commit</td>\n<td align=\"left\">交付</td>\n</tr>\n<tr>\n<td align=\"left\">push</td>\n<td align=\"left\">推</td>\n<td align=\"left\">pull</td>\n<td align=\"left\">拉</td>\n</tr>\n<tr>\n<td align=\"left\">expand</td>\n<td align=\"left\">展开</td>\n<td align=\"left\">collapse</td>\n<td align=\"left\">折叠</td>\n</tr>\n<tr>\n<td align=\"left\">begin</td>\n<td align=\"left\">起始</td>\n<td align=\"left\">end</td>\n<td align=\"left\">结束</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">开始</td>\n<td align=\"left\">finish</td>\n<td align=\"left\">完成</td>\n</tr>\n<tr>\n<td align=\"left\">enter</td>\n<td align=\"left\">进入</td>\n<td align=\"left\">exit</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"left\">abort</td>\n<td align=\"left\">放弃</td>\n<td align=\"left\">quit</td>\n<td align=\"left\">离开</td>\n</tr>\n<tr>\n<td align=\"left\">obsolete</td>\n<td align=\"left\">废弃</td>\n<td align=\"left\">depreciate</td>\n<td align=\"left\">废旧</td>\n</tr>\n<tr>\n<td align=\"left\">collect</td>\n<td align=\"left\">收集</td>\n<td align=\"left\">aggregate</td>\n<td align=\"left\">聚集</td>\n</tr>\n</tbody></table>\n"},{"title":"宏任务和微任务","date":"2023-02-08T06:33:00.000Z","_content":"\n# `macrotasks` 宏任务\n* UI rendering`<script>`\n* I/O 鼠标事件 `mousemove`,`click`\n* `setTimeout()`\n* `setImmediate()`\n* `setInterval()`\n* `requestAnimationFrame()`\n\nsplit the task into pieces.\n\n`there’s the in-browser minimal delay of 4ms for many nested setTimeout calls. Even if we set 0, it’s 4ms (or a bit more)`\n在浏览器中，嵌套调用`setTimeout`最小延迟为4ms，即使是`setTimeout(fn,0)`，也是4ms+\n\n# `microtasks` 微任务\n* `Promise`,`await`\n* `process.nextTick()`\n* `queue Microtask()`\n* `MutationObserver`\n\n# event loop 执行顺序\n1.常规同步调用\n2.微任务调用\n3.宏任务调用\n\n### 宏任务中：\n常规同步-->所有微任务-->下一个宏任务\n\n# examples\n注意使用 `setTimeout` 时，第一个参数是函数，调用已定义的函数，无需加`()`\n`setTimeout` 调用的必须是函数，`promise.resolve().then()`是表达式\n```\nfunction log1(){\n  console.log(1);\n}\nfunction log2(){\n  console.log(2);\n}\nfunction log3(){\n  console.log(3);\n}\nfunction log4(){\n  console.log(4);\n}\nfunction log5(){\n  console.log(5);\n}\nfunction log6(){\n  console.log(6);\n}\nfunction log7(){\n  console.log(7);\n}\nfunction log8(){\n  console.log(8);\n}\n\nlog1();\n\nsetTimeout(log2);\n\nPromise.resolve().then(log3);\n\nPromise.resolve().then(setTimeout(log4));\n\nPromise.resolve().then(log5);\n\nsetTimeout(log6);\n\nsetTimeout(()=>Promise.resolve().then(log8))\n\nlog7();\n\n// 1 7 3 5 2 4 6 8\n```\n\n先执行匿名箭头函数，再执行箭头函数里面的内容\n宏任务需要执行完内部代码（包含常规同步函数，所有微任务）才能执行下一个宏任务\n```\nfunction log1(){\n  console.log(1);\n}\nfunction log2(){\n  console.log(2);\n}\nfunction log3(){\n  console.log(3);\n}\nfunction log4(){\n  console.log(4);\n}\nfunction log5(){\n  console.log(5);\n}\nfunction log6(){\n  console.log(6);\n}\nfunction log7(){\n  console.log(7);\n}\nfunction log8(){\n  console.log(8);\n}\n\nlog1();\n\nsetTimeout(()=>log2());\n// 等价： setTimeout(()=>{log2()})\n// 等价： setTimeout(function (){log2()})\n\nPromise.resolve().then(()=>log3());\n\nPromise.resolve().then(()=>setTimeout(()=>log4()));\n// 等价： Promise.resolve().then(()=>{setTimeout(()=>{log4()})})\n// 等价： Promise.resolve().then(function (){setTimeout(function (){log4()})}\n\nPromise.resolve().then(()=>log5());\n\nsetTimeout(()=>log6());\n\nsetTimeout(()=>Promise.resolve().then(()=>log8()))\n\nlog7();\n\n// 1 7 3 5 2 6 8 4\n```\n\n`promise` 链中的需要等待回复之后才能执行下一个`then`\n在 `promise` 中的宏任务无需等待回复，直接添加到宏任务队列中\n```\nfunction logA() {\n  console.log('A');\n}\nfunction logB() {\n  console.log('B');\n}\nfunction logC() {\n  console.log('C');\n}\nfunction logD() {\n  console.log('D');\n}\nfunction logE() {\n  console.log('E');\n}\nfunction logF() {\n  console.log('F');\n}\nfunction logG() {\n  console.log('G');\n}\nfunction logH() {\n  console.log('H');\n}\nfunction logI() {\n  console.log('I');\n}\nfunction logJ() {\n  console.log('J');\n}\n\nlogA();\nsetTimeout(logG, 0);\nPromise.resolve()\n  .then(logC)\n  .then(setTimeout(logH))\n  .then(logD)\n  .then(logE)\n  .then(logF);\nsetTimeout(logI);\nsetTimeout(logJ);\nlogB();\n// A B C D E F G H I J\n```\n\n# 参考文献\n[宏任务和微任务](https://javascript.info/event-loop)\n\n[在线工具](https://www.jsv9000.app/)\n\n[宏任务和微任务执行](https://medium.com/dkatalis/eventloop-in-nodejs-macrotasks-and-microtasks-164417e619b9)\n\n\n","source":"_posts/宏任务和微任务.md","raw":"---\ntitle: 宏任务和微任务\ndate: 2023-02-08 14:33:00\ntags: work\n---\n\n# `macrotasks` 宏任务\n* UI rendering`<script>`\n* I/O 鼠标事件 `mousemove`,`click`\n* `setTimeout()`\n* `setImmediate()`\n* `setInterval()`\n* `requestAnimationFrame()`\n\nsplit the task into pieces.\n\n`there’s the in-browser minimal delay of 4ms for many nested setTimeout calls. Even if we set 0, it’s 4ms (or a bit more)`\n在浏览器中，嵌套调用`setTimeout`最小延迟为4ms，即使是`setTimeout(fn,0)`，也是4ms+\n\n# `microtasks` 微任务\n* `Promise`,`await`\n* `process.nextTick()`\n* `queue Microtask()`\n* `MutationObserver`\n\n# event loop 执行顺序\n1.常规同步调用\n2.微任务调用\n3.宏任务调用\n\n### 宏任务中：\n常规同步-->所有微任务-->下一个宏任务\n\n# examples\n注意使用 `setTimeout` 时，第一个参数是函数，调用已定义的函数，无需加`()`\n`setTimeout` 调用的必须是函数，`promise.resolve().then()`是表达式\n```\nfunction log1(){\n  console.log(1);\n}\nfunction log2(){\n  console.log(2);\n}\nfunction log3(){\n  console.log(3);\n}\nfunction log4(){\n  console.log(4);\n}\nfunction log5(){\n  console.log(5);\n}\nfunction log6(){\n  console.log(6);\n}\nfunction log7(){\n  console.log(7);\n}\nfunction log8(){\n  console.log(8);\n}\n\nlog1();\n\nsetTimeout(log2);\n\nPromise.resolve().then(log3);\n\nPromise.resolve().then(setTimeout(log4));\n\nPromise.resolve().then(log5);\n\nsetTimeout(log6);\n\nsetTimeout(()=>Promise.resolve().then(log8))\n\nlog7();\n\n// 1 7 3 5 2 4 6 8\n```\n\n先执行匿名箭头函数，再执行箭头函数里面的内容\n宏任务需要执行完内部代码（包含常规同步函数，所有微任务）才能执行下一个宏任务\n```\nfunction log1(){\n  console.log(1);\n}\nfunction log2(){\n  console.log(2);\n}\nfunction log3(){\n  console.log(3);\n}\nfunction log4(){\n  console.log(4);\n}\nfunction log5(){\n  console.log(5);\n}\nfunction log6(){\n  console.log(6);\n}\nfunction log7(){\n  console.log(7);\n}\nfunction log8(){\n  console.log(8);\n}\n\nlog1();\n\nsetTimeout(()=>log2());\n// 等价： setTimeout(()=>{log2()})\n// 等价： setTimeout(function (){log2()})\n\nPromise.resolve().then(()=>log3());\n\nPromise.resolve().then(()=>setTimeout(()=>log4()));\n// 等价： Promise.resolve().then(()=>{setTimeout(()=>{log4()})})\n// 等价： Promise.resolve().then(function (){setTimeout(function (){log4()})}\n\nPromise.resolve().then(()=>log5());\n\nsetTimeout(()=>log6());\n\nsetTimeout(()=>Promise.resolve().then(()=>log8()))\n\nlog7();\n\n// 1 7 3 5 2 6 8 4\n```\n\n`promise` 链中的需要等待回复之后才能执行下一个`then`\n在 `promise` 中的宏任务无需等待回复，直接添加到宏任务队列中\n```\nfunction logA() {\n  console.log('A');\n}\nfunction logB() {\n  console.log('B');\n}\nfunction logC() {\n  console.log('C');\n}\nfunction logD() {\n  console.log('D');\n}\nfunction logE() {\n  console.log('E');\n}\nfunction logF() {\n  console.log('F');\n}\nfunction logG() {\n  console.log('G');\n}\nfunction logH() {\n  console.log('H');\n}\nfunction logI() {\n  console.log('I');\n}\nfunction logJ() {\n  console.log('J');\n}\n\nlogA();\nsetTimeout(logG, 0);\nPromise.resolve()\n  .then(logC)\n  .then(setTimeout(logH))\n  .then(logD)\n  .then(logE)\n  .then(logF);\nsetTimeout(logI);\nsetTimeout(logJ);\nlogB();\n// A B C D E F G H I J\n```\n\n# 参考文献\n[宏任务和微任务](https://javascript.info/event-loop)\n\n[在线工具](https://www.jsv9000.app/)\n\n[宏任务和微任务执行](https://medium.com/dkatalis/eventloop-in-nodejs-macrotasks-and-microtasks-164417e619b9)\n\n\n","slug":"宏任务和微任务","published":1,"updated":"2023-02-09T06:17:30.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwps2j1000jqg3m3n1scm7i","content":"<h1 id=\"macrotasks-宏任务\"><a href=\"#macrotasks-宏任务\" class=\"headerlink\" title=\"macrotasks 宏任务\"></a><code>macrotasks</code> 宏任务</h1><ul>\n<li>UI rendering<code>&lt;script&gt;</code></li>\n<li>I/O 鼠标事件 <code>mousemove</code>,<code>click</code></li>\n<li><code>setTimeout()</code></li>\n<li><code>setImmediate()</code></li>\n<li><code>setInterval()</code></li>\n<li><code>requestAnimationFrame()</code></li>\n</ul>\n<p>split the task into pieces.</p>\n<p><code>there’s the in-browser minimal delay of 4ms for many nested setTimeout calls. Even if we set 0, it’s 4ms (or a bit more)</code><br>在浏览器中，嵌套调用<code>setTimeout</code>最小延迟为4ms，即使是<code>setTimeout(fn,0)</code>，也是4ms+</p>\n<h1 id=\"microtasks-微任务\"><a href=\"#microtasks-微任务\" class=\"headerlink\" title=\"microtasks 微任务\"></a><code>microtasks</code> 微任务</h1><ul>\n<li><code>Promise</code>,<code>await</code></li>\n<li><code>process.nextTick()</code></li>\n<li><code>queue Microtask()</code></li>\n<li><code>MutationObserver</code></li>\n</ul>\n<h1 id=\"event-loop-执行顺序\"><a href=\"#event-loop-执行顺序\" class=\"headerlink\" title=\"event loop 执行顺序\"></a>event loop 执行顺序</h1><p>1.常规同步调用<br>2.微任务调用<br>3.宏任务调用</p>\n<h3 id=\"宏任务中：\"><a href=\"#宏任务中：\" class=\"headerlink\" title=\"宏任务中：\"></a>宏任务中：</h3><p>常规同步–&gt;所有微任务–&gt;下一个宏任务</p>\n<h1 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h1><p>注意使用 <code>setTimeout</code> 时，第一个参数是函数，调用已定义的函数，无需加<code>()</code><br><code>setTimeout</code> 调用的必须是函数，<code>promise.resolve().then()</code>是表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log1()&#123;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log2()&#123;</span><br><span class=\"line\">  console.log(2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log3()&#123;</span><br><span class=\"line\">  console.log(3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log4()&#123;</span><br><span class=\"line\">  console.log(4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log5()&#123;</span><br><span class=\"line\">  console.log(5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log6()&#123;</span><br><span class=\"line\">  console.log(6);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log7()&#123;</span><br><span class=\"line\">  console.log(7);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log8()&#123;</span><br><span class=\"line\">  console.log(8);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log1();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(log2);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(log3);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(setTimeout(log4));</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(log5);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(log6);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(()=&gt;Promise.resolve().then(log8))</span><br><span class=\"line\"></span><br><span class=\"line\">log7();</span><br><span class=\"line\"></span><br><span class=\"line\">// 1 7 3 5 2 4 6 8</span><br></pre></td></tr></table></figure>\n\n<p>先执行匿名箭头函数，再执行箭头函数里面的内容<br>宏任务需要执行完内部代码（包含常规同步函数，所有微任务）才能执行下一个宏任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log1()&#123;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log2()&#123;</span><br><span class=\"line\">  console.log(2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log3()&#123;</span><br><span class=\"line\">  console.log(3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log4()&#123;</span><br><span class=\"line\">  console.log(4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log5()&#123;</span><br><span class=\"line\">  console.log(5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log6()&#123;</span><br><span class=\"line\">  console.log(6);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log7()&#123;</span><br><span class=\"line\">  console.log(7);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log8()&#123;</span><br><span class=\"line\">  console.log(8);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log1();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(()=&gt;log2());</span><br><span class=\"line\">// 等价： setTimeout(()=&gt;&#123;log2()&#125;)</span><br><span class=\"line\">// 等价： setTimeout(function ()&#123;log2()&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(()=&gt;log3());</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(()=&gt;setTimeout(()=&gt;log4()));</span><br><span class=\"line\">// 等价： Promise.resolve().then(()=&gt;&#123;setTimeout(()=&gt;&#123;log4()&#125;)&#125;)</span><br><span class=\"line\">// 等价： Promise.resolve().then(function ()&#123;setTimeout(function ()&#123;log4()&#125;)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(()=&gt;log5());</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(()=&gt;log6());</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(()=&gt;Promise.resolve().then(()=&gt;log8()))</span><br><span class=\"line\"></span><br><span class=\"line\">log7();</span><br><span class=\"line\"></span><br><span class=\"line\">// 1 7 3 5 2 6 8 4</span><br></pre></td></tr></table></figure>\n\n<p><code>promise</code> 链中的需要等待回复之后才能执行下一个<code>then</code><br>在 <code>promise</code> 中的宏任务无需等待回复，直接添加到宏任务队列中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function logA() &#123;</span><br><span class=\"line\">  console.log(&#x27;A&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logB() &#123;</span><br><span class=\"line\">  console.log(&#x27;B&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logC() &#123;</span><br><span class=\"line\">  console.log(&#x27;C&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logD() &#123;</span><br><span class=\"line\">  console.log(&#x27;D&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logE() &#123;</span><br><span class=\"line\">  console.log(&#x27;E&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logF() &#123;</span><br><span class=\"line\">  console.log(&#x27;F&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logG() &#123;</span><br><span class=\"line\">  console.log(&#x27;G&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logH() &#123;</span><br><span class=\"line\">  console.log(&#x27;H&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logI() &#123;</span><br><span class=\"line\">  console.log(&#x27;I&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logJ() &#123;</span><br><span class=\"line\">  console.log(&#x27;J&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">logA();</span><br><span class=\"line\">setTimeout(logG, 0);</span><br><span class=\"line\">Promise.resolve()</span><br><span class=\"line\">  .then(logC)</span><br><span class=\"line\">  .then(setTimeout(logH))</span><br><span class=\"line\">  .then(logD)</span><br><span class=\"line\">  .then(logE)</span><br><span class=\"line\">  .then(logF);</span><br><span class=\"line\">setTimeout(logI);</span><br><span class=\"line\">setTimeout(logJ);</span><br><span class=\"line\">logB();</span><br><span class=\"line\">// A B C D E F G H I J</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://javascript.info/event-loop\">宏任务和微任务</a></p>\n<p><a href=\"https://www.jsv9000.app/\">在线工具</a></p>\n<p><a href=\"https://medium.com/dkatalis/eventloop-in-nodejs-macrotasks-and-microtasks-164417e619b9\">宏任务和微任务执行</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"macrotasks-宏任务\"><a href=\"#macrotasks-宏任务\" class=\"headerlink\" title=\"macrotasks 宏任务\"></a><code>macrotasks</code> 宏任务</h1><ul>\n<li>UI rendering<code>&lt;script&gt;</code></li>\n<li>I/O 鼠标事件 <code>mousemove</code>,<code>click</code></li>\n<li><code>setTimeout()</code></li>\n<li><code>setImmediate()</code></li>\n<li><code>setInterval()</code></li>\n<li><code>requestAnimationFrame()</code></li>\n</ul>\n<p>split the task into pieces.</p>\n<p><code>there’s the in-browser minimal delay of 4ms for many nested setTimeout calls. Even if we set 0, it’s 4ms (or a bit more)</code><br>在浏览器中，嵌套调用<code>setTimeout</code>最小延迟为4ms，即使是<code>setTimeout(fn,0)</code>，也是4ms+</p>\n<h1 id=\"microtasks-微任务\"><a href=\"#microtasks-微任务\" class=\"headerlink\" title=\"microtasks 微任务\"></a><code>microtasks</code> 微任务</h1><ul>\n<li><code>Promise</code>,<code>await</code></li>\n<li><code>process.nextTick()</code></li>\n<li><code>queue Microtask()</code></li>\n<li><code>MutationObserver</code></li>\n</ul>\n<h1 id=\"event-loop-执行顺序\"><a href=\"#event-loop-执行顺序\" class=\"headerlink\" title=\"event loop 执行顺序\"></a>event loop 执行顺序</h1><p>1.常规同步调用<br>2.微任务调用<br>3.宏任务调用</p>\n<h3 id=\"宏任务中：\"><a href=\"#宏任务中：\" class=\"headerlink\" title=\"宏任务中：\"></a>宏任务中：</h3><p>常规同步–&gt;所有微任务–&gt;下一个宏任务</p>\n<h1 id=\"examples\"><a href=\"#examples\" class=\"headerlink\" title=\"examples\"></a>examples</h1><p>注意使用 <code>setTimeout</code> 时，第一个参数是函数，调用已定义的函数，无需加<code>()</code><br><code>setTimeout</code> 调用的必须是函数，<code>promise.resolve().then()</code>是表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log1()&#123;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log2()&#123;</span><br><span class=\"line\">  console.log(2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log3()&#123;</span><br><span class=\"line\">  console.log(3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log4()&#123;</span><br><span class=\"line\">  console.log(4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log5()&#123;</span><br><span class=\"line\">  console.log(5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log6()&#123;</span><br><span class=\"line\">  console.log(6);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log7()&#123;</span><br><span class=\"line\">  console.log(7);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log8()&#123;</span><br><span class=\"line\">  console.log(8);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log1();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(log2);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(log3);</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(setTimeout(log4));</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(log5);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(log6);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(()=&gt;Promise.resolve().then(log8))</span><br><span class=\"line\"></span><br><span class=\"line\">log7();</span><br><span class=\"line\"></span><br><span class=\"line\">// 1 7 3 5 2 4 6 8</span><br></pre></td></tr></table></figure>\n\n<p>先执行匿名箭头函数，再执行箭头函数里面的内容<br>宏任务需要执行完内部代码（包含常规同步函数，所有微任务）才能执行下一个宏任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log1()&#123;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log2()&#123;</span><br><span class=\"line\">  console.log(2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log3()&#123;</span><br><span class=\"line\">  console.log(3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log4()&#123;</span><br><span class=\"line\">  console.log(4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log5()&#123;</span><br><span class=\"line\">  console.log(5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log6()&#123;</span><br><span class=\"line\">  console.log(6);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log7()&#123;</span><br><span class=\"line\">  console.log(7);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function log8()&#123;</span><br><span class=\"line\">  console.log(8);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log1();</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(()=&gt;log2());</span><br><span class=\"line\">// 等价： setTimeout(()=&gt;&#123;log2()&#125;)</span><br><span class=\"line\">// 等价： setTimeout(function ()&#123;log2()&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(()=&gt;log3());</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(()=&gt;setTimeout(()=&gt;log4()));</span><br><span class=\"line\">// 等价： Promise.resolve().then(()=&gt;&#123;setTimeout(()=&gt;&#123;log4()&#125;)&#125;)</span><br><span class=\"line\">// 等价： Promise.resolve().then(function ()&#123;setTimeout(function ()&#123;log4()&#125;)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Promise.resolve().then(()=&gt;log5());</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(()=&gt;log6());</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(()=&gt;Promise.resolve().then(()=&gt;log8()))</span><br><span class=\"line\"></span><br><span class=\"line\">log7();</span><br><span class=\"line\"></span><br><span class=\"line\">// 1 7 3 5 2 6 8 4</span><br></pre></td></tr></table></figure>\n\n<p><code>promise</code> 链中的需要等待回复之后才能执行下一个<code>then</code><br>在 <code>promise</code> 中的宏任务无需等待回复，直接添加到宏任务队列中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function logA() &#123;</span><br><span class=\"line\">  console.log(&#x27;A&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logB() &#123;</span><br><span class=\"line\">  console.log(&#x27;B&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logC() &#123;</span><br><span class=\"line\">  console.log(&#x27;C&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logD() &#123;</span><br><span class=\"line\">  console.log(&#x27;D&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logE() &#123;</span><br><span class=\"line\">  console.log(&#x27;E&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logF() &#123;</span><br><span class=\"line\">  console.log(&#x27;F&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logG() &#123;</span><br><span class=\"line\">  console.log(&#x27;G&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logH() &#123;</span><br><span class=\"line\">  console.log(&#x27;H&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logI() &#123;</span><br><span class=\"line\">  console.log(&#x27;I&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function logJ() &#123;</span><br><span class=\"line\">  console.log(&#x27;J&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">logA();</span><br><span class=\"line\">setTimeout(logG, 0);</span><br><span class=\"line\">Promise.resolve()</span><br><span class=\"line\">  .then(logC)</span><br><span class=\"line\">  .then(setTimeout(logH))</span><br><span class=\"line\">  .then(logD)</span><br><span class=\"line\">  .then(logE)</span><br><span class=\"line\">  .then(logF);</span><br><span class=\"line\">setTimeout(logI);</span><br><span class=\"line\">setTimeout(logJ);</span><br><span class=\"line\">logB();</span><br><span class=\"line\">// A B C D E F G H I J</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://javascript.info/event-loop\">宏任务和微任务</a></p>\n<p><a href=\"https://www.jsv9000.app/\">在线工具</a></p>\n<p><a href=\"https://medium.com/dkatalis/eventloop-in-nodejs-macrotasks-and-microtasks-164417e619b9\">宏任务和微任务执行</a></p>\n"},{"layout":"layout","title":"正则表达式","date":"2023-01-30T03:20:51.000Z","_content":"\n# 可选参数\n例：`/a-z/gi`\n```\ng 全局搜索\ni 不区分大小写\nm 多行\ns 允许 .匹配\nu 使用uniocde码的模式进行匹配\ny 粘性搜索，匹配从目标字符串的当前位置开始\n```\n\n# 方法\n\n### 正则表达式方法\n```\nexec 返回：数组（未匹配到返回null）\n/a{1,3}/.exec('caaaandy')\n['aaa', index: 1, input: 'caaaandy', groups: undefined]\n\ntest 返回true或false\n```\n\n### 字符串方法\n\n```\nmatch \n'caaaaaandy'.match(/a{1,3}/)\n['aaa', index: 1, input: 'caaaaaandy', groups: undefined]\n\nmatchAll\n必须加可选参数g，否则报错String.prototype.matchAll called with a non-global RegExp argument\n[...'caaaaaaandy'.match(/a{1,3}/g)]\n['aaa', 'aaa', 'a']\n\nsearch 返回匹配到的位置索引，或者在失败时返回 -1 \n\nreplace  \n'dcaaaaaaandy'.replace(/a{1,3}/g,'HH')\n'dcHHHHHHndy'\n\nsplit\n```\n\n# 特殊字符\n\n### 断言\n```\n// 边界类断言\n^ 首\n$ 尾\n\n\\b 匹配字边界的长度为零\n\\B 匹配非单词边界(\\b的否定版)\n\\b在前，则regExp前要么是字符串开头，要么是空格；反之则为\\B\n\\b在后，则regExp后要么是字符串结尾，要么是空格；反之则为\\B\n\n// 其他断言\nx(x?=y) 先行断言： x 被 y 跟随时匹配 x\nx(?!y) 先行否定断言： x 没有被 y 紧随时匹配 x\n(?<=y)x 后行断言： x 跟随 y 的情况下匹配 x\n(?<!y)x 后行否定断言： x 不跟随 y 时匹配 x\n```\n\n### 字符类\n```\n[xyz][a-c] 匹配包含在方括号中的任何字符\n[^xyz][^a-c] 匹配【未】包含在方括号中的任何字符\n\n. 匹配除行终止符（\\n, \\r, \\u2028或\\u2029）之外的任何单个字符；若 s (\"dotAll\") 标志位被设为 true（即加上可选参数s），它也会匹配换行符\n\n\\d [0-9]\n\\D [^0-9]\n\n\\w [A-Za-z0-9_]\n\\W [^A-Za-z0-9_]\n\n\\s [\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]\n\\S [^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]\n\n\\t 水平制表符\n\\r 回车符\n\\n 换行符\n\\v 垂直制表符\n\\f 换页符\n[\\b] 退格键\n\\0 匹配一个 NUL 字符；不要在此后面加上另一个数字\n\n（暂不考究）\n\\cX\n\\xhh\n\\uhhhh\n\\u{hhhh}或\\u{hhhhh}\n\\p{UnicodeProperty}或\\P{UnicodeProperty}\n\\\n\nx|y 匹配“x”或“y”。每个由管道符 (|) 分隔的部分称为一个可选项\n```\n\n### 组和范围\n```\nx|y\n[xyz][a-c]\n[^xyz][^a-c]\n(x)\n\\n\n(?<Name>x)\n(?:x)\n```\n\n### 量词\n```\n* 0或多次（贪婪）\n+ 1+（贪婪）\n? 0次或1次（非贪婪）\n{n} n正整数，例：/a{2}/ 匹配“caandy”中的所有“a”，以及“caaandy”中的前两个“a”\n{n,} n正整数，至少匹配n次，例：匹配“caandy”和“caaaaaaandy”中的所有 a\n{n,m} n自然数，至少匹配n次，至多匹配m次\n*? \n+?\n??\n{n}?\n{n,}?\n{n,m}?\n```\n\n### Unicode属性转义\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\n\n# 参考文献\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\n\nhttps://www.regular-expressions.info/wordboundaries.html\n\nhttps://www.pineboat.in/post/regular-expressions-your-ally/","source":"_posts/正则表达式.md","raw":"---\nlayout:\n  - layout\ntitle: 正则表达式\ndate: 2023-01-30 11:20:51\ntags:\n---\n\n# 可选参数\n例：`/a-z/gi`\n```\ng 全局搜索\ni 不区分大小写\nm 多行\ns 允许 .匹配\nu 使用uniocde码的模式进行匹配\ny 粘性搜索，匹配从目标字符串的当前位置开始\n```\n\n# 方法\n\n### 正则表达式方法\n```\nexec 返回：数组（未匹配到返回null）\n/a{1,3}/.exec('caaaandy')\n['aaa', index: 1, input: 'caaaandy', groups: undefined]\n\ntest 返回true或false\n```\n\n### 字符串方法\n\n```\nmatch \n'caaaaaandy'.match(/a{1,3}/)\n['aaa', index: 1, input: 'caaaaaandy', groups: undefined]\n\nmatchAll\n必须加可选参数g，否则报错String.prototype.matchAll called with a non-global RegExp argument\n[...'caaaaaaandy'.match(/a{1,3}/g)]\n['aaa', 'aaa', 'a']\n\nsearch 返回匹配到的位置索引，或者在失败时返回 -1 \n\nreplace  \n'dcaaaaaaandy'.replace(/a{1,3}/g,'HH')\n'dcHHHHHHndy'\n\nsplit\n```\n\n# 特殊字符\n\n### 断言\n```\n// 边界类断言\n^ 首\n$ 尾\n\n\\b 匹配字边界的长度为零\n\\B 匹配非单词边界(\\b的否定版)\n\\b在前，则regExp前要么是字符串开头，要么是空格；反之则为\\B\n\\b在后，则regExp后要么是字符串结尾，要么是空格；反之则为\\B\n\n// 其他断言\nx(x?=y) 先行断言： x 被 y 跟随时匹配 x\nx(?!y) 先行否定断言： x 没有被 y 紧随时匹配 x\n(?<=y)x 后行断言： x 跟随 y 的情况下匹配 x\n(?<!y)x 后行否定断言： x 不跟随 y 时匹配 x\n```\n\n### 字符类\n```\n[xyz][a-c] 匹配包含在方括号中的任何字符\n[^xyz][^a-c] 匹配【未】包含在方括号中的任何字符\n\n. 匹配除行终止符（\\n, \\r, \\u2028或\\u2029）之外的任何单个字符；若 s (\"dotAll\") 标志位被设为 true（即加上可选参数s），它也会匹配换行符\n\n\\d [0-9]\n\\D [^0-9]\n\n\\w [A-Za-z0-9_]\n\\W [^A-Za-z0-9_]\n\n\\s [\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]\n\\S [^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]\n\n\\t 水平制表符\n\\r 回车符\n\\n 换行符\n\\v 垂直制表符\n\\f 换页符\n[\\b] 退格键\n\\0 匹配一个 NUL 字符；不要在此后面加上另一个数字\n\n（暂不考究）\n\\cX\n\\xhh\n\\uhhhh\n\\u{hhhh}或\\u{hhhhh}\n\\p{UnicodeProperty}或\\P{UnicodeProperty}\n\\\n\nx|y 匹配“x”或“y”。每个由管道符 (|) 分隔的部分称为一个可选项\n```\n\n### 组和范围\n```\nx|y\n[xyz][a-c]\n[^xyz][^a-c]\n(x)\n\\n\n(?<Name>x)\n(?:x)\n```\n\n### 量词\n```\n* 0或多次（贪婪）\n+ 1+（贪婪）\n? 0次或1次（非贪婪）\n{n} n正整数，例：/a{2}/ 匹配“caandy”中的所有“a”，以及“caaandy”中的前两个“a”\n{n,} n正整数，至少匹配n次，例：匹配“caandy”和“caaaaaaandy”中的所有 a\n{n,m} n自然数，至少匹配n次，至多匹配m次\n*? \n+?\n??\n{n}?\n{n,}?\n{n,m}?\n```\n\n### Unicode属性转义\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\n\n# 参考文献\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\n\nhttps://www.regular-expressions.info/wordboundaries.html\n\nhttps://www.pineboat.in/post/regular-expressions-your-ally/","slug":"正则表达式","published":1,"updated":"2023-01-30T12:28:53.557Z","comments":1,"photos":[],"link":"","_id":"cldwps2j2000mqg3m52uu7kxx","content":"<h1 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h1><p>例：<code>/a-z/gi</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g 全局搜索</span><br><span class=\"line\">i 不区分大小写</span><br><span class=\"line\">m 多行</span><br><span class=\"line\">s 允许 .匹配</span><br><span class=\"line\">u 使用uniocde码的模式进行匹配</span><br><span class=\"line\">y 粘性搜索，匹配从目标字符串的当前位置开始</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h3 id=\"正则表达式方法\"><a href=\"#正则表达式方法\" class=\"headerlink\" title=\"正则表达式方法\"></a>正则表达式方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec 返回：数组（未匹配到返回null）</span><br><span class=\"line\">/a&#123;1,3&#125;/.exec(&#x27;caaaandy&#x27;)</span><br><span class=\"line\">[&#x27;aaa&#x27;, index: 1, input: &#x27;caaaandy&#x27;, groups: undefined]</span><br><span class=\"line\"></span><br><span class=\"line\">test 返回true或false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match </span><br><span class=\"line\">&#x27;caaaaaandy&#x27;.match(/a&#123;1,3&#125;/)</span><br><span class=\"line\">[&#x27;aaa&#x27;, index: 1, input: &#x27;caaaaaandy&#x27;, groups: undefined]</span><br><span class=\"line\"></span><br><span class=\"line\">matchAll</span><br><span class=\"line\">必须加可选参数g，否则报错String.prototype.matchAll called with a non-global RegExp argument</span><br><span class=\"line\">[...&#x27;caaaaaaandy&#x27;.match(/a&#123;1,3&#125;/g)]</span><br><span class=\"line\">[&#x27;aaa&#x27;, &#x27;aaa&#x27;, &#x27;a&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">search 返回匹配到的位置索引，或者在失败时返回 -1 </span><br><span class=\"line\"></span><br><span class=\"line\">replace  </span><br><span class=\"line\">&#x27;dcaaaaaaandy&#x27;.replace(/a&#123;1,3&#125;/g,&#x27;HH&#x27;)</span><br><span class=\"line\">&#x27;dcHHHHHHndy&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">split</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h1><h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 边界类断言</span><br><span class=\"line\">^ 首</span><br><span class=\"line\">$ 尾</span><br><span class=\"line\"></span><br><span class=\"line\">\\b 匹配字边界的长度为零</span><br><span class=\"line\">\\B 匹配非单词边界(\\b的否定版)</span><br><span class=\"line\">\\b在前，则regExp前要么是字符串开头，要么是空格；反之则为\\B</span><br><span class=\"line\">\\b在后，则regExp后要么是字符串结尾，要么是空格；反之则为\\B</span><br><span class=\"line\"></span><br><span class=\"line\">// 其他断言</span><br><span class=\"line\">x(x?=y) 先行断言： x 被 y 跟随时匹配 x</span><br><span class=\"line\">x(?!y) 先行否定断言： x 没有被 y 紧随时匹配 x</span><br><span class=\"line\">(?&lt;=y)x 后行断言： x 跟随 y 的情况下匹配 x</span><br><span class=\"line\">(?&lt;!y)x 后行否定断言： x 不跟随 y 时匹配 x</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[xyz][a-c] 匹配包含在方括号中的任何字符</span><br><span class=\"line\">[^xyz][^a-c] 匹配【未】包含在方括号中的任何字符</span><br><span class=\"line\"></span><br><span class=\"line\">. 匹配除行终止符（\\n, \\r, \\u2028或\\u2029）之外的任何单个字符；若 s (&quot;dotAll&quot;) 标志位被设为 true（即加上可选参数s），它也会匹配换行符</span><br><span class=\"line\"></span><br><span class=\"line\">\\d [0-9]</span><br><span class=\"line\">\\D [^0-9]</span><br><span class=\"line\"></span><br><span class=\"line\">\\w [A-Za-z0-9_]</span><br><span class=\"line\">\\W [^A-Za-z0-9_]</span><br><span class=\"line\"></span><br><span class=\"line\">\\s [\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</span><br><span class=\"line\">\\S [^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</span><br><span class=\"line\"></span><br><span class=\"line\">\\t 水平制表符</span><br><span class=\"line\">\\r 回车符</span><br><span class=\"line\">\\n 换行符</span><br><span class=\"line\">\\v 垂直制表符</span><br><span class=\"line\">\\f 换页符</span><br><span class=\"line\">[\\b] 退格键</span><br><span class=\"line\">\\0 匹配一个 NUL 字符；不要在此后面加上另一个数字</span><br><span class=\"line\"></span><br><span class=\"line\">（暂不考究）</span><br><span class=\"line\">\\cX</span><br><span class=\"line\">\\xhh</span><br><span class=\"line\">\\uhhhh</span><br><span class=\"line\">\\u&#123;hhhh&#125;或\\u&#123;hhhhh&#125;</span><br><span class=\"line\">\\p&#123;UnicodeProperty&#125;或\\P&#123;UnicodeProperty&#125;</span><br><span class=\"line\">\\</span><br><span class=\"line\"></span><br><span class=\"line\">x|y 匹配“x”或“y”。每个由管道符 (|) 分隔的部分称为一个可选项</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组和范围\"><a href=\"#组和范围\" class=\"headerlink\" title=\"组和范围\"></a>组和范围</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x|y</span><br><span class=\"line\">[xyz][a-c]</span><br><span class=\"line\">[^xyz][^a-c]</span><br><span class=\"line\">(x)</span><br><span class=\"line\">\\n</span><br><span class=\"line\">(?&lt;Name&gt;x)</span><br><span class=\"line\">(?:x)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 0或多次（贪婪）</span><br><span class=\"line\">+ 1+（贪婪）</span><br><span class=\"line\">? 0次或1次（非贪婪）</span><br><span class=\"line\">&#123;n&#125; n正整数，例：/a&#123;2&#125;/ 匹配“caandy”中的所有“a”，以及“caaandy”中的前两个“a”</span><br><span class=\"line\">&#123;n,&#125; n正整数，至少匹配n次，例：匹配“caandy”和“caaaaaaandy”中的所有 a</span><br><span class=\"line\">&#123;n,m&#125; n自然数，至少匹配n次，至多匹配m次</span><br><span class=\"line\">*? </span><br><span class=\"line\">+?</span><br><span class=\"line\">??</span><br><span class=\"line\">&#123;n&#125;?</span><br><span class=\"line\">&#123;n,&#125;?</span><br><span class=\"line\">&#123;n,m&#125;?</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Unicode属性转义\"><a href=\"#Unicode属性转义\" class=\"headerlink\" title=\"Unicode属性转义\"></a>Unicode属性转义</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p>\n<p><a href=\"https://www.regular-expressions.info/wordboundaries.html\">https://www.regular-expressions.info/wordboundaries.html</a></p>\n<p><a href=\"https://www.pineboat.in/post/regular-expressions-your-ally/\">https://www.pineboat.in/post/regular-expressions-your-ally/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h1><p>例：<code>/a-z/gi</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g 全局搜索</span><br><span class=\"line\">i 不区分大小写</span><br><span class=\"line\">m 多行</span><br><span class=\"line\">s 允许 .匹配</span><br><span class=\"line\">u 使用uniocde码的模式进行匹配</span><br><span class=\"line\">y 粘性搜索，匹配从目标字符串的当前位置开始</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h3 id=\"正则表达式方法\"><a href=\"#正则表达式方法\" class=\"headerlink\" title=\"正则表达式方法\"></a>正则表达式方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec 返回：数组（未匹配到返回null）</span><br><span class=\"line\">/a&#123;1,3&#125;/.exec(&#x27;caaaandy&#x27;)</span><br><span class=\"line\">[&#x27;aaa&#x27;, index: 1, input: &#x27;caaaandy&#x27;, groups: undefined]</span><br><span class=\"line\"></span><br><span class=\"line\">test 返回true或false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match </span><br><span class=\"line\">&#x27;caaaaaandy&#x27;.match(/a&#123;1,3&#125;/)</span><br><span class=\"line\">[&#x27;aaa&#x27;, index: 1, input: &#x27;caaaaaandy&#x27;, groups: undefined]</span><br><span class=\"line\"></span><br><span class=\"line\">matchAll</span><br><span class=\"line\">必须加可选参数g，否则报错String.prototype.matchAll called with a non-global RegExp argument</span><br><span class=\"line\">[...&#x27;caaaaaaandy&#x27;.match(/a&#123;1,3&#125;/g)]</span><br><span class=\"line\">[&#x27;aaa&#x27;, &#x27;aaa&#x27;, &#x27;a&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">search 返回匹配到的位置索引，或者在失败时返回 -1 </span><br><span class=\"line\"></span><br><span class=\"line\">replace  </span><br><span class=\"line\">&#x27;dcaaaaaaandy&#x27;.replace(/a&#123;1,3&#125;/g,&#x27;HH&#x27;)</span><br><span class=\"line\">&#x27;dcHHHHHHndy&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">split</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h1><h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 边界类断言</span><br><span class=\"line\">^ 首</span><br><span class=\"line\">$ 尾</span><br><span class=\"line\"></span><br><span class=\"line\">\\b 匹配字边界的长度为零</span><br><span class=\"line\">\\B 匹配非单词边界(\\b的否定版)</span><br><span class=\"line\">\\b在前，则regExp前要么是字符串开头，要么是空格；反之则为\\B</span><br><span class=\"line\">\\b在后，则regExp后要么是字符串结尾，要么是空格；反之则为\\B</span><br><span class=\"line\"></span><br><span class=\"line\">// 其他断言</span><br><span class=\"line\">x(x?=y) 先行断言： x 被 y 跟随时匹配 x</span><br><span class=\"line\">x(?!y) 先行否定断言： x 没有被 y 紧随时匹配 x</span><br><span class=\"line\">(?&lt;=y)x 后行断言： x 跟随 y 的情况下匹配 x</span><br><span class=\"line\">(?&lt;!y)x 后行否定断言： x 不跟随 y 时匹配 x</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[xyz][a-c] 匹配包含在方括号中的任何字符</span><br><span class=\"line\">[^xyz][^a-c] 匹配【未】包含在方括号中的任何字符</span><br><span class=\"line\"></span><br><span class=\"line\">. 匹配除行终止符（\\n, \\r, \\u2028或\\u2029）之外的任何单个字符；若 s (&quot;dotAll&quot;) 标志位被设为 true（即加上可选参数s），它也会匹配换行符</span><br><span class=\"line\"></span><br><span class=\"line\">\\d [0-9]</span><br><span class=\"line\">\\D [^0-9]</span><br><span class=\"line\"></span><br><span class=\"line\">\\w [A-Za-z0-9_]</span><br><span class=\"line\">\\W [^A-Za-z0-9_]</span><br><span class=\"line\"></span><br><span class=\"line\">\\s [\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</span><br><span class=\"line\">\\S [^\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</span><br><span class=\"line\"></span><br><span class=\"line\">\\t 水平制表符</span><br><span class=\"line\">\\r 回车符</span><br><span class=\"line\">\\n 换行符</span><br><span class=\"line\">\\v 垂直制表符</span><br><span class=\"line\">\\f 换页符</span><br><span class=\"line\">[\\b] 退格键</span><br><span class=\"line\">\\0 匹配一个 NUL 字符；不要在此后面加上另一个数字</span><br><span class=\"line\"></span><br><span class=\"line\">（暂不考究）</span><br><span class=\"line\">\\cX</span><br><span class=\"line\">\\xhh</span><br><span class=\"line\">\\uhhhh</span><br><span class=\"line\">\\u&#123;hhhh&#125;或\\u&#123;hhhhh&#125;</span><br><span class=\"line\">\\p&#123;UnicodeProperty&#125;或\\P&#123;UnicodeProperty&#125;</span><br><span class=\"line\">\\</span><br><span class=\"line\"></span><br><span class=\"line\">x|y 匹配“x”或“y”。每个由管道符 (|) 分隔的部分称为一个可选项</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组和范围\"><a href=\"#组和范围\" class=\"headerlink\" title=\"组和范围\"></a>组和范围</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x|y</span><br><span class=\"line\">[xyz][a-c]</span><br><span class=\"line\">[^xyz][^a-c]</span><br><span class=\"line\">(x)</span><br><span class=\"line\">\\n</span><br><span class=\"line\">(?&lt;Name&gt;x)</span><br><span class=\"line\">(?:x)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 0或多次（贪婪）</span><br><span class=\"line\">+ 1+（贪婪）</span><br><span class=\"line\">? 0次或1次（非贪婪）</span><br><span class=\"line\">&#123;n&#125; n正整数，例：/a&#123;2&#125;/ 匹配“caandy”中的所有“a”，以及“caaandy”中的前两个“a”</span><br><span class=\"line\">&#123;n,&#125; n正整数，至少匹配n次，例：匹配“caandy”和“caaaaaaandy”中的所有 a</span><br><span class=\"line\">&#123;n,m&#125; n自然数，至少匹配n次，至多匹配m次</span><br><span class=\"line\">*? </span><br><span class=\"line\">+?</span><br><span class=\"line\">??</span><br><span class=\"line\">&#123;n&#125;?</span><br><span class=\"line\">&#123;n,&#125;?</span><br><span class=\"line\">&#123;n,m&#125;?</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Unicode属性转义\"><a href=\"#Unicode属性转义\" class=\"headerlink\" title=\"Unicode属性转义\"></a>Unicode属性转义</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p>\n<p><a href=\"https://www.regular-expressions.info/wordboundaries.html\">https://www.regular-expressions.info/wordboundaries.html</a></p>\n<p><a href=\"https://www.pineboat.in/post/regular-expressions-your-ally/\">https://www.pineboat.in/post/regular-expressions-your-ally/</a></p>\n"},{"layout":"layout","title":"浏览器标签/Tab的标题和图标","date":"2023-01-05T06:12:54.000Z","_content":"\n---\n\n## 一、图标\nfavicon.ico只需要放到网站根目录，并不需要添加到程序中，浏览器会直接通过域名调取这个文件\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n</head>\n</html>\n```\n\nrel表示关系relationship，icon是一个网站图标的链接，type属性包含了链接资源的MIME类型\n\n图片格式，type可接受类型：\n* image/png(PNG)\n* image/gif(GIF)\n* image/jpg(JPEG)\n* image/x-icon(ICO)\n* image/svg+xml(SVG)\n\n一个favicon图标必须满足以下要求：\n* 默认名字是：favicon.ico\n* 尺寸大小范围有：16x16，32x32，48x48，64x64，128x128（单位是px）\n* 颜色通道值：8/24/32 bites\n\n更新窗口图标后，浏览器仍不显示，需要清除浏览器缓存刷新网页（ctrl+f5）\n\n参考文档：\n\nhttps://github.com/audreyfeldroy/favicon-cheat-sheet \n\n\n## 二、标题\n```\n<html>\n    <head>\n        <title>文档标题</title>\n    </head>\n</html>\n```\n\n### 动态修改标题\n\n```\ndocument.title = \"新标题\";\ndocument.querySelector('title').textContent = '新标题';\n```\n\n---\n","source":"_posts/浏览器标签-Tab的标题和图标.md","raw":"---\nlayout:\n  - layout\ntitle: 浏览器标签/Tab的标题和图标\ndate: 2023-01-05 14:12:54\ntags:\n---\n\n---\n\n## 一、图标\nfavicon.ico只需要放到网站根目录，并不需要添加到程序中，浏览器会直接通过域名调取这个文件\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n</head>\n</html>\n```\n\nrel表示关系relationship，icon是一个网站图标的链接，type属性包含了链接资源的MIME类型\n\n图片格式，type可接受类型：\n* image/png(PNG)\n* image/gif(GIF)\n* image/jpg(JPEG)\n* image/x-icon(ICO)\n* image/svg+xml(SVG)\n\n一个favicon图标必须满足以下要求：\n* 默认名字是：favicon.ico\n* 尺寸大小范围有：16x16，32x32，48x48，64x64，128x128（单位是px）\n* 颜色通道值：8/24/32 bites\n\n更新窗口图标后，浏览器仍不显示，需要清除浏览器缓存刷新网页（ctrl+f5）\n\n参考文档：\n\nhttps://github.com/audreyfeldroy/favicon-cheat-sheet \n\n\n## 二、标题\n```\n<html>\n    <head>\n        <title>文档标题</title>\n    </head>\n</html>\n```\n\n### 动态修改标题\n\n```\ndocument.title = \"新标题\";\ndocument.querySelector('title').textContent = '新标题';\n```\n\n---\n","slug":"浏览器标签-Tab的标题和图标","published":1,"updated":"2023-01-05T07:11:58.917Z","comments":1,"photos":[],"link":"","_id":"cldwps2j3000oqg3m2xyy3yfs","content":"<hr>\n<h2 id=\"一、图标\"><a href=\"#一、图标\" class=\"headerlink\" title=\"一、图标\"></a>一、图标</h2><p>favicon.ico只需要放到网站根目录，并不需要添加到程序中，浏览器会直接通过域名调取这个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot; /&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>rel表示关系relationship，icon是一个网站图标的链接，type属性包含了链接资源的MIME类型</p>\n<p>图片格式，type可接受类型：</p>\n<ul>\n<li>image/png(PNG)</li>\n<li>image/gif(GIF)</li>\n<li>image/jpg(JPEG)</li>\n<li>image/x-icon(ICO)</li>\n<li>image/svg+xml(SVG)</li>\n</ul>\n<p>一个favicon图标必须满足以下要求：</p>\n<ul>\n<li>默认名字是：favicon.ico</li>\n<li>尺寸大小范围有：16x16，32x32，48x48，64x64，128x128（单位是px）</li>\n<li>颜色通道值：8/24/32 bites</li>\n</ul>\n<p>更新窗口图标后，浏览器仍不显示，需要清除浏览器缓存刷新网页（ctrl+f5）</p>\n<p>参考文档：</p>\n<p><a href=\"https://github.com/audreyfeldroy/favicon-cheat-sheet\">https://github.com/audreyfeldroy/favicon-cheat-sheet</a> </p>\n<h2 id=\"二、标题\"><a href=\"#二、标题\" class=\"headerlink\" title=\"二、标题\"></a>二、标题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;文档标题&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态修改标题\"><a href=\"#动态修改标题\" class=\"headerlink\" title=\"动态修改标题\"></a>动态修改标题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.title = &quot;新标题&quot;;</span><br><span class=\"line\">document.querySelector(&#x27;title&#x27;).textContent = &#x27;新标题&#x27;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"一、图标\"><a href=\"#一、图标\" class=\"headerlink\" title=\"一、图标\"></a>一、图标</h2><p>favicon.ico只需要放到网站根目录，并不需要添加到程序中，浏览器会直接通过域名调取这个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot; /&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>rel表示关系relationship，icon是一个网站图标的链接，type属性包含了链接资源的MIME类型</p>\n<p>图片格式，type可接受类型：</p>\n<ul>\n<li>image/png(PNG)</li>\n<li>image/gif(GIF)</li>\n<li>image/jpg(JPEG)</li>\n<li>image/x-icon(ICO)</li>\n<li>image/svg+xml(SVG)</li>\n</ul>\n<p>一个favicon图标必须满足以下要求：</p>\n<ul>\n<li>默认名字是：favicon.ico</li>\n<li>尺寸大小范围有：16x16，32x32，48x48，64x64，128x128（单位是px）</li>\n<li>颜色通道值：8/24/32 bites</li>\n</ul>\n<p>更新窗口图标后，浏览器仍不显示，需要清除浏览器缓存刷新网页（ctrl+f5）</p>\n<p>参考文档：</p>\n<p><a href=\"https://github.com/audreyfeldroy/favicon-cheat-sheet\">https://github.com/audreyfeldroy/favicon-cheat-sheet</a> </p>\n<h2 id=\"二、标题\"><a href=\"#二、标题\" class=\"headerlink\" title=\"二、标题\"></a>二、标题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;文档标题&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态修改标题\"><a href=\"#动态修改标题\" class=\"headerlink\" title=\"动态修改标题\"></a>动态修改标题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.title = &quot;新标题&quot;;</span><br><span class=\"line\">document.querySelector(&#x27;title&#x27;).textContent = &#x27;新标题&#x27;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"layout":"layout","title":"类型转换","date":"2023-01-13T02:10:06.000Z","_content":"\n---\n\n# 一、结果类型\n\n* String\n* Boolean\n* Number\n\n\n# 二、String(字符串)、Number(数值)和Boolean(布尔)转换\n\n### 1.字符串\n\n除`null`和`undefined`外，所有值都有`toString()`方法，结果与`String()`方法一致\n\n**String**\n```\nString();''\nString({});//'[object Object]'\nString([]);//''\nString(undefined);//'undefined'\nString(null);//'null'\nString(NaN);//'NaN'\nString(Symbol());//'Symbol()'\nString([0]);//'0'\nString([0,1]);//'0,1'\nString(0);//'0'\nString(' ');//' ' 非空串，包含一个空格\n```\n\n**toSting()**\n```\ntoString();//'[object Undefined]'\n\n{}.toString();//Uncaught SyntaxError: Unexpected token '.'\n({}.toString());//'[object Object]'\n\n[].toString();//''\n\n(undefined.toString())或undefined.toString();//Uncaught TypeError: Cannot read properties of undefined (reading 'toString')\n\nnull.toString();//Uncaught TypeError: Cannot read properties of null (reading 'toString')\n\nNaN.toString();//'NaN'\n\nSymbol().toString();//'Symbol()'\n\n[0].toString();//'0'\n\n[0,1].toString();//'0,1'\n\n0.toString();//Uncaught SyntaxError: Invalid or unexpected token\n(0.toString());//Uncaught SyntaxError: Invalid or unexpected token\n\n' '.toString();//' '非空串，包含一个空格\n```\n\n**空串('')+特殊值** \n\n为了更清晰，字符串+任何值=>字符串，实验以下代码\n\n```\n''+0;//'0'\n''+[];//''\n''+{};//'[object Object]'\n''+undefined;//'undefined'\n''+null;//'null'\n''+NaN;//'NaN'\n''+[0];//'0'\n''+[0,1];//'0,1'\n''+Symbol();//Uncaught TypeError: Cannot convert a Symbol value to a string\n```\n\n\n### 2.数值\n\n字符串转换成数值：引擎都会先去除字符串起始和末尾的空白，比如\\n \\t，去除空表后，字符串无法转换成数字时，则返回NaN\n\n**Number,Math.floor,Math.ceil**\n```\nNumber({});//NaN\nNumber(NaN);//NaN\nNumber(undefined);//NaN\nNumber('true');//NaN\nNumber('false');//NaN\nNumber('123id');//NaN\nNumber('id123');//NaN\nNumber([0,1]);//NaN\nNumber([0]);//0\nNumber();//0\nNumber(null);//0\nNumber([]);//0\nNumber('');//0\nNumber(' ');//0 非空串，包含一个空格\nNumber(false);//0\nNumber(true);//1\nNumber(\"-12.34\");// -12.34\nNumber(\"\\n\");// 0\nNumber(Symbol());//Uncaught TypeError: Cannot convert a Symbol value to a number\n```\n\n**+(一元)**\n```\n+{};//NaN\n+NaN;//NaN\n+undefined;//NaN\n+'true';//NaN\n+'123id';//NaN\n+'id123';//NaN\n+[0,1];//NaN\n+[0];//0\n+0;//0\n+null;//0\n+[];//0\n+'';//0\n+' ';//0\n+false;//0\n+true;//1\n```\n\n**parseFloat/parseInt** \n```\nparseInt([0,1]);//0\nparseInt(0);//0\nparseInt(1);//1\nparseInt('123id');//123\nparseInt('id123');//NaN\nparseInt();//NaN\nparseInt({});//NaN\nparseInt([]);//NaN\nparseInt(undefined);//NaN\nparseInt(null);//NaN\nparseInt('true');//NaN\nparseInt('');//NaN\nparseInt(' ');//NaN\nparseInt(false);//NaN\nparseInt(true);//NaN\nparseInt(NaN);//NaN\nparseInt('0x89id');//137\nparseInt('0x89ed');//35309\n```\n***parseInt语法***\nparseInt(string, radix);\nstring：要被解析的值。将参数转换为字符串 (使用 ToString抽象操作)，字符串开头的空白符将会被忽略\nradix：从 2 到 36 的整数，表示进制的基数，超出这个范围，将返回 NaN；假如指定 0 或未指定，基数将会根据字符串的值进行推算（没有默认值，不是10，例0x开头会自动转成8进制）\n\n\n### 3.布尔\n\n* 字符串转布尔值：除了空串('')，其他字符串转换成布尔值都是`true`\n* 数字转布尔值：除了数字0（和非数字NaN），其他数字布尔值为`true`\n* 任何非基本类型值总是转换成`true`\n\n```\nBoolean();//false\nBoolean('');//false\nBoolean(NaN);//false\nBoolean(undefined);//false\nBoolean(null);//false\nBoolean(false);//false\nBoolean(' ');//true\nBoolean('true');//true\nBoolean('false');//true\nBoolean('0');//true\nBoolean(true);//true\nBoolean({});//true\nBoolean([]);//true\nBoolean(Symbol());//true\n```\n\n\n# 三、不严格相等(==)\n\n### 1.转换规则\n\n`==`两边的操作数通常进行数值转换（除以下 ***特殊规则***外）\n\n#### 参考表格\n* ==或!= 特殊值的不严格相等\n[JavaScript-Equality-Table](https://dorey.github.io/JavaScript-Equality-Table/)\n\n* ==或!= 特殊值的不严格相等-图片\n![截图](images/JS-Equality-Table.png)\n\n\n### 2.特殊规则\n\n* `null/undefined`只与`null`和`undefined`等，且==两边操作数不转换成数字\n\n* NaN与任何值都不等，包括自身(==,===均适用)\n\n* 当`==`两个操作数都是字符串时，操作数都 ***不转换*** 为数字\n\n\n# 四、+（加）隐式转换\n\n### 优先级顺序\n\n* 1.操作数都是非基本类型，使用`[ToPrimitive]`转换成基本类型\n\n* 2.其中一个操作数是string（字符串），另一个操作数转换成字符串进行运算\n\n* 3.以上都不是，俩操作数都转成数值进行运算\n\n### 规则\n\n* 运算顺序是从左到右\n\n* 将字面量[]转成空串''\n\n# 五、Symbol\n\n* 1.symbol只能显示转换，不支持隐式转换，隐式转换会报错：TypeError\n\n* 2.symbol无法转换成数字，抛出TypeError错误\n\n\n# 六、对象值\n\n对象值转换成数字或字符串有专用内置属性`[[ToPrimitive]]`\n对象值转换主要使用定义在`Object.prototype`上的`valueOf`和`toString`两种方法\n`==`转换数组为数值时，数组先执行`valueOf()`，返回数组本身，再执行`toString()`，相当于执行数组的`join()`方法，将数组拼接成字符串\n\n运算规则：\n* 1).输入值本就是基本类型，不转换，直接返回；\n* 2).调佣`toString()`方法，结果是基本类型，返回；\n* 3).调用`valueOf()`，结果是基本类型，返回；\n* 4).`toString()`和`valueOf()`都无法得到基本类型值，抛出错误`TypeError`\n\n注：数值先调用`valueOf()`，返回值再调用`toString()`；字符串则相反先`toString()`再`valueOf()`\n数组和对象的`valueOf()`方法返回对象本身，因此被忽略\n大多数内置类型没有`valueOf()`方法，因此转换成数值和转换成字符串最后都是调用`toString()`\n\n\n# 七、运算符(待完善...)\n\n### `-` `*` `/` `%`\n适用`Number`将两操作数转换后得到的结果\n\n### `|` `&` `^` `~` \n\n### `>` `<` `>=` `<=`\n`NaN` , `undefined` 与转换后的值比较都为 `false`\n\n### `{}` 的特殊比较结果\n`{}` 放在操作符第一位最好用括号分组，否则引擎认为 `{}` 是块语句声明，直接忽略，无转换\n`{}` 与`0,1,undefined,NaN,null`比较，`{}`转换成`NaN`，因此与`>,<,>=,<=`比较结果均为`false`\n```\n({}>{});//false\n({}>={});//true\n({}<{});//false\n({}<={});//true\n({}=={});//false\n\n({}>[]);//true [[]]同[]结果\n({}>=[]);//true\n({}<=[]);//false\n({}<[]);//false\n({}==[]);//false\n\n({}>'1');//true '0',''(空串)同'1'一致\n({}>='1');//true\n({}<='1');//false\n({}<'1');//false\n({}=='1');//false\n\n({}>[1]);//true\n({}>=[1]);//true\n({}<=[1]);//false\n({}<[1]);//false\n({}==[1]);//false\n```\n\n### `[]` 特殊结果\n```\n[]>null;//false\n[]>=null;//true\n[]<null;//false\n[]<=null;//true\n[]==null;//false\n```\n\n\n# 参考文献\n\n[MDN:parseInt](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n\n[JavaScript Type Conversions](https://www.programiz.com/javascript/type-conversion)\n\n[JavaScript type coercion explained](https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/)\n\n[JavaScript Type Conversions Explained](https://blog.openreplay.com/javascript-type-conversions-explained/)\n\n---\n","source":"_posts/类型转换.md","raw":"---\nlayout:\n  - layout\ntitle: 类型转换\ndate: 2023-01-13 10:10:06\ntags:\n---\n\n---\n\n# 一、结果类型\n\n* String\n* Boolean\n* Number\n\n\n# 二、String(字符串)、Number(数值)和Boolean(布尔)转换\n\n### 1.字符串\n\n除`null`和`undefined`外，所有值都有`toString()`方法，结果与`String()`方法一致\n\n**String**\n```\nString();''\nString({});//'[object Object]'\nString([]);//''\nString(undefined);//'undefined'\nString(null);//'null'\nString(NaN);//'NaN'\nString(Symbol());//'Symbol()'\nString([0]);//'0'\nString([0,1]);//'0,1'\nString(0);//'0'\nString(' ');//' ' 非空串，包含一个空格\n```\n\n**toSting()**\n```\ntoString();//'[object Undefined]'\n\n{}.toString();//Uncaught SyntaxError: Unexpected token '.'\n({}.toString());//'[object Object]'\n\n[].toString();//''\n\n(undefined.toString())或undefined.toString();//Uncaught TypeError: Cannot read properties of undefined (reading 'toString')\n\nnull.toString();//Uncaught TypeError: Cannot read properties of null (reading 'toString')\n\nNaN.toString();//'NaN'\n\nSymbol().toString();//'Symbol()'\n\n[0].toString();//'0'\n\n[0,1].toString();//'0,1'\n\n0.toString();//Uncaught SyntaxError: Invalid or unexpected token\n(0.toString());//Uncaught SyntaxError: Invalid or unexpected token\n\n' '.toString();//' '非空串，包含一个空格\n```\n\n**空串('')+特殊值** \n\n为了更清晰，字符串+任何值=>字符串，实验以下代码\n\n```\n''+0;//'0'\n''+[];//''\n''+{};//'[object Object]'\n''+undefined;//'undefined'\n''+null;//'null'\n''+NaN;//'NaN'\n''+[0];//'0'\n''+[0,1];//'0,1'\n''+Symbol();//Uncaught TypeError: Cannot convert a Symbol value to a string\n```\n\n\n### 2.数值\n\n字符串转换成数值：引擎都会先去除字符串起始和末尾的空白，比如\\n \\t，去除空表后，字符串无法转换成数字时，则返回NaN\n\n**Number,Math.floor,Math.ceil**\n```\nNumber({});//NaN\nNumber(NaN);//NaN\nNumber(undefined);//NaN\nNumber('true');//NaN\nNumber('false');//NaN\nNumber('123id');//NaN\nNumber('id123');//NaN\nNumber([0,1]);//NaN\nNumber([0]);//0\nNumber();//0\nNumber(null);//0\nNumber([]);//0\nNumber('');//0\nNumber(' ');//0 非空串，包含一个空格\nNumber(false);//0\nNumber(true);//1\nNumber(\"-12.34\");// -12.34\nNumber(\"\\n\");// 0\nNumber(Symbol());//Uncaught TypeError: Cannot convert a Symbol value to a number\n```\n\n**+(一元)**\n```\n+{};//NaN\n+NaN;//NaN\n+undefined;//NaN\n+'true';//NaN\n+'123id';//NaN\n+'id123';//NaN\n+[0,1];//NaN\n+[0];//0\n+0;//0\n+null;//0\n+[];//0\n+'';//0\n+' ';//0\n+false;//0\n+true;//1\n```\n\n**parseFloat/parseInt** \n```\nparseInt([0,1]);//0\nparseInt(0);//0\nparseInt(1);//1\nparseInt('123id');//123\nparseInt('id123');//NaN\nparseInt();//NaN\nparseInt({});//NaN\nparseInt([]);//NaN\nparseInt(undefined);//NaN\nparseInt(null);//NaN\nparseInt('true');//NaN\nparseInt('');//NaN\nparseInt(' ');//NaN\nparseInt(false);//NaN\nparseInt(true);//NaN\nparseInt(NaN);//NaN\nparseInt('0x89id');//137\nparseInt('0x89ed');//35309\n```\n***parseInt语法***\nparseInt(string, radix);\nstring：要被解析的值。将参数转换为字符串 (使用 ToString抽象操作)，字符串开头的空白符将会被忽略\nradix：从 2 到 36 的整数，表示进制的基数，超出这个范围，将返回 NaN；假如指定 0 或未指定，基数将会根据字符串的值进行推算（没有默认值，不是10，例0x开头会自动转成8进制）\n\n\n### 3.布尔\n\n* 字符串转布尔值：除了空串('')，其他字符串转换成布尔值都是`true`\n* 数字转布尔值：除了数字0（和非数字NaN），其他数字布尔值为`true`\n* 任何非基本类型值总是转换成`true`\n\n```\nBoolean();//false\nBoolean('');//false\nBoolean(NaN);//false\nBoolean(undefined);//false\nBoolean(null);//false\nBoolean(false);//false\nBoolean(' ');//true\nBoolean('true');//true\nBoolean('false');//true\nBoolean('0');//true\nBoolean(true);//true\nBoolean({});//true\nBoolean([]);//true\nBoolean(Symbol());//true\n```\n\n\n# 三、不严格相等(==)\n\n### 1.转换规则\n\n`==`两边的操作数通常进行数值转换（除以下 ***特殊规则***外）\n\n#### 参考表格\n* ==或!= 特殊值的不严格相等\n[JavaScript-Equality-Table](https://dorey.github.io/JavaScript-Equality-Table/)\n\n* ==或!= 特殊值的不严格相等-图片\n![截图](images/JS-Equality-Table.png)\n\n\n### 2.特殊规则\n\n* `null/undefined`只与`null`和`undefined`等，且==两边操作数不转换成数字\n\n* NaN与任何值都不等，包括自身(==,===均适用)\n\n* 当`==`两个操作数都是字符串时，操作数都 ***不转换*** 为数字\n\n\n# 四、+（加）隐式转换\n\n### 优先级顺序\n\n* 1.操作数都是非基本类型，使用`[ToPrimitive]`转换成基本类型\n\n* 2.其中一个操作数是string（字符串），另一个操作数转换成字符串进行运算\n\n* 3.以上都不是，俩操作数都转成数值进行运算\n\n### 规则\n\n* 运算顺序是从左到右\n\n* 将字面量[]转成空串''\n\n# 五、Symbol\n\n* 1.symbol只能显示转换，不支持隐式转换，隐式转换会报错：TypeError\n\n* 2.symbol无法转换成数字，抛出TypeError错误\n\n\n# 六、对象值\n\n对象值转换成数字或字符串有专用内置属性`[[ToPrimitive]]`\n对象值转换主要使用定义在`Object.prototype`上的`valueOf`和`toString`两种方法\n`==`转换数组为数值时，数组先执行`valueOf()`，返回数组本身，再执行`toString()`，相当于执行数组的`join()`方法，将数组拼接成字符串\n\n运算规则：\n* 1).输入值本就是基本类型，不转换，直接返回；\n* 2).调佣`toString()`方法，结果是基本类型，返回；\n* 3).调用`valueOf()`，结果是基本类型，返回；\n* 4).`toString()`和`valueOf()`都无法得到基本类型值，抛出错误`TypeError`\n\n注：数值先调用`valueOf()`，返回值再调用`toString()`；字符串则相反先`toString()`再`valueOf()`\n数组和对象的`valueOf()`方法返回对象本身，因此被忽略\n大多数内置类型没有`valueOf()`方法，因此转换成数值和转换成字符串最后都是调用`toString()`\n\n\n# 七、运算符(待完善...)\n\n### `-` `*` `/` `%`\n适用`Number`将两操作数转换后得到的结果\n\n### `|` `&` `^` `~` \n\n### `>` `<` `>=` `<=`\n`NaN` , `undefined` 与转换后的值比较都为 `false`\n\n### `{}` 的特殊比较结果\n`{}` 放在操作符第一位最好用括号分组，否则引擎认为 `{}` 是块语句声明，直接忽略，无转换\n`{}` 与`0,1,undefined,NaN,null`比较，`{}`转换成`NaN`，因此与`>,<,>=,<=`比较结果均为`false`\n```\n({}>{});//false\n({}>={});//true\n({}<{});//false\n({}<={});//true\n({}=={});//false\n\n({}>[]);//true [[]]同[]结果\n({}>=[]);//true\n({}<=[]);//false\n({}<[]);//false\n({}==[]);//false\n\n({}>'1');//true '0',''(空串)同'1'一致\n({}>='1');//true\n({}<='1');//false\n({}<'1');//false\n({}=='1');//false\n\n({}>[1]);//true\n({}>=[1]);//true\n({}<=[1]);//false\n({}<[1]);//false\n({}==[1]);//false\n```\n\n### `[]` 特殊结果\n```\n[]>null;//false\n[]>=null;//true\n[]<null;//false\n[]<=null;//true\n[]==null;//false\n```\n\n\n# 参考文献\n\n[MDN:parseInt](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n\n[JavaScript Type Conversions](https://www.programiz.com/javascript/type-conversion)\n\n[JavaScript type coercion explained](https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/)\n\n[JavaScript Type Conversions Explained](https://blog.openreplay.com/javascript-type-conversions-explained/)\n\n---\n","slug":"类型转换","published":1,"updated":"2023-01-13T12:48:18.811Z","comments":1,"photos":[],"link":"","_id":"cldwps2j3000qqg3mhyr55epm","content":"<hr>\n<h1 id=\"一、结果类型\"><a href=\"#一、结果类型\" class=\"headerlink\" title=\"一、结果类型\"></a>一、结果类型</h1><ul>\n<li>String</li>\n<li>Boolean</li>\n<li>Number</li>\n</ul>\n<h1 id=\"二、String-字符串-、Number-数值-和Boolean-布尔-转换\"><a href=\"#二、String-字符串-、Number-数值-和Boolean-布尔-转换\" class=\"headerlink\" title=\"二、String(字符串)、Number(数值)和Boolean(布尔)转换\"></a>二、String(字符串)、Number(数值)和Boolean(布尔)转换</h1><h3 id=\"1-字符串\"><a href=\"#1-字符串\" class=\"headerlink\" title=\"1.字符串\"></a>1.字符串</h3><p>除<code>null</code>和<code>undefined</code>外，所有值都有<code>toString()</code>方法，结果与<code>String()</code>方法一致</p>\n<p><strong>String</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String();&#x27;&#x27;</span><br><span class=\"line\">String(&#123;&#125;);//&#x27;[object Object]&#x27;</span><br><span class=\"line\">String([]);//&#x27;&#x27;</span><br><span class=\"line\">String(undefined);//&#x27;undefined&#x27;</span><br><span class=\"line\">String(null);//&#x27;null&#x27;</span><br><span class=\"line\">String(NaN);//&#x27;NaN&#x27;</span><br><span class=\"line\">String(Symbol());//&#x27;Symbol()&#x27;</span><br><span class=\"line\">String([0]);//&#x27;0&#x27;</span><br><span class=\"line\">String([0,1]);//&#x27;0,1&#x27;</span><br><span class=\"line\">String(0);//&#x27;0&#x27;</span><br><span class=\"line\">String(&#x27; &#x27;);//&#x27; &#x27; 非空串，包含一个空格</span><br></pre></td></tr></table></figure>\n\n<p><strong>toSting()</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toString();//&#x27;[object Undefined]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;.toString();//Uncaught SyntaxError: Unexpected token &#x27;.&#x27;</span><br><span class=\"line\">(&#123;&#125;.toString());//&#x27;[object Object]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[].toString();//&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">(undefined.toString())或undefined.toString();//Uncaught TypeError: Cannot read properties of undefined (reading &#x27;toString&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">null.toString();//Uncaught TypeError: Cannot read properties of null (reading &#x27;toString&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">NaN.toString();//&#x27;NaN&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol().toString();//&#x27;Symbol()&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[0].toString();//&#x27;0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[0,1].toString();//&#x27;0,1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">0.toString();//Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\">(0.toString());//Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27; &#x27;.toString();//&#x27; &#x27;非空串，包含一个空格</span><br></pre></td></tr></table></figure>\n\n<p><strong>空串(‘’)+特殊值</strong> </p>\n<p>为了更清晰，字符串+任何值=&gt;字符串，实验以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&#x27;+0;//&#x27;0&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[];//&#x27;&#x27;</span><br><span class=\"line\">&#x27;&#x27;+&#123;&#125;;//&#x27;[object Object]&#x27;</span><br><span class=\"line\">&#x27;&#x27;+undefined;//&#x27;undefined&#x27;</span><br><span class=\"line\">&#x27;&#x27;+null;//&#x27;null&#x27;</span><br><span class=\"line\">&#x27;&#x27;+NaN;//&#x27;NaN&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[0];//&#x27;0&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[0,1];//&#x27;0,1&#x27;</span><br><span class=\"line\">&#x27;&#x27;+Symbol();//Uncaught TypeError: Cannot convert a Symbol value to a string</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-数值\"><a href=\"#2-数值\" class=\"headerlink\" title=\"2.数值\"></a>2.数值</h3><p>字符串转换成数值：引擎都会先去除字符串起始和末尾的空白，比如\\n \\t，去除空表后，字符串无法转换成数字时，则返回NaN</p>\n<p><strong>Number,Math.floor,Math.ceil</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number(&#123;&#125;);//NaN</span><br><span class=\"line\">Number(NaN);//NaN</span><br><span class=\"line\">Number(undefined);//NaN</span><br><span class=\"line\">Number(&#x27;true&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;false&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;123id&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;id123&#x27;);//NaN</span><br><span class=\"line\">Number([0,1]);//NaN</span><br><span class=\"line\">Number([0]);//0</span><br><span class=\"line\">Number();//0</span><br><span class=\"line\">Number(null);//0</span><br><span class=\"line\">Number([]);//0</span><br><span class=\"line\">Number(&#x27;&#x27;);//0</span><br><span class=\"line\">Number(&#x27; &#x27;);//0 非空串，包含一个空格</span><br><span class=\"line\">Number(false);//0</span><br><span class=\"line\">Number(true);//1</span><br><span class=\"line\">Number(&quot;-12.34&quot;);// -12.34</span><br><span class=\"line\">Number(&quot;\\n&quot;);// 0</span><br><span class=\"line\">Number(Symbol());//Uncaught TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></table></figure>\n\n<p><strong>+(一元)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&#123;&#125;;//NaN</span><br><span class=\"line\">+NaN;//NaN</span><br><span class=\"line\">+undefined;//NaN</span><br><span class=\"line\">+&#x27;true&#x27;;//NaN</span><br><span class=\"line\">+&#x27;123id&#x27;;//NaN</span><br><span class=\"line\">+&#x27;id123&#x27;;//NaN</span><br><span class=\"line\">+[0,1];//NaN</span><br><span class=\"line\">+[0];//0</span><br><span class=\"line\">+0;//0</span><br><span class=\"line\">+null;//0</span><br><span class=\"line\">+[];//0</span><br><span class=\"line\">+&#x27;&#x27;;//0</span><br><span class=\"line\">+&#x27; &#x27;;//0</span><br><span class=\"line\">+false;//0</span><br><span class=\"line\">+true;//1</span><br></pre></td></tr></table></figure>\n\n<p><strong>parseFloat/parseInt</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt([0,1]);//0</span><br><span class=\"line\">parseInt(0);//0</span><br><span class=\"line\">parseInt(1);//1</span><br><span class=\"line\">parseInt(&#x27;123id&#x27;);//123</span><br><span class=\"line\">parseInt(&#x27;id123&#x27;);//NaN</span><br><span class=\"line\">parseInt();//NaN</span><br><span class=\"line\">parseInt(&#123;&#125;);//NaN</span><br><span class=\"line\">parseInt([]);//NaN</span><br><span class=\"line\">parseInt(undefined);//NaN</span><br><span class=\"line\">parseInt(null);//NaN</span><br><span class=\"line\">parseInt(&#x27;true&#x27;);//NaN</span><br><span class=\"line\">parseInt(&#x27;&#x27;);//NaN</span><br><span class=\"line\">parseInt(&#x27; &#x27;);//NaN</span><br><span class=\"line\">parseInt(false);//NaN</span><br><span class=\"line\">parseInt(true);//NaN</span><br><span class=\"line\">parseInt(NaN);//NaN</span><br><span class=\"line\">parseInt(&#x27;0x89id&#x27;);//137</span><br><span class=\"line\">parseInt(&#x27;0x89ed&#x27;);//35309</span><br></pre></td></tr></table></figure>\n<p><em><strong>parseInt语法</strong></em><br>parseInt(string, radix);<br>string：要被解析的值。将参数转换为字符串 (使用 ToString抽象操作)，字符串开头的空白符将会被忽略<br>radix：从 2 到 36 的整数，表示进制的基数，超出这个范围，将返回 NaN；假如指定 0 或未指定，基数将会根据字符串的值进行推算（没有默认值，不是10，例0x开头会自动转成8进制）</p>\n<h3 id=\"3-布尔\"><a href=\"#3-布尔\" class=\"headerlink\" title=\"3.布尔\"></a>3.布尔</h3><ul>\n<li>字符串转布尔值：除了空串(‘’)，其他字符串转换成布尔值都是<code>true</code></li>\n<li>数字转布尔值：除了数字0（和非数字NaN），其他数字布尔值为<code>true</code></li>\n<li>任何非基本类型值总是转换成<code>true</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean();//false</span><br><span class=\"line\">Boolean(&#x27;&#x27;);//false</span><br><span class=\"line\">Boolean(NaN);//false</span><br><span class=\"line\">Boolean(undefined);//false</span><br><span class=\"line\">Boolean(null);//false</span><br><span class=\"line\">Boolean(false);//false</span><br><span class=\"line\">Boolean(&#x27; &#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;true&#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;false&#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;0&#x27;);//true</span><br><span class=\"line\">Boolean(true);//true</span><br><span class=\"line\">Boolean(&#123;&#125;);//true</span><br><span class=\"line\">Boolean([]);//true</span><br><span class=\"line\">Boolean(Symbol());//true</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"三、不严格相等\"><a href=\"#三、不严格相等\" class=\"headerlink\" title=\"三、不严格相等(==)\"></a>三、不严格相等(==)</h1><h3 id=\"1-转换规则\"><a href=\"#1-转换规则\" class=\"headerlink\" title=\"1.转换规则\"></a>1.转换规则</h3><p><code>==</code>两边的操作数通常进行数值转换（除以下 <em><strong>特殊规则</strong></em>外）</p>\n<h4 id=\"参考表格\"><a href=\"#参考表格\" class=\"headerlink\" title=\"参考表格\"></a>参考表格</h4><ul>\n<li><p>==或!= 特殊值的不严格相等<br><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">JavaScript-Equality-Table</a></p>\n</li>\n<li><p>==或!= 特殊值的不严格相等-图片<br><img src=\"/images/JS-Equality-Table.png\" alt=\"截图\"></p>\n</li>\n</ul>\n<h3 id=\"2-特殊规则\"><a href=\"#2-特殊规则\" class=\"headerlink\" title=\"2.特殊规则\"></a>2.特殊规则</h3><ul>\n<li><p><code>null/undefined</code>只与<code>null</code>和<code>undefined</code>等，且==两边操作数不转换成数字</p>\n</li>\n<li><p>NaN与任何值都不等，包括自身(==,===均适用)</p>\n</li>\n<li><p>当<code>==</code>两个操作数都是字符串时，操作数都 <em><strong>不转换</strong></em> 为数字</p>\n</li>\n</ul>\n<h1 id=\"四、-（加）隐式转换\"><a href=\"#四、-（加）隐式转换\" class=\"headerlink\" title=\"四、+（加）隐式转换\"></a>四、+（加）隐式转换</h1><h3 id=\"优先级顺序\"><a href=\"#优先级顺序\" class=\"headerlink\" title=\"优先级顺序\"></a>优先级顺序</h3><ul>\n<li><p>1.操作数都是非基本类型，使用<code>[ToPrimitive]</code>转换成基本类型</p>\n</li>\n<li><p>2.其中一个操作数是string（字符串），另一个操作数转换成字符串进行运算</p>\n</li>\n<li><p>3.以上都不是，俩操作数都转成数值进行运算</p>\n</li>\n</ul>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ul>\n<li><p>运算顺序是从左到右</p>\n</li>\n<li><p>将字面量[]转成空串’’</p>\n</li>\n</ul>\n<h1 id=\"五、Symbol\"><a href=\"#五、Symbol\" class=\"headerlink\" title=\"五、Symbol\"></a>五、Symbol</h1><ul>\n<li><p>1.symbol只能显示转换，不支持隐式转换，隐式转换会报错：TypeError</p>\n</li>\n<li><p>2.symbol无法转换成数字，抛出TypeError错误</p>\n</li>\n</ul>\n<h1 id=\"六、对象值\"><a href=\"#六、对象值\" class=\"headerlink\" title=\"六、对象值\"></a>六、对象值</h1><p>对象值转换成数字或字符串有专用内置属性<code>[[ToPrimitive]]</code><br>对象值转换主要使用定义在<code>Object.prototype</code>上的<code>valueOf</code>和<code>toString</code>两种方法<br><code>==</code>转换数组为数值时，数组先执行<code>valueOf()</code>，返回数组本身，再执行<code>toString()</code>，相当于执行数组的<code>join()</code>方法，将数组拼接成字符串</p>\n<p>运算规则：</p>\n<ul>\n<li>1).输入值本就是基本类型，不转换，直接返回；</li>\n<li>2).调佣<code>toString()</code>方法，结果是基本类型，返回；</li>\n<li>3).调用<code>valueOf()</code>，结果是基本类型，返回；</li>\n<li>4).<code>toString()</code>和<code>valueOf()</code>都无法得到基本类型值，抛出错误<code>TypeError</code></li>\n</ul>\n<p>注：数值先调用<code>valueOf()</code>，返回值再调用<code>toString()</code>；字符串则相反先<code>toString()</code>再<code>valueOf()</code><br>数组和对象的<code>valueOf()</code>方法返回对象本身，因此被忽略<br>大多数内置类型没有<code>valueOf()</code>方法，因此转换成数值和转换成字符串最后都是调用<code>toString()</code></p>\n<h1 id=\"七、运算符-待完善…\"><a href=\"#七、运算符-待完善…\" class=\"headerlink\" title=\"七、运算符(待完善…)\"></a>七、运算符(待完善…)</h1><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"- * / %\"></a><code>-</code> <code>*</code> <code>/</code> <code>%</code></h3><p>适用<code>Number</code>将两操作数转换后得到的结果</p>\n<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"| &amp; ^ ~\"></a><code>|</code> <code>&amp;</code> <code>^</code> <code>~</code></h3><h3 id=\"gt-lt-gt-lt\"><a href=\"#gt-lt-gt-lt\" class=\"headerlink\" title=\"&gt; &lt; &gt;= &lt;=\"></a><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code></h3><p><code>NaN</code> , <code>undefined</code> 与转换后的值比较都为 <code>false</code></p>\n<h3 id=\"的特殊比较结果\"><a href=\"#的特殊比较结果\" class=\"headerlink\" title=\"{} 的特殊比较结果\"></a><code>&#123;&#125;</code> 的特殊比较结果</h3><p><code>&#123;&#125;</code> 放在操作符第一位最好用括号分组，否则引擎认为 <code>&#123;&#125;</code> 是块语句声明，直接忽略，无转换<br><code>&#123;&#125;</code> 与<code>0,1,undefined,NaN,null</code>比较，<code>&#123;&#125;</code>转换成<code>NaN</code>，因此与<code>&gt;,&lt;,&gt;=,&lt;=</code>比较结果均为<code>false</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123;&#125;&gt;&#123;&#125;);//false</span><br><span class=\"line\">(&#123;&#125;&gt;=&#123;&#125;);//true</span><br><span class=\"line\">(&#123;&#125;&lt;&#123;&#125;);//false</span><br><span class=\"line\">(&#123;&#125;&lt;=&#123;&#125;);//true</span><br><span class=\"line\">(&#123;&#125;==&#123;&#125;);//false</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;&#125;&gt;[]);//true [[]]同[]结果</span><br><span class=\"line\">(&#123;&#125;&gt;=[]);//true</span><br><span class=\"line\">(&#123;&#125;&lt;=[]);//false</span><br><span class=\"line\">(&#123;&#125;&lt;[]);//false</span><br><span class=\"line\">(&#123;&#125;==[]);//false</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;&#125;&gt;&#x27;1&#x27;);//true &#x27;0&#x27;,&#x27;&#x27;(空串)同&#x27;1&#x27;一致</span><br><span class=\"line\">(&#123;&#125;&gt;=&#x27;1&#x27;);//true</span><br><span class=\"line\">(&#123;&#125;&lt;=&#x27;1&#x27;);//false</span><br><span class=\"line\">(&#123;&#125;&lt;&#x27;1&#x27;);//false</span><br><span class=\"line\">(&#123;&#125;==&#x27;1&#x27;);//false</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;&#125;&gt;[1]);//true</span><br><span class=\"line\">(&#123;&#125;&gt;=[1]);//true</span><br><span class=\"line\">(&#123;&#125;&lt;=[1]);//false</span><br><span class=\"line\">(&#123;&#125;&lt;[1]);//false</span><br><span class=\"line\">(&#123;&#125;==[1]);//false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特殊结果\"><a href=\"#特殊结果\" class=\"headerlink\" title=\"[] 特殊结果\"></a><code>[]</code> 特殊结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]&gt;null;//false</span><br><span class=\"line\">[]&gt;=null;//true</span><br><span class=\"line\">[]&lt;null;//false</span><br><span class=\"line\">[]&lt;=null;//true</span><br><span class=\"line\">[]==null;//false</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">MDN:parseInt</a></p>\n<p><a href=\"https://www.programiz.com/javascript/type-conversion\">JavaScript Type Conversions</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/\">JavaScript type coercion explained</a></p>\n<p><a href=\"https://blog.openreplay.com/javascript-type-conversions-explained/\">JavaScript Type Conversions Explained</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"一、结果类型\"><a href=\"#一、结果类型\" class=\"headerlink\" title=\"一、结果类型\"></a>一、结果类型</h1><ul>\n<li>String</li>\n<li>Boolean</li>\n<li>Number</li>\n</ul>\n<h1 id=\"二、String-字符串-、Number-数值-和Boolean-布尔-转换\"><a href=\"#二、String-字符串-、Number-数值-和Boolean-布尔-转换\" class=\"headerlink\" title=\"二、String(字符串)、Number(数值)和Boolean(布尔)转换\"></a>二、String(字符串)、Number(数值)和Boolean(布尔)转换</h1><h3 id=\"1-字符串\"><a href=\"#1-字符串\" class=\"headerlink\" title=\"1.字符串\"></a>1.字符串</h3><p>除<code>null</code>和<code>undefined</code>外，所有值都有<code>toString()</code>方法，结果与<code>String()</code>方法一致</p>\n<p><strong>String</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String();&#x27;&#x27;</span><br><span class=\"line\">String(&#123;&#125;);//&#x27;[object Object]&#x27;</span><br><span class=\"line\">String([]);//&#x27;&#x27;</span><br><span class=\"line\">String(undefined);//&#x27;undefined&#x27;</span><br><span class=\"line\">String(null);//&#x27;null&#x27;</span><br><span class=\"line\">String(NaN);//&#x27;NaN&#x27;</span><br><span class=\"line\">String(Symbol());//&#x27;Symbol()&#x27;</span><br><span class=\"line\">String([0]);//&#x27;0&#x27;</span><br><span class=\"line\">String([0,1]);//&#x27;0,1&#x27;</span><br><span class=\"line\">String(0);//&#x27;0&#x27;</span><br><span class=\"line\">String(&#x27; &#x27;);//&#x27; &#x27; 非空串，包含一个空格</span><br></pre></td></tr></table></figure>\n\n<p><strong>toSting()</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toString();//&#x27;[object Undefined]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;.toString();//Uncaught SyntaxError: Unexpected token &#x27;.&#x27;</span><br><span class=\"line\">(&#123;&#125;.toString());//&#x27;[object Object]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[].toString();//&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">(undefined.toString())或undefined.toString();//Uncaught TypeError: Cannot read properties of undefined (reading &#x27;toString&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">null.toString();//Uncaught TypeError: Cannot read properties of null (reading &#x27;toString&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">NaN.toString();//&#x27;NaN&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol().toString();//&#x27;Symbol()&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[0].toString();//&#x27;0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[0,1].toString();//&#x27;0,1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">0.toString();//Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\">(0.toString());//Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27; &#x27;.toString();//&#x27; &#x27;非空串，包含一个空格</span><br></pre></td></tr></table></figure>\n\n<p><strong>空串(‘’)+特殊值</strong> </p>\n<p>为了更清晰，字符串+任何值=&gt;字符串，实验以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&#x27;+0;//&#x27;0&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[];//&#x27;&#x27;</span><br><span class=\"line\">&#x27;&#x27;+&#123;&#125;;//&#x27;[object Object]&#x27;</span><br><span class=\"line\">&#x27;&#x27;+undefined;//&#x27;undefined&#x27;</span><br><span class=\"line\">&#x27;&#x27;+null;//&#x27;null&#x27;</span><br><span class=\"line\">&#x27;&#x27;+NaN;//&#x27;NaN&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[0];//&#x27;0&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[0,1];//&#x27;0,1&#x27;</span><br><span class=\"line\">&#x27;&#x27;+Symbol();//Uncaught TypeError: Cannot convert a Symbol value to a string</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-数值\"><a href=\"#2-数值\" class=\"headerlink\" title=\"2.数值\"></a>2.数值</h3><p>字符串转换成数值：引擎都会先去除字符串起始和末尾的空白，比如\\n \\t，去除空表后，字符串无法转换成数字时，则返回NaN</p>\n<p><strong>Number,Math.floor,Math.ceil</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number(&#123;&#125;);//NaN</span><br><span class=\"line\">Number(NaN);//NaN</span><br><span class=\"line\">Number(undefined);//NaN</span><br><span class=\"line\">Number(&#x27;true&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;false&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;123id&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;id123&#x27;);//NaN</span><br><span class=\"line\">Number([0,1]);//NaN</span><br><span class=\"line\">Number([0]);//0</span><br><span class=\"line\">Number();//0</span><br><span class=\"line\">Number(null);//0</span><br><span class=\"line\">Number([]);//0</span><br><span class=\"line\">Number(&#x27;&#x27;);//0</span><br><span class=\"line\">Number(&#x27; &#x27;);//0 非空串，包含一个空格</span><br><span class=\"line\">Number(false);//0</span><br><span class=\"line\">Number(true);//1</span><br><span class=\"line\">Number(&quot;-12.34&quot;);// -12.34</span><br><span class=\"line\">Number(&quot;\\n&quot;);// 0</span><br><span class=\"line\">Number(Symbol());//Uncaught TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></table></figure>\n\n<p><strong>+(一元)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&#123;&#125;;//NaN</span><br><span class=\"line\">+NaN;//NaN</span><br><span class=\"line\">+undefined;//NaN</span><br><span class=\"line\">+&#x27;true&#x27;;//NaN</span><br><span class=\"line\">+&#x27;123id&#x27;;//NaN</span><br><span class=\"line\">+&#x27;id123&#x27;;//NaN</span><br><span class=\"line\">+[0,1];//NaN</span><br><span class=\"line\">+[0];//0</span><br><span class=\"line\">+0;//0</span><br><span class=\"line\">+null;//0</span><br><span class=\"line\">+[];//0</span><br><span class=\"line\">+&#x27;&#x27;;//0</span><br><span class=\"line\">+&#x27; &#x27;;//0</span><br><span class=\"line\">+false;//0</span><br><span class=\"line\">+true;//1</span><br></pre></td></tr></table></figure>\n\n<p><strong>parseFloat/parseInt</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt([0,1]);//0</span><br><span class=\"line\">parseInt(0);//0</span><br><span class=\"line\">parseInt(1);//1</span><br><span class=\"line\">parseInt(&#x27;123id&#x27;);//123</span><br><span class=\"line\">parseInt(&#x27;id123&#x27;);//NaN</span><br><span class=\"line\">parseInt();//NaN</span><br><span class=\"line\">parseInt(&#123;&#125;);//NaN</span><br><span class=\"line\">parseInt([]);//NaN</span><br><span class=\"line\">parseInt(undefined);//NaN</span><br><span class=\"line\">parseInt(null);//NaN</span><br><span class=\"line\">parseInt(&#x27;true&#x27;);//NaN</span><br><span class=\"line\">parseInt(&#x27;&#x27;);//NaN</span><br><span class=\"line\">parseInt(&#x27; &#x27;);//NaN</span><br><span class=\"line\">parseInt(false);//NaN</span><br><span class=\"line\">parseInt(true);//NaN</span><br><span class=\"line\">parseInt(NaN);//NaN</span><br><span class=\"line\">parseInt(&#x27;0x89id&#x27;);//137</span><br><span class=\"line\">parseInt(&#x27;0x89ed&#x27;);//35309</span><br></pre></td></tr></table></figure>\n<p><em><strong>parseInt语法</strong></em><br>parseInt(string, radix);<br>string：要被解析的值。将参数转换为字符串 (使用 ToString抽象操作)，字符串开头的空白符将会被忽略<br>radix：从 2 到 36 的整数，表示进制的基数，超出这个范围，将返回 NaN；假如指定 0 或未指定，基数将会根据字符串的值进行推算（没有默认值，不是10，例0x开头会自动转成8进制）</p>\n<h3 id=\"3-布尔\"><a href=\"#3-布尔\" class=\"headerlink\" title=\"3.布尔\"></a>3.布尔</h3><ul>\n<li>字符串转布尔值：除了空串(‘’)，其他字符串转换成布尔值都是<code>true</code></li>\n<li>数字转布尔值：除了数字0（和非数字NaN），其他数字布尔值为<code>true</code></li>\n<li>任何非基本类型值总是转换成<code>true</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean();//false</span><br><span class=\"line\">Boolean(&#x27;&#x27;);//false</span><br><span class=\"line\">Boolean(NaN);//false</span><br><span class=\"line\">Boolean(undefined);//false</span><br><span class=\"line\">Boolean(null);//false</span><br><span class=\"line\">Boolean(false);//false</span><br><span class=\"line\">Boolean(&#x27; &#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;true&#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;false&#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;0&#x27;);//true</span><br><span class=\"line\">Boolean(true);//true</span><br><span class=\"line\">Boolean(&#123;&#125;);//true</span><br><span class=\"line\">Boolean([]);//true</span><br><span class=\"line\">Boolean(Symbol());//true</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"三、不严格相等\"><a href=\"#三、不严格相等\" class=\"headerlink\" title=\"三、不严格相等(==)\"></a>三、不严格相等(==)</h1><h3 id=\"1-转换规则\"><a href=\"#1-转换规则\" class=\"headerlink\" title=\"1.转换规则\"></a>1.转换规则</h3><p><code>==</code>两边的操作数通常进行数值转换（除以下 <em><strong>特殊规则</strong></em>外）</p>\n<h4 id=\"参考表格\"><a href=\"#参考表格\" class=\"headerlink\" title=\"参考表格\"></a>参考表格</h4><ul>\n<li><p>==或!= 特殊值的不严格相等<br><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">JavaScript-Equality-Table</a></p>\n</li>\n<li><p>==或!= 特殊值的不严格相等-图片<br><img src=\"/images/JS-Equality-Table.png\" alt=\"截图\"></p>\n</li>\n</ul>\n<h3 id=\"2-特殊规则\"><a href=\"#2-特殊规则\" class=\"headerlink\" title=\"2.特殊规则\"></a>2.特殊规则</h3><ul>\n<li><p><code>null/undefined</code>只与<code>null</code>和<code>undefined</code>等，且==两边操作数不转换成数字</p>\n</li>\n<li><p>NaN与任何值都不等，包括自身(==,===均适用)</p>\n</li>\n<li><p>当<code>==</code>两个操作数都是字符串时，操作数都 <em><strong>不转换</strong></em> 为数字</p>\n</li>\n</ul>\n<h1 id=\"四、-（加）隐式转换\"><a href=\"#四、-（加）隐式转换\" class=\"headerlink\" title=\"四、+（加）隐式转换\"></a>四、+（加）隐式转换</h1><h3 id=\"优先级顺序\"><a href=\"#优先级顺序\" class=\"headerlink\" title=\"优先级顺序\"></a>优先级顺序</h3><ul>\n<li><p>1.操作数都是非基本类型，使用<code>[ToPrimitive]</code>转换成基本类型</p>\n</li>\n<li><p>2.其中一个操作数是string（字符串），另一个操作数转换成字符串进行运算</p>\n</li>\n<li><p>3.以上都不是，俩操作数都转成数值进行运算</p>\n</li>\n</ul>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ul>\n<li><p>运算顺序是从左到右</p>\n</li>\n<li><p>将字面量[]转成空串’’</p>\n</li>\n</ul>\n<h1 id=\"五、Symbol\"><a href=\"#五、Symbol\" class=\"headerlink\" title=\"五、Symbol\"></a>五、Symbol</h1><ul>\n<li><p>1.symbol只能显示转换，不支持隐式转换，隐式转换会报错：TypeError</p>\n</li>\n<li><p>2.symbol无法转换成数字，抛出TypeError错误</p>\n</li>\n</ul>\n<h1 id=\"六、对象值\"><a href=\"#六、对象值\" class=\"headerlink\" title=\"六、对象值\"></a>六、对象值</h1><p>对象值转换成数字或字符串有专用内置属性<code>[[ToPrimitive]]</code><br>对象值转换主要使用定义在<code>Object.prototype</code>上的<code>valueOf</code>和<code>toString</code>两种方法<br><code>==</code>转换数组为数值时，数组先执行<code>valueOf()</code>，返回数组本身，再执行<code>toString()</code>，相当于执行数组的<code>join()</code>方法，将数组拼接成字符串</p>\n<p>运算规则：</p>\n<ul>\n<li>1).输入值本就是基本类型，不转换，直接返回；</li>\n<li>2).调佣<code>toString()</code>方法，结果是基本类型，返回；</li>\n<li>3).调用<code>valueOf()</code>，结果是基本类型，返回；</li>\n<li>4).<code>toString()</code>和<code>valueOf()</code>都无法得到基本类型值，抛出错误<code>TypeError</code></li>\n</ul>\n<p>注：数值先调用<code>valueOf()</code>，返回值再调用<code>toString()</code>；字符串则相反先<code>toString()</code>再<code>valueOf()</code><br>数组和对象的<code>valueOf()</code>方法返回对象本身，因此被忽略<br>大多数内置类型没有<code>valueOf()</code>方法，因此转换成数值和转换成字符串最后都是调用<code>toString()</code></p>\n<h1 id=\"七、运算符-待完善…\"><a href=\"#七、运算符-待完善…\" class=\"headerlink\" title=\"七、运算符(待完善…)\"></a>七、运算符(待完善…)</h1><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"- * / %\"></a><code>-</code> <code>*</code> <code>/</code> <code>%</code></h3><p>适用<code>Number</code>将两操作数转换后得到的结果</p>\n<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"| &amp; ^ ~\"></a><code>|</code> <code>&amp;</code> <code>^</code> <code>~</code></h3><h3 id=\"gt-lt-gt-lt\"><a href=\"#gt-lt-gt-lt\" class=\"headerlink\" title=\"&gt; &lt; &gt;= &lt;=\"></a><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code></h3><p><code>NaN</code> , <code>undefined</code> 与转换后的值比较都为 <code>false</code></p>\n<h3 id=\"的特殊比较结果\"><a href=\"#的特殊比较结果\" class=\"headerlink\" title=\"{} 的特殊比较结果\"></a><code>&#123;&#125;</code> 的特殊比较结果</h3><p><code>&#123;&#125;</code> 放在操作符第一位最好用括号分组，否则引擎认为 <code>&#123;&#125;</code> 是块语句声明，直接忽略，无转换<br><code>&#123;&#125;</code> 与<code>0,1,undefined,NaN,null</code>比较，<code>&#123;&#125;</code>转换成<code>NaN</code>，因此与<code>&gt;,&lt;,&gt;=,&lt;=</code>比较结果均为<code>false</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123;&#125;&gt;&#123;&#125;);//false</span><br><span class=\"line\">(&#123;&#125;&gt;=&#123;&#125;);//true</span><br><span class=\"line\">(&#123;&#125;&lt;&#123;&#125;);//false</span><br><span class=\"line\">(&#123;&#125;&lt;=&#123;&#125;);//true</span><br><span class=\"line\">(&#123;&#125;==&#123;&#125;);//false</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;&#125;&gt;[]);//true [[]]同[]结果</span><br><span class=\"line\">(&#123;&#125;&gt;=[]);//true</span><br><span class=\"line\">(&#123;&#125;&lt;=[]);//false</span><br><span class=\"line\">(&#123;&#125;&lt;[]);//false</span><br><span class=\"line\">(&#123;&#125;==[]);//false</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;&#125;&gt;&#x27;1&#x27;);//true &#x27;0&#x27;,&#x27;&#x27;(空串)同&#x27;1&#x27;一致</span><br><span class=\"line\">(&#123;&#125;&gt;=&#x27;1&#x27;);//true</span><br><span class=\"line\">(&#123;&#125;&lt;=&#x27;1&#x27;);//false</span><br><span class=\"line\">(&#123;&#125;&lt;&#x27;1&#x27;);//false</span><br><span class=\"line\">(&#123;&#125;==&#x27;1&#x27;);//false</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123;&#125;&gt;[1]);//true</span><br><span class=\"line\">(&#123;&#125;&gt;=[1]);//true</span><br><span class=\"line\">(&#123;&#125;&lt;=[1]);//false</span><br><span class=\"line\">(&#123;&#125;&lt;[1]);//false</span><br><span class=\"line\">(&#123;&#125;==[1]);//false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特殊结果\"><a href=\"#特殊结果\" class=\"headerlink\" title=\"[] 特殊结果\"></a><code>[]</code> 特殊结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]&gt;null;//false</span><br><span class=\"line\">[]&gt;=null;//true</span><br><span class=\"line\">[]&lt;null;//false</span><br><span class=\"line\">[]&lt;=null;//true</span><br><span class=\"line\">[]==null;//false</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">MDN:parseInt</a></p>\n<p><a href=\"https://www.programiz.com/javascript/type-conversion\">JavaScript Type Conversions</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/\">JavaScript type coercion explained</a></p>\n<p><a href=\"https://blog.openreplay.com/javascript-type-conversions-explained/\">JavaScript Type Conversions Explained</a></p>\n<hr>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cldwps2ir0005qg3mf55ldll1","category_id":"cldwps2is0008qg3mf51hcs21","_id":"cldwps2j0000hqg3m4qwqf2p2"}],"PostTag":[{"post_id":"cldwps2j0000iqg3m9q0ufso7","tag_id":"cldwps2iy000fqg3mdjyqegxf","_id":"cldwps2j2000lqg3mfpgjg76w"},{"post_id":"cldwps2iw000dqg3m87kk521m","tag_id":"cldwps2iy000fqg3mdjyqegxf","_id":"cldwps2j3000nqg3mda0j14is"},{"post_id":"cldwps2j1000jqg3m3n1scm7i","tag_id":"cldwps2iy000fqg3mdjyqegxf","_id":"cldwps2j3000pqg3mf6n15z12"},{"post_id":"cldwps2ix000eqg3m8g8n481i","tag_id":"cldwps2iy000fqg3mdjyqegxf","_id":"cldwps2j4000rqg3m0x73bf29"}],"Tag":[{"name":"work","_id":"cldwps2iy000fqg3mdjyqegxf"}]}}