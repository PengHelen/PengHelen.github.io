{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/JavaScript定义变量.md","hash":"df697d11d3d9b504f177d6b36760f22f8141d8ce","modified":1640254850717},{"_id":"source/_posts/first.md","hash":"de1fdbd08730222f18daf3255c26d53baca59861","modified":1640241457287},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"99b586426ef9485e815f5b0868b25d2214ccc9f7","modified":1640240457100},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"1d22171d8f05371e9a89701f21098c0b0e330423","modified":1640166756797},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"7c603afdbbd579ea536aa19a286cbc5163bfd2b5","modified":1640156679823},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"6bb959e0798b199001048d34ccb43cb38dafce77","modified":1640166204044},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"public/2021/12/23/first/index.html","hash":"51b092455b2dd2085c09e96f3c0c390372e670ef","modified":1640312510167},{"_id":"public/categories/work/index.html","hash":"24630be25d0eccf3d4f86578b048f39b94f2cd3e","modified":1640312510167},{"_id":"public/archives/index.html","hash":"15a2d18750d884c515944b97d6e2a944b8c3db17","modified":1640312510167},{"_id":"public/archives/2021/index.html","hash":"b7f97cc5a06a2ad7747fbdff90a9b46849c1ef77","modified":1640312510167},{"_id":"public/archives/2021/12/index.html","hash":"7be91899e4b454c0c98cc1908d326bb6d9dec936","modified":1640312510167},{"_id":"public/2021/12/23/JavaScript定义变量/index.html","hash":"164538cd17a3ba2b9fade671149f348f0dcffb2c","modified":1640312510167},{"_id":"public/index.html","hash":"8620ce0c98b3bd0dd62aba01cb9f134a3021e13f","modified":1640312510167},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1640312510167},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1640312510167},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1640312510167},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1640312510167},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1640312510167},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1640312510167},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1640312510167},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1640312510167},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1640312510167},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1640312510167},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1640312510167},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1640312510167},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1640312510167},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1640312510167},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1640312510167},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1640312510167},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1640312510167},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1640312510167},{"_id":"public/css/style.css","hash":"11af6ebdbbb76c7dc312f5bb9bdbf42e8930b957","modified":1640312510167},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1640312510167},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1640312510167},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1640312510167},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1640312510167}],"Category":[{"name":"work","_id":"ckxjrptqi0002s8u39l0u22l4"}],"Data":[],"Page":[],"Post":[{"title":"JavaScript定义变量","date":"2021-12-23T06:22:39.000Z","_content":"\n## 一、声明变量\n\n**1.** 优先执行(var)：在执行任何代码之前进行处理\n**2.** 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的\n**3.** 作用域在当前执行上下文(var)：作用域限制函数内或全局作用域\n\n**注：** 未声明变量将很可能导致意想不到的结果，建议始终声明变量\n在 ES5 严格模式下，分配值给未声明变量将引发错误\n\n#### 优先执行(var)\n\n**变量提升：** 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”\n始终在作用域顶部声明变量（全局/函数代码的顶部）\n变量提升影响变量声明，不影响其值的初始化\n\n#### 不可配置性\n\n```\nvar a=1;\nb=2;\ndelete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示\ndelete this.b;\nconsole.log(a,b);//抛出refrenceerror（引用错误，b已被删除）\n```\n\n#### 声明多个变量\n\n**隐式声明全局变量**\n在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）\n\n```\nvar a=b='A';\n//等效于\nvar a,b;\nb='A';\na='A';\n//涉及到赋值符号是右结合计算规则，也就是说依次从右边赋值到左边;\nvar a=(b='A');\nconsole.log(a,b);//'A','A'\n//并且赋值号返回右侧变量的值\n\nvar x=y,y='A';\nconsole.log(x+y);//undefinedA\n//当\"x = y\"执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是'undefined'\n\nvar x=0;\nfunction f(){\n  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1\n}\nf();//不执行函数f，获取x的值全局声明的x，y则是未定义\nconsole.log(x,y);//0,1 //此处获取的全局的x,y\n```\n\n## 二、var 定义变量\n\nvar 声明的变量作用域是它当前的**执行上下文**，可以是嵌套函数，或在任何函数外\n多次用 var 声明变量，变量不会丢失其值\n\n## 三、闭包（未完-待更新）\n嵌套函数可访问声明于它们外部作用域的变量\n函数被引用包围（一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起的组合就是闭包）\n闭包让在一个内层函数中访问到其外层函数的作用域\n在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\n\n#### 缺点\n处理速度和内存消耗方面对脚本性能具有负面影响\n创建新的对象或者类时，每个对象的创建，方法都会被重新赋值\n\n\n\n## 四、let 定义变量\n\nlet 声明的变量作用域被限制在块级中的变量、语句或者表达式\n不会在全局声明时（在最顶部的范围）创建 window 对象的属性，而在编译时才初始化\n在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError\n**注：** 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误。\n\n#### var 与 let 不同\n\n初始化：\nlet 定义被执行时（编译时）才初始化\nvar 在函数顶部或代码顶部初始化且值为 undefined\n作用域：\nlet 被限制在块级中的变量、语句或者表达式\nvar 只能是全局或者整个函数块的\n\n#### 暂存死区\n\n(let,const)在变量初始化之前访问变量导致 ReferenceError,该变量处在一个自顶部到初始化处理的“暂存死区”中\n使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError\n\n```\nfunction test(){\n   var foo = 33;\n   if (foo) {\n      let foo = (foo + 55); // ReferenceError\n      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）\n   }\n}\ntest();\n\nfunction go(n) {\n  // n here is defined!\n  console.log(n); // Object {a: [1,2,3]}\n\n  for (let n of n.a) { // ReferenceError，n.a被解析为位于指令本身(\"let n\")中的“ n”对象的属性“ a”。\n    console.log(n);\n  }\n}\ngo({a: [1, 2, 3]});\n\nlet x = 1;\n{\n  var x = 2; // SyntaxError for re-declaration\n}\n//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量\n//等效-->\nlet x=1;\nvar x;//重复\n{\n  x=2;\n}\n```\n\n## 五、cosnt 定义变量\n\n与 let 声明变量类似\nconst 定义块级常量，声明必须赋值\n创建一个值的只读引用，变量标识符不能重新分配\n在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）\n一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称\n\n```\nconst MY_FAV=7;\nif (MY_FAV === 7) {\n  // 没问题，并且创建了一个块作用域变量 MY_FAV\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n  console.log('my favorite number is ' + MY_FAV);//20\n  // 这被提升到全局上下文并引发错误\n  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明\n}\nconsole.log('my favorite number is ' + MY_FAV);//全局,7\n\nconst MY_OBJECT={'key':'value'}\nMY_OBJECT={'OTHER_KEY':'value'};//Uncaught TypeError: Assignment to constant variable 分配常量值错误\nMY_OBJECT.key='otherValue';// Object.freeze() 不让对象的引用值改变\n\nconst MY_ARRAY = [];\n// 可以向数组填充数据\nMY_ARRAY.push('A'); // [\"A\"]\n// 但是，将一个新数组赋给变量会引发错误\nMY_ARRAY = ['B'];// Uncaught TypeError: Assignment to constant variable.\n```\n","source":"_posts/JavaScript定义变量.md","raw":"---\ntitle: JavaScript定义变量\ndate: 2021-12-23 14:22:39\ncategories:\n  - work\n---\n\n## 一、声明变量\n\n**1.** 优先执行(var)：在执行任何代码之前进行处理\n**2.** 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的\n**3.** 作用域在当前执行上下文(var)：作用域限制函数内或全局作用域\n\n**注：** 未声明变量将很可能导致意想不到的结果，建议始终声明变量\n在 ES5 严格模式下，分配值给未声明变量将引发错误\n\n#### 优先执行(var)\n\n**变量提升：** 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”\n始终在作用域顶部声明变量（全局/函数代码的顶部）\n变量提升影响变量声明，不影响其值的初始化\n\n#### 不可配置性\n\n```\nvar a=1;\nb=2;\ndelete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示\ndelete this.b;\nconsole.log(a,b);//抛出refrenceerror（引用错误，b已被删除）\n```\n\n#### 声明多个变量\n\n**隐式声明全局变量**\n在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）\n\n```\nvar a=b='A';\n//等效于\nvar a,b;\nb='A';\na='A';\n//涉及到赋值符号是右结合计算规则，也就是说依次从右边赋值到左边;\nvar a=(b='A');\nconsole.log(a,b);//'A','A'\n//并且赋值号返回右侧变量的值\n\nvar x=y,y='A';\nconsole.log(x+y);//undefinedA\n//当\"x = y\"执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是'undefined'\n\nvar x=0;\nfunction f(){\n  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1\n}\nf();//不执行函数f，获取x的值全局声明的x，y则是未定义\nconsole.log(x,y);//0,1 //此处获取的全局的x,y\n```\n\n## 二、var 定义变量\n\nvar 声明的变量作用域是它当前的**执行上下文**，可以是嵌套函数，或在任何函数外\n多次用 var 声明变量，变量不会丢失其值\n\n## 三、闭包（未完-待更新）\n嵌套函数可访问声明于它们外部作用域的变量\n函数被引用包围（一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起的组合就是闭包）\n闭包让在一个内层函数中访问到其外层函数的作用域\n在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\n\n#### 缺点\n处理速度和内存消耗方面对脚本性能具有负面影响\n创建新的对象或者类时，每个对象的创建，方法都会被重新赋值\n\n\n\n## 四、let 定义变量\n\nlet 声明的变量作用域被限制在块级中的变量、语句或者表达式\n不会在全局声明时（在最顶部的范围）创建 window 对象的属性，而在编译时才初始化\n在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError\n**注：** 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误。\n\n#### var 与 let 不同\n\n初始化：\nlet 定义被执行时（编译时）才初始化\nvar 在函数顶部或代码顶部初始化且值为 undefined\n作用域：\nlet 被限制在块级中的变量、语句或者表达式\nvar 只能是全局或者整个函数块的\n\n#### 暂存死区\n\n(let,const)在变量初始化之前访问变量导致 ReferenceError,该变量处在一个自顶部到初始化处理的“暂存死区”中\n使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError\n\n```\nfunction test(){\n   var foo = 33;\n   if (foo) {\n      let foo = (foo + 55); // ReferenceError\n      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）\n   }\n}\ntest();\n\nfunction go(n) {\n  // n here is defined!\n  console.log(n); // Object {a: [1,2,3]}\n\n  for (let n of n.a) { // ReferenceError，n.a被解析为位于指令本身(\"let n\")中的“ n”对象的属性“ a”。\n    console.log(n);\n  }\n}\ngo({a: [1, 2, 3]});\n\nlet x = 1;\n{\n  var x = 2; // SyntaxError for re-declaration\n}\n//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量\n//等效-->\nlet x=1;\nvar x;//重复\n{\n  x=2;\n}\n```\n\n## 五、cosnt 定义变量\n\n与 let 声明变量类似\nconst 定义块级常量，声明必须赋值\n创建一个值的只读引用，变量标识符不能重新分配\n在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）\n一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称\n\n```\nconst MY_FAV=7;\nif (MY_FAV === 7) {\n  // 没问题，并且创建了一个块作用域变量 MY_FAV\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n  console.log('my favorite number is ' + MY_FAV);//20\n  // 这被提升到全局上下文并引发错误\n  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明\n}\nconsole.log('my favorite number is ' + MY_FAV);//全局,7\n\nconst MY_OBJECT={'key':'value'}\nMY_OBJECT={'OTHER_KEY':'value'};//Uncaught TypeError: Assignment to constant variable 分配常量值错误\nMY_OBJECT.key='otherValue';// Object.freeze() 不让对象的引用值改变\n\nconst MY_ARRAY = [];\n// 可以向数组填充数据\nMY_ARRAY.push('A'); // [\"A\"]\n// 但是，将一个新数组赋给变量会引发错误\nMY_ARRAY = ['B'];// Uncaught TypeError: Assignment to constant variable.\n```\n","slug":"JavaScript定义变量","published":1,"updated":"2021-12-23T10:20:50.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjrptmk0000s8u3dv164oo2","content":"<h2 id=\"一、声明变量\"><a href=\"#一、声明变量\" class=\"headerlink\" title=\"一、声明变量\"></a>一、声明变量</h2><p><strong>1.</strong> 优先执行(var)：在执行任何代码之前进行处理<br><strong>2.</strong> 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的<br><strong>3.</strong> 作用域在当前执行上下文(var)：作用域限制函数内或全局作用域</p>\n<p><strong>注：</strong> 未声明变量将很可能导致意想不到的结果，建议始终声明变量<br>在 ES5 严格模式下，分配值给未声明变量将引发错误</p>\n<h4 id=\"优先执行-var\"><a href=\"#优先执行-var\" class=\"headerlink\" title=\"优先执行(var)\"></a>优先执行(var)</h4><p><strong>变量提升：</strong> 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”<br>始终在作用域顶部声明变量（全局/函数代码的顶部）<br>变量提升影响变量声明，不影响其值的初始化</p>\n<h4 id=\"不可配置性\"><a href=\"#不可配置性\" class=\"headerlink\" title=\"不可配置性\"></a>不可配置性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">b=2;</span><br><span class=\"line\">delete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示</span><br><span class=\"line\">delete this.b;</span><br><span class=\"line\">console.log(a,b);//抛出refrenceerror（引用错误，b已被删除）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明多个变量\"><a href=\"#声明多个变量\" class=\"headerlink\" title=\"声明多个变量\"></a>声明多个变量</h4><p><strong>隐式声明全局变量</strong><br>在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=b=&#x27;A&#x27;;</span><br><span class=\"line\">//等效于</span><br><span class=\"line\">var a,b;</span><br><span class=\"line\">b=&#x27;A&#x27;;</span><br><span class=\"line\">a=&#x27;A&#x27;;</span><br><span class=\"line\">//涉及到赋值符号是右结合计算规则，也就是说依次从右边赋值到左边;</span><br><span class=\"line\">var a=(b=&#x27;A&#x27;);</span><br><span class=\"line\">console.log(a,b);//&#x27;A&#x27;,&#x27;A&#x27;</span><br><span class=\"line\">//并且赋值号返回右侧变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">var x=y,y=&#x27;A&#x27;;</span><br><span class=\"line\">console.log(x+y);//undefinedA</span><br><span class=\"line\">//当&quot;x = y&quot;执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是&#x27;undefined&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var x=0;</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();//不执行函数f，获取x的值全局声明的x，y则是未定义</span><br><span class=\"line\">console.log(x,y);//0,1 //此处获取的全局的x,y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、var-定义变量\"><a href=\"#二、var-定义变量\" class=\"headerlink\" title=\"二、var 定义变量\"></a>二、var 定义变量</h2><p>var 声明的变量作用域是它当前的<strong>执行上下文</strong>，可以是嵌套函数，或在任何函数外<br>多次用 var 声明变量，变量不会丢失其值</p>\n<h2 id=\"三、闭包（未完-待更新）\"><a href=\"#三、闭包（未完-待更新）\" class=\"headerlink\" title=\"三、闭包（未完-待更新）\"></a>三、闭包（未完-待更新）</h2><p>嵌套函数可访问声明于它们外部作用域的变量<br>函数被引用包围（一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起的组合就是闭包）<br>闭包让在一个内层函数中访问到其外层函数的作用域<br>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>处理速度和内存消耗方面对脚本性能具有负面影响<br>创建新的对象或者类时，每个对象的创建，方法都会被重新赋值</p>\n<h2 id=\"四、let-定义变量\"><a href=\"#四、let-定义变量\" class=\"headerlink\" title=\"四、let 定义变量\"></a>四、let 定义变量</h2><p>let 声明的变量作用域被限制在块级中的变量、语句或者表达式<br>不会在全局声明时（在最顶部的范围）创建 window 对象的属性，而在编译时才初始化<br>在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError<br><strong>注：</strong> 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误。</p>\n<h4 id=\"var-与-let-不同\"><a href=\"#var-与-let-不同\" class=\"headerlink\" title=\"var 与 let 不同\"></a>var 与 let 不同</h4><p>初始化：<br>let 定义被执行时（编译时）才初始化<br>var 在函数顶部或代码顶部初始化且值为 undefined<br>作用域：<br>let 被限制在块级中的变量、语句或者表达式<br>var 只能是全局或者整个函数块的</p>\n<h4 id=\"暂存死区\"><a href=\"#暂存死区\" class=\"headerlink\" title=\"暂存死区\"></a>暂存死区</h4><p>(let,const)在变量初始化之前访问变量导致 ReferenceError,该变量处在一个自顶部到初始化处理的“暂存死区”中<br>使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">   var foo = 33;</span><br><span class=\"line\">   if (foo) &#123;</span><br><span class=\"line\">      let foo = (foo + 55); // ReferenceError</span><br><span class=\"line\">      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\">function go(n) &#123;</span><br><span class=\"line\">  // n here is defined!</span><br><span class=\"line\">  console.log(n); // Object &#123;a: [1,2,3]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let n of n.a) &#123; // ReferenceError，n.a被解析为位于指令本身(&quot;let n&quot;)中的“ n”对象的属性“ a”。</span><br><span class=\"line\">    console.log(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">go(&#123;a: [1, 2, 3]&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">let x = 1;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  var x = 2; // SyntaxError for re-declaration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量</span><br><span class=\"line\">//等效--&gt;</span><br><span class=\"line\">let x=1;</span><br><span class=\"line\">var x;//重复</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  x=2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、cosnt-定义变量\"><a href=\"#五、cosnt-定义变量\" class=\"headerlink\" title=\"五、cosnt 定义变量\"></a>五、cosnt 定义变量</h2><p>与 let 声明变量类似<br>const 定义块级常量，声明必须赋值<br>创建一个值的只读引用，变量标识符不能重新分配<br>在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）<br>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MY_FAV=7;</span><br><span class=\"line\">if (MY_FAV === 7) &#123;</span><br><span class=\"line\">  // 没问题，并且创建了一个块作用域变量 MY_FAV</span><br><span class=\"line\">  // (works equally well with let to declare a block scoped non const variable)</span><br><span class=\"line\">  let MY_FAV = 20;</span><br><span class=\"line\">  console.log(&#x27;my favorite number is &#x27; + MY_FAV);//20</span><br><span class=\"line\">  // 这被提升到全局上下文并引发错误</span><br><span class=\"line\">  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&#x27;my favorite number is &#x27; + MY_FAV);//全局,7</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_OBJECT=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;</span><br><span class=\"line\">MY_OBJECT=&#123;&#x27;OTHER_KEY&#x27;:&#x27;value&#x27;&#125;;//Uncaught TypeError: Assignment to constant variable 分配常量值错误</span><br><span class=\"line\">MY_OBJECT.key=&#x27;otherValue&#x27;;// Object.freeze() 不让对象的引用值改变</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_ARRAY = [];</span><br><span class=\"line\">// 可以向数组填充数据</span><br><span class=\"line\">MY_ARRAY.push(&#x27;A&#x27;); // [&quot;A&quot;]</span><br><span class=\"line\">// 但是，将一个新数组赋给变量会引发错误</span><br><span class=\"line\">MY_ARRAY = [&#x27;B&#x27;];// Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、声明变量\"><a href=\"#一、声明变量\" class=\"headerlink\" title=\"一、声明变量\"></a>一、声明变量</h2><p><strong>1.</strong> 优先执行(var)：在执行任何代码之前进行处理<br><strong>2.</strong> 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的<br><strong>3.</strong> 作用域在当前执行上下文(var)：作用域限制函数内或全局作用域</p>\n<p><strong>注：</strong> 未声明变量将很可能导致意想不到的结果，建议始终声明变量<br>在 ES5 严格模式下，分配值给未声明变量将引发错误</p>\n<h4 id=\"优先执行-var\"><a href=\"#优先执行-var\" class=\"headerlink\" title=\"优先执行(var)\"></a>优先执行(var)</h4><p><strong>变量提升：</strong> 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”<br>始终在作用域顶部声明变量（全局/函数代码的顶部）<br>变量提升影响变量声明，不影响其值的初始化</p>\n<h4 id=\"不可配置性\"><a href=\"#不可配置性\" class=\"headerlink\" title=\"不可配置性\"></a>不可配置性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">b=2;</span><br><span class=\"line\">delete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示</span><br><span class=\"line\">delete this.b;</span><br><span class=\"line\">console.log(a,b);//抛出refrenceerror（引用错误，b已被删除）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明多个变量\"><a href=\"#声明多个变量\" class=\"headerlink\" title=\"声明多个变量\"></a>声明多个变量</h4><p><strong>隐式声明全局变量</strong><br>在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=b=&#x27;A&#x27;;</span><br><span class=\"line\">//等效于</span><br><span class=\"line\">var a,b;</span><br><span class=\"line\">b=&#x27;A&#x27;;</span><br><span class=\"line\">a=&#x27;A&#x27;;</span><br><span class=\"line\">//涉及到赋值符号是右结合计算规则，也就是说依次从右边赋值到左边;</span><br><span class=\"line\">var a=(b=&#x27;A&#x27;);</span><br><span class=\"line\">console.log(a,b);//&#x27;A&#x27;,&#x27;A&#x27;</span><br><span class=\"line\">//并且赋值号返回右侧变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">var x=y,y=&#x27;A&#x27;;</span><br><span class=\"line\">console.log(x+y);//undefinedA</span><br><span class=\"line\">//当&quot;x = y&quot;执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是&#x27;undefined&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var x=0;</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();//不执行函数f，获取x的值全局声明的x，y则是未定义</span><br><span class=\"line\">console.log(x,y);//0,1 //此处获取的全局的x,y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、var-定义变量\"><a href=\"#二、var-定义变量\" class=\"headerlink\" title=\"二、var 定义变量\"></a>二、var 定义变量</h2><p>var 声明的变量作用域是它当前的<strong>执行上下文</strong>，可以是嵌套函数，或在任何函数外<br>多次用 var 声明变量，变量不会丢失其值</p>\n<h2 id=\"三、闭包（未完-待更新）\"><a href=\"#三、闭包（未完-待更新）\" class=\"headerlink\" title=\"三、闭包（未完-待更新）\"></a>三、闭包（未完-待更新）</h2><p>嵌套函数可访问声明于它们外部作用域的变量<br>函数被引用包围（一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起的组合就是闭包）<br>闭包让在一个内层函数中访问到其外层函数的作用域<br>在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>处理速度和内存消耗方面对脚本性能具有负面影响<br>创建新的对象或者类时，每个对象的创建，方法都会被重新赋值</p>\n<h2 id=\"四、let-定义变量\"><a href=\"#四、let-定义变量\" class=\"headerlink\" title=\"四、let 定义变量\"></a>四、let 定义变量</h2><p>let 声明的变量作用域被限制在块级中的变量、语句或者表达式<br>不会在全局声明时（在最顶部的范围）创建 window 对象的属性，而在编译时才初始化<br>在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError<br><strong>注：</strong> 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误。</p>\n<h4 id=\"var-与-let-不同\"><a href=\"#var-与-let-不同\" class=\"headerlink\" title=\"var 与 let 不同\"></a>var 与 let 不同</h4><p>初始化：<br>let 定义被执行时（编译时）才初始化<br>var 在函数顶部或代码顶部初始化且值为 undefined<br>作用域：<br>let 被限制在块级中的变量、语句或者表达式<br>var 只能是全局或者整个函数块的</p>\n<h4 id=\"暂存死区\"><a href=\"#暂存死区\" class=\"headerlink\" title=\"暂存死区\"></a>暂存死区</h4><p>(let,const)在变量初始化之前访问变量导致 ReferenceError,该变量处在一个自顶部到初始化处理的“暂存死区”中<br>使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">   var foo = 33;</span><br><span class=\"line\">   if (foo) &#123;</span><br><span class=\"line\">      let foo = (foo + 55); // ReferenceError</span><br><span class=\"line\">      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\">function go(n) &#123;</span><br><span class=\"line\">  // n here is defined!</span><br><span class=\"line\">  console.log(n); // Object &#123;a: [1,2,3]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let n of n.a) &#123; // ReferenceError，n.a被解析为位于指令本身(&quot;let n&quot;)中的“ n”对象的属性“ a”。</span><br><span class=\"line\">    console.log(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">go(&#123;a: [1, 2, 3]&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">let x = 1;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  var x = 2; // SyntaxError for re-declaration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量</span><br><span class=\"line\">//等效--&gt;</span><br><span class=\"line\">let x=1;</span><br><span class=\"line\">var x;//重复</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  x=2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、cosnt-定义变量\"><a href=\"#五、cosnt-定义变量\" class=\"headerlink\" title=\"五、cosnt 定义变量\"></a>五、cosnt 定义变量</h2><p>与 let 声明变量类似<br>const 定义块级常量，声明必须赋值<br>创建一个值的只读引用，变量标识符不能重新分配<br>在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）<br>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MY_FAV=7;</span><br><span class=\"line\">if (MY_FAV === 7) &#123;</span><br><span class=\"line\">  // 没问题，并且创建了一个块作用域变量 MY_FAV</span><br><span class=\"line\">  // (works equally well with let to declare a block scoped non const variable)</span><br><span class=\"line\">  let MY_FAV = 20;</span><br><span class=\"line\">  console.log(&#x27;my favorite number is &#x27; + MY_FAV);//20</span><br><span class=\"line\">  // 这被提升到全局上下文并引发错误</span><br><span class=\"line\">  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&#x27;my favorite number is &#x27; + MY_FAV);//全局,7</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_OBJECT=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;</span><br><span class=\"line\">MY_OBJECT=&#123;&#x27;OTHER_KEY&#x27;:&#x27;value&#x27;&#125;;//Uncaught TypeError: Assignment to constant variable 分配常量值错误</span><br><span class=\"line\">MY_OBJECT.key=&#x27;otherValue&#x27;;// Object.freeze() 不让对象的引用值改变</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_ARRAY = [];</span><br><span class=\"line\">// 可以向数组填充数据</span><br><span class=\"line\">MY_ARRAY.push(&#x27;A&#x27;); // [&quot;A&quot;]</span><br><span class=\"line\">// 但是，将一个新数组赋给变量会引发错误</span><br><span class=\"line\">MY_ARRAY = [&#x27;B&#x27;];// Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n"},{"title":"我的第一篇博客","date":"2021-12-22T16:00:00.000Z","_content":"\n---\n太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……\n终于拥有一个属于我自己的博客啦\\~哈哈哈哈\n喔喔，欢迎来到我的小空间，Helen的博客主页\\~\n事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！\n---\n\n\n","source":"_posts/first.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2021-12-23\n---\n\n---\n太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……\n终于拥有一个属于我自己的博客啦\\~哈哈哈哈\n喔喔，欢迎来到我的小空间，Helen的博客主页\\~\n事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！\n---\n\n\n","slug":"first","published":1,"updated":"2021-12-23T06:37:37.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxjrptqg0001s8u3985cdjfv","content":"<hr>\n<p>太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……<br>终于拥有一个属于我自己的博客啦~哈哈哈哈<br>喔喔，欢迎来到我的小空间，Helen的博客主页~<br>事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……<br>终于拥有一个属于我自己的博客啦~哈哈哈哈<br>喔喔，欢迎来到我的小空间，Helen的博客主页~<br>事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！</p>\n<hr>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxjrptmk0000s8u3dv164oo2","category_id":"ckxjrptqi0002s8u39l0u22l4","_id":"ckxjrptqj0003s8u3h1o69iy4"}],"PostTag":[],"Tag":[]}}