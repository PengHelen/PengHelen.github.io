{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/JS-Equality-Table.png","path":"images/JS-Equality-Table.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/CSS篇-auto关键词.md","hash":"9c48d214a112350671531ec6c0d0c0617f6910ed","modified":1672995920160},{"_id":"source/_posts/import与export.md","hash":"134a56becf0e32964a5aca704690453e0a306625","modified":1640586268000},{"_id":"source/_posts/JavaScript定义变量.md","hash":"b9b1f42dff09831568e2ec2149523ef1ba9e878e","modified":1669705062577},{"_id":"source/_posts/first.md","hash":"de1fdbd08730222f18daf3255c26d53baca59861","modified":1640241458000},{"_id":"source/_posts/Base64与图片互转.html","hash":"e960c7bdbc58ec71d9a5b8f816f805ef50a0ecaf","modified":1666086176901},{"_id":"source/_posts/js深拷贝与浅拷贝.md","hash":"82464d4e6d86b3f47f26a2625fe3636756413ed8","modified":1640852390000},{"_id":"source/_posts/JSON转化.html","hash":"c510f2c8b722d62d22f95630171e28f141586baa","modified":1669705044163},{"_id":"source/_posts/colorList.html","hash":"fc7f7d7d23e0d82d35f36c90928b07983a94b985","modified":1666173321074},{"_id":"source/_posts/类型转换.md","hash":"9fd02018d96124ba426d10e694f2a6ff70a3fc20","modified":1673608725481},{"_id":"source/lifetime/me.md","hash":"6b981f22c24d1851c01b5a502fcee227ec4fd874","modified":1666183497834},{"_id":"source/images/JS-Equality-Table.png","hash":"c9e693870a72ed2885615957735d5557c5229e29","modified":1673578609131},{"_id":"source/work/work.md","hash":"b9bb5a213f8e8f46400ed801c0ac28d1b365698c","modified":1666183550065},{"_id":"source/_posts/js图片验证码.html","hash":"e30220f5eda0fabb2410ec85bdb6c606123ed035","modified":1668046686131},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"source/_posts/浏览器标签-Tab的标题和图标.md","hash":"0e4e8a4372684c58b5d55cb5093516726e3ed355","modified":1672902718917},{"_id":"themes/landscape/_config.yml","hash":"99b586426ef9485e815f5b0868b25d2214ccc9f7","modified":1640240458000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"6bb959e0798b199001048d34ccb43cb38dafce77","modified":1640166206000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"source/_posts/变量和事件名.md","hash":"f6f004003a4d129dfcebbea18b862c86262486c1","modified":1666851476606},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"1d22171d8f05371e9a89701f21098c0b0e330423","modified":1640166758000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"7c603afdbbd579ea536aa19a286cbc5163bfd2b5","modified":1640156680000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"public/2023/01/13/类型转换/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1673608758910},{"_id":"public/2023/01/06/CSS篇-auto关键词/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1673608758910},{"_id":"public/2023/01/05/浏览器标签-Tab的标题和图标/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1673608758910},{"_id":"public/lifetime/me.html","hash":"2d2113e4785dd63c5e4da61c077ef38ca65c28e4","modified":1673608758910},{"_id":"public/work/work.html","hash":"79e2a82ffad00b8c6c12e825ce2041f604439bd2","modified":1673608758910},{"_id":"public/2022/10/27/变量和事件名/index.html","hash":"ae69dff9747ebba28d1075dd0831a34445b4ba69","modified":1673608758910},{"_id":"public/2021/12/30/js深拷贝与浅拷贝/index.html","hash":"2734af659ae8abdfb4ca6e8147ca6c1fd4f18398","modified":1673608758910},{"_id":"public/2021/12/27/import与export/index.html","hash":"7c0599a9d13d219f70cbf3b3e114d856343f2a19","modified":1673608758910},{"_id":"public/2021/12/23/first/index.html","hash":"bdd9e534425a687bd38aa12219d8d79e32dfbdac","modified":1673608758910},{"_id":"public/archives/index.html","hash":"1c33ffcecdebe4a1ef1ff36e1eeed244fff3ab44","modified":1673608758910},{"_id":"public/archives/2021/index.html","hash":"adcba8e506e63bcf4038c65912ea655dd5cb3940","modified":1673608758910},{"_id":"public/archives/2021/12/index.html","hash":"70964ecdbc86437872eef171792cbf458efb22c5","modified":1673608758910},{"_id":"public/archives/2022/index.html","hash":"b6d41e1f7914446d889c0418ce273453edf09bbc","modified":1673608758910},{"_id":"public/archives/2023/index.html","hash":"3d0cb73e32a04cecddc7e94b367d035ad0ac35e3","modified":1673608758910},{"_id":"public/archives/2022/10/index.html","hash":"55ee7c0a66f89e0e24bd9d654051fbc1f0a55d92","modified":1673608758910},{"_id":"public/archives/2023/01/index.html","hash":"b85cb0ef1e7e61dae6e3149fc860d3ef21e89a1c","modified":1673608758910},{"_id":"public/categories/work/index.html","hash":"799e09d9a805ffe4171a1fd6897bf2fec9b6e0bf","modified":1673608758910},{"_id":"public/tags/work/index.html","hash":"91d3414a690552f131f3c90940dede50b96b5289","modified":1673608758910},{"_id":"public/2021/12/23/JavaScript定义变量/index.html","hash":"b3114f3d5006e52c8e76b4f8a7a6df541d6821fb","modified":1673608758910},{"_id":"public/index.html","hash":"16ad839b7f3a62452cb6696fbb2c78a5b5d69b56","modified":1673608758910},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1673608758910},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1673608758910},{"_id":"public/images/JS-Equality-Table.png","hash":"c9e693870a72ed2885615957735d5557c5229e29","modified":1673608758910},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1673608758910},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1673608758910},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1673608758910},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1673608758910},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1673608758910},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1673608758910},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1673608758910},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1673608758910},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1673608758910},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1673608758910},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1673608758910},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1673608758910},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1673608758910},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1673608758910},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1673608758910},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1673608758910},{"_id":"public/css/style.css","hash":"11af6ebdbbb76c7dc312f5bb9bdbf42e8930b957","modified":1673608758910},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1673608758910},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1673608758910},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1673608758910},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1673608758910}],"Category":[{"name":"work","_id":"clcuffzdc0005os3m4qeo4l6d"}],"Data":[],"Page":[{"title":"About me","date":"2022-10-19T12:44:57.000Z","_content":"","source":"lifetime/me.md","raw":"---\ntitle: About me\ndate: 2022-10-19 20:44:57\n---\n","updated":"2022-10-19T12:44:57.834Z","path":"lifetime/me.html","comments":1,"layout":"page","_id":"clcuffzd60000os3mgvnc6sr7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"work","date":"2022-10-19T12:45:50.000Z","_content":"","source":"work/work.md","raw":"---\ntitle: work\ndate: 2022-10-19 20:45:50\n---\n","updated":"2022-10-19T12:45:50.065Z","path":"work/work.html","comments":1,"layout":"page","_id":"clcuffzda0002os3meczfbm1c","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"layout","title":"CSS篇-auto关键词","date":"2023-01-06T03:09:07.000Z","_content":"\n---\n\n> 根据auto在CSS常用属性的实际表现来探究auto的作用\n\nauto是自适应，自动的意思\n\n# 1.width:auto;\nwidth默认值（即不设置width值时）是auto\n当使用`width:auto;`时，元素的宽被限制在父元素内，元素内容的宽度会自动减去元素的margin，padding和border，即元素内容自动充满元素剩余空间\n\n## width:auto; VS width:100%;\n`width:auto;`表示：父元素内容宽度=子元素margin+padding+border+content(元素内容宽度，即元素的剩余空间)\n\n`width:100%;`表示：父元素内容宽度=子元素content(即子元素内容宽度等于父元素宽度)\n\n**注意：适用标准浏览器的盒子模型，不适用IE盒子模型**\n\n# 2.height:auto;\nheight默认值是auto\n`height:auto;`，元素高度等于元素内容高度，此时即使设置`height:100%;`元素高度也还是元素的内容高度\n\n# 3.margin:auto;\nmargin的默认值是0，表示元素没有margin\n当使用`margin:auto;`，除去元素的content内容的宽高、padding、border，剩余空间都由margin来填充\n\n如下代码，元素宽高确定，巧用`margin:auto;`，达到水平垂直居中效果\n\n```\n<div class=\"wrapper\">\n  <div class=\"item\">I am centered.</div>\n</div>\n.wrapper {\n    position: relative;\n}\n.item {\n    width: 200px;\n    height: 100px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n```\n\n如下代码，元素宽确定，巧用`margin:0 auto;`，让元素水平居中\n\n```\n<div class=\"wrapper\">\n  <div class=\"item\">I am centered.</div>\n</div>\n.item {\n    width: 200px;\n    margin: auto;\n}\n```\n\n**margin-inline和margin-block属性是实验中属性，暂不研究**\n\n# 4.background-size:auto;\nbackground-size默认值是auto，以背景图片的比例缩放背景图片\n\n# 5.top/right/bottom/left:auto;\ntop/right/bottom/left的默认值是auto\n\n**MDN** \n**left:auto**\n\n**对于绝对定位元素，元素将忽略此属性而以right属性为准，如果此时设置width: auto，将基于内容需要的宽度设置宽度；如果right也为auto的话，元素的水平位置就是它假如作为静态 (即 static) 元素时该在的位置**\n\n**对于相对定位元素，元素相对正常位置的偏移量将基于right属性；如果right也为auto的话，元素将不会有偏移**\n\n# 6.z-index:auto;\nz-index默认值是auto\n盒子不会创建一个新的本地堆叠上下文  \n在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同\n\n# 7.overflow:auto;\noverflow默认值是visible，内容不能被裁减并且可能渲染到边距盒（padding）的外部\n\n**MDN：`overflow:auto;`**\n**取决于用户代理。如果内容适应边距（padding）盒，它看起来与 visible 相同，但是仍然建立了一个新的块级格式化上下文；如果内容溢出，则浏览器提供滚动条**\n\n# 8.cursor:auto;\ncursor默认值是auto，浏览器根据当前内容决定指针样式\n\n# 9.table-layout:auto;\ntable-layout默认值是auto，表格及单元格的宽度取决于其包含的内容\n\n# 10.flex:auto;\nflex默认值是`0 1 auto`，flex是flex-grow，flex-shrink，flex-basis的合并简写属性\n当使用`flex:auto;`，等同于`flex:1 1 auto;`\n\n### flex+margin-left:auto;可使元素右对齐\n```\n<div class=\"wrapper\">\n  <div class=\"item\">Item1</div>\n  <div class=\"item item-2\">Item2</div>\n</div>\n.wrapper {\n  display: flex;\n}\n.item-2 {\n  margin-left: auto;\n}\n```\n\n### flex+margin:auto;可使元素水平垂直居中\n```\n<div class=\"wrapper\">\n  <div class=\"item\">Item1</div>\n</div>\n.wrapper {\n  display: flex;\n  height: 400px;\n  background-color: blue;\n}\n.item {\n  width: 200px;\n  height: 100px;\n  margin: auto auto;\n  background-color: red;\n}\n```\n\n**grid可参考flex，暂不研究**\n\n---\n\n---\n\n> 参考文献：  \n英文版：https://ishadeed.com/article/auto-css/  \n中文翻译版：https://blog.csdn.net/qq449245884/article/details/105963479/   \nhttps://css-tricks.com/how-auto-margins-work-in-flexbox/  \n\n---\n","source":"_posts/CSS篇-auto关键词.md","raw":"---\nlayout:\n  - layout\ntitle: CSS篇-auto关键词\ndate: 2023-01-06 11:09:07\ntags:\n---\n\n---\n\n> 根据auto在CSS常用属性的实际表现来探究auto的作用\n\nauto是自适应，自动的意思\n\n# 1.width:auto;\nwidth默认值（即不设置width值时）是auto\n当使用`width:auto;`时，元素的宽被限制在父元素内，元素内容的宽度会自动减去元素的margin，padding和border，即元素内容自动充满元素剩余空间\n\n## width:auto; VS width:100%;\n`width:auto;`表示：父元素内容宽度=子元素margin+padding+border+content(元素内容宽度，即元素的剩余空间)\n\n`width:100%;`表示：父元素内容宽度=子元素content(即子元素内容宽度等于父元素宽度)\n\n**注意：适用标准浏览器的盒子模型，不适用IE盒子模型**\n\n# 2.height:auto;\nheight默认值是auto\n`height:auto;`，元素高度等于元素内容高度，此时即使设置`height:100%;`元素高度也还是元素的内容高度\n\n# 3.margin:auto;\nmargin的默认值是0，表示元素没有margin\n当使用`margin:auto;`，除去元素的content内容的宽高、padding、border，剩余空间都由margin来填充\n\n如下代码，元素宽高确定，巧用`margin:auto;`，达到水平垂直居中效果\n\n```\n<div class=\"wrapper\">\n  <div class=\"item\">I am centered.</div>\n</div>\n.wrapper {\n    position: relative;\n}\n.item {\n    width: 200px;\n    height: 100px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n```\n\n如下代码，元素宽确定，巧用`margin:0 auto;`，让元素水平居中\n\n```\n<div class=\"wrapper\">\n  <div class=\"item\">I am centered.</div>\n</div>\n.item {\n    width: 200px;\n    margin: auto;\n}\n```\n\n**margin-inline和margin-block属性是实验中属性，暂不研究**\n\n# 4.background-size:auto;\nbackground-size默认值是auto，以背景图片的比例缩放背景图片\n\n# 5.top/right/bottom/left:auto;\ntop/right/bottom/left的默认值是auto\n\n**MDN** \n**left:auto**\n\n**对于绝对定位元素，元素将忽略此属性而以right属性为准，如果此时设置width: auto，将基于内容需要的宽度设置宽度；如果right也为auto的话，元素的水平位置就是它假如作为静态 (即 static) 元素时该在的位置**\n\n**对于相对定位元素，元素相对正常位置的偏移量将基于right属性；如果right也为auto的话，元素将不会有偏移**\n\n# 6.z-index:auto;\nz-index默认值是auto\n盒子不会创建一个新的本地堆叠上下文  \n在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同\n\n# 7.overflow:auto;\noverflow默认值是visible，内容不能被裁减并且可能渲染到边距盒（padding）的外部\n\n**MDN：`overflow:auto;`**\n**取决于用户代理。如果内容适应边距（padding）盒，它看起来与 visible 相同，但是仍然建立了一个新的块级格式化上下文；如果内容溢出，则浏览器提供滚动条**\n\n# 8.cursor:auto;\ncursor默认值是auto，浏览器根据当前内容决定指针样式\n\n# 9.table-layout:auto;\ntable-layout默认值是auto，表格及单元格的宽度取决于其包含的内容\n\n# 10.flex:auto;\nflex默认值是`0 1 auto`，flex是flex-grow，flex-shrink，flex-basis的合并简写属性\n当使用`flex:auto;`，等同于`flex:1 1 auto;`\n\n### flex+margin-left:auto;可使元素右对齐\n```\n<div class=\"wrapper\">\n  <div class=\"item\">Item1</div>\n  <div class=\"item item-2\">Item2</div>\n</div>\n.wrapper {\n  display: flex;\n}\n.item-2 {\n  margin-left: auto;\n}\n```\n\n### flex+margin:auto;可使元素水平垂直居中\n```\n<div class=\"wrapper\">\n  <div class=\"item\">Item1</div>\n</div>\n.wrapper {\n  display: flex;\n  height: 400px;\n  background-color: blue;\n}\n.item {\n  width: 200px;\n  height: 100px;\n  margin: auto auto;\n  background-color: red;\n}\n```\n\n**grid可参考flex，暂不研究**\n\n---\n\n---\n\n> 参考文献：  \n英文版：https://ishadeed.com/article/auto-css/  \n中文翻译版：https://blog.csdn.net/qq449245884/article/details/105963479/   \nhttps://css-tricks.com/how-auto-margins-work-in-flexbox/  \n\n---\n","slug":"CSS篇-auto关键词","published":1,"updated":"2023-01-06T09:05:20.160Z","comments":1,"photos":[],"link":"","_id":"clcuffzd80001os3mddn8dl2f","content":"<hr>\n<blockquote>\n<p>根据auto在CSS常用属性的实际表现来探究auto的作用</p>\n</blockquote>\n<p>auto是自适应，自动的意思</p>\n<h1 id=\"1-width-auto\"><a href=\"#1-width-auto\" class=\"headerlink\" title=\"1.width:auto;\"></a>1.width:auto;</h1><p>width默认值（即不设置width值时）是auto<br>当使用<code>width:auto;</code>时，元素的宽被限制在父元素内，元素内容的宽度会自动减去元素的margin，padding和border，即元素内容自动充满元素剩余空间</p>\n<h2 id=\"width-auto-VS-width-100\"><a href=\"#width-auto-VS-width-100\" class=\"headerlink\" title=\"width:auto; VS width:100%;\"></a>width:auto; VS width:100%;</h2><p><code>width:auto;</code>表示：父元素内容宽度=子元素margin+padding+border+content(元素内容宽度，即元素的剩余空间)</p>\n<p><code>width:100%;</code>表示：父元素内容宽度=子元素content(即子元素内容宽度等于父元素宽度)</p>\n<p><strong>注意：适用标准浏览器的盒子模型，不适用IE盒子模型</strong></p>\n<h1 id=\"2-height-auto\"><a href=\"#2-height-auto\" class=\"headerlink\" title=\"2.height:auto;\"></a>2.height:auto;</h1><p>height默认值是auto<br><code>height:auto;</code>，元素高度等于元素内容高度，此时即使设置<code>height:100%;</code>元素高度也还是元素的内容高度</p>\n<h1 id=\"3-margin-auto\"><a href=\"#3-margin-auto\" class=\"headerlink\" title=\"3.margin:auto;\"></a>3.margin:auto;</h1><p>margin的默认值是0，表示元素没有margin<br>当使用<code>margin:auto;</code>，除去元素的content内容的宽高、padding、border，剩余空间都由margin来填充</p>\n<p>如下代码，元素宽高确定，巧用<code>margin:auto;</code>，达到水平垂直居中效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;I am centered.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下代码，元素宽确定，巧用<code>margin:0 auto;</code>，让元素水平居中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;I am centered.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>margin-inline和margin-block属性是实验中属性，暂不研究</strong></p>\n<h1 id=\"4-background-size-auto\"><a href=\"#4-background-size-auto\" class=\"headerlink\" title=\"4.background-size:auto;\"></a>4.background-size:auto;</h1><p>background-size默认值是auto，以背景图片的比例缩放背景图片</p>\n<h1 id=\"5-top-right-bottom-left-auto\"><a href=\"#5-top-right-bottom-left-auto\" class=\"headerlink\" title=\"5.top/right/bottom/left:auto;\"></a>5.top/right/bottom/left:auto;</h1><p>top/right/bottom/left的默认值是auto</p>\n<p><strong>MDN</strong><br><strong>left:auto</strong></p>\n<p><strong>对于绝对定位元素，元素将忽略此属性而以right属性为准，如果此时设置width: auto，将基于内容需要的宽度设置宽度；如果right也为auto的话，元素的水平位置就是它假如作为静态 (即 static) 元素时该在的位置</strong></p>\n<p><strong>对于相对定位元素，元素相对正常位置的偏移量将基于right属性；如果right也为auto的话，元素将不会有偏移</strong></p>\n<h1 id=\"6-z-index-auto\"><a href=\"#6-z-index-auto\" class=\"headerlink\" title=\"6.z-index:auto;\"></a>6.z-index:auto;</h1><p>z-index默认值是auto<br>盒子不会创建一个新的本地堆叠上下文<br>在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同</p>\n<h1 id=\"7-overflow-auto\"><a href=\"#7-overflow-auto\" class=\"headerlink\" title=\"7.overflow:auto;\"></a>7.overflow:auto;</h1><p>overflow默认值是visible，内容不能被裁减并且可能渲染到边距盒（padding）的外部</p>\n<p><strong>MDN：<code>overflow:auto;</code></strong><br><strong>取决于用户代理。如果内容适应边距（padding）盒，它看起来与 visible 相同，但是仍然建立了一个新的块级格式化上下文；如果内容溢出，则浏览器提供滚动条</strong></p>\n<h1 id=\"8-cursor-auto\"><a href=\"#8-cursor-auto\" class=\"headerlink\" title=\"8.cursor:auto;\"></a>8.cursor:auto;</h1><p>cursor默认值是auto，浏览器根据当前内容决定指针样式</p>\n<h1 id=\"9-table-layout-auto\"><a href=\"#9-table-layout-auto\" class=\"headerlink\" title=\"9.table-layout:auto;\"></a>9.table-layout:auto;</h1><p>table-layout默认值是auto，表格及单元格的宽度取决于其包含的内容</p>\n<h1 id=\"10-flex-auto\"><a href=\"#10-flex-auto\" class=\"headerlink\" title=\"10.flex:auto;\"></a>10.flex:auto;</h1><p>flex默认值是<code>0 1 auto</code>，flex是flex-grow，flex-shrink，flex-basis的合并简写属性<br>当使用<code>flex:auto;</code>，等同于<code>flex:1 1 auto;</code></p>\n<h3 id=\"flex-margin-left-auto-可使元素右对齐\"><a href=\"#flex-margin-left-auto-可使元素右对齐\" class=\"headerlink\" title=\"flex+margin-left:auto;可使元素右对齐\"></a>flex+margin-left:auto;可使元素右对齐</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;Item1&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item item-2&quot;&gt;Item2&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item-2 &#123;</span><br><span class=\"line\">  margin-left: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"flex-margin-auto-可使元素水平垂直居中\"><a href=\"#flex-margin-auto-可使元素水平垂直居中\" class=\"headerlink\" title=\"flex+margin:auto;可使元素水平垂直居中\"></a>flex+margin:auto;可使元素水平垂直居中</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;Item1&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  height: 400px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">  width: 200px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  margin: auto auto;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>grid可参考flex，暂不研究</strong></p>\n<hr>\n<hr>\n<blockquote>\n<p>参考文献：<br>英文版：<a href=\"https://ishadeed.com/article/auto-css/\">https://ishadeed.com/article/auto-css/</a><br>中文翻译版：<a href=\"https://blog.csdn.net/qq449245884/article/details/105963479/\">https://blog.csdn.net/qq449245884/article/details/105963479/</a><br><a href=\"https://css-tricks.com/how-auto-margins-work-in-flexbox/\">https://css-tricks.com/how-auto-margins-work-in-flexbox/</a>  </p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<blockquote>\n<p>根据auto在CSS常用属性的实际表现来探究auto的作用</p>\n</blockquote>\n<p>auto是自适应，自动的意思</p>\n<h1 id=\"1-width-auto\"><a href=\"#1-width-auto\" class=\"headerlink\" title=\"1.width:auto;\"></a>1.width:auto;</h1><p>width默认值（即不设置width值时）是auto<br>当使用<code>width:auto;</code>时，元素的宽被限制在父元素内，元素内容的宽度会自动减去元素的margin，padding和border，即元素内容自动充满元素剩余空间</p>\n<h2 id=\"width-auto-VS-width-100\"><a href=\"#width-auto-VS-width-100\" class=\"headerlink\" title=\"width:auto; VS width:100%;\"></a>width:auto; VS width:100%;</h2><p><code>width:auto;</code>表示：父元素内容宽度=子元素margin+padding+border+content(元素内容宽度，即元素的剩余空间)</p>\n<p><code>width:100%;</code>表示：父元素内容宽度=子元素content(即子元素内容宽度等于父元素宽度)</p>\n<p><strong>注意：适用标准浏览器的盒子模型，不适用IE盒子模型</strong></p>\n<h1 id=\"2-height-auto\"><a href=\"#2-height-auto\" class=\"headerlink\" title=\"2.height:auto;\"></a>2.height:auto;</h1><p>height默认值是auto<br><code>height:auto;</code>，元素高度等于元素内容高度，此时即使设置<code>height:100%;</code>元素高度也还是元素的内容高度</p>\n<h1 id=\"3-margin-auto\"><a href=\"#3-margin-auto\" class=\"headerlink\" title=\"3.margin:auto;\"></a>3.margin:auto;</h1><p>margin的默认值是0，表示元素没有margin<br>当使用<code>margin:auto;</code>，除去元素的content内容的宽高、padding、border，剩余空间都由margin来填充</p>\n<p>如下代码，元素宽高确定，巧用<code>margin:auto;</code>，达到水平垂直居中效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;I am centered.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下代码，元素宽确定，巧用<code>margin:0 auto;</code>，让元素水平居中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;I am centered.&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>margin-inline和margin-block属性是实验中属性，暂不研究</strong></p>\n<h1 id=\"4-background-size-auto\"><a href=\"#4-background-size-auto\" class=\"headerlink\" title=\"4.background-size:auto;\"></a>4.background-size:auto;</h1><p>background-size默认值是auto，以背景图片的比例缩放背景图片</p>\n<h1 id=\"5-top-right-bottom-left-auto\"><a href=\"#5-top-right-bottom-left-auto\" class=\"headerlink\" title=\"5.top/right/bottom/left:auto;\"></a>5.top/right/bottom/left:auto;</h1><p>top/right/bottom/left的默认值是auto</p>\n<p><strong>MDN</strong><br><strong>left:auto</strong></p>\n<p><strong>对于绝对定位元素，元素将忽略此属性而以right属性为准，如果此时设置width: auto，将基于内容需要的宽度设置宽度；如果right也为auto的话，元素的水平位置就是它假如作为静态 (即 static) 元素时该在的位置</strong></p>\n<p><strong>对于相对定位元素，元素相对正常位置的偏移量将基于right属性；如果right也为auto的话，元素将不会有偏移</strong></p>\n<h1 id=\"6-z-index-auto\"><a href=\"#6-z-index-auto\" class=\"headerlink\" title=\"6.z-index:auto;\"></a>6.z-index:auto;</h1><p>z-index默认值是auto<br>盒子不会创建一个新的本地堆叠上下文<br>在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同</p>\n<h1 id=\"7-overflow-auto\"><a href=\"#7-overflow-auto\" class=\"headerlink\" title=\"7.overflow:auto;\"></a>7.overflow:auto;</h1><p>overflow默认值是visible，内容不能被裁减并且可能渲染到边距盒（padding）的外部</p>\n<p><strong>MDN：<code>overflow:auto;</code></strong><br><strong>取决于用户代理。如果内容适应边距（padding）盒，它看起来与 visible 相同，但是仍然建立了一个新的块级格式化上下文；如果内容溢出，则浏览器提供滚动条</strong></p>\n<h1 id=\"8-cursor-auto\"><a href=\"#8-cursor-auto\" class=\"headerlink\" title=\"8.cursor:auto;\"></a>8.cursor:auto;</h1><p>cursor默认值是auto，浏览器根据当前内容决定指针样式</p>\n<h1 id=\"9-table-layout-auto\"><a href=\"#9-table-layout-auto\" class=\"headerlink\" title=\"9.table-layout:auto;\"></a>9.table-layout:auto;</h1><p>table-layout默认值是auto，表格及单元格的宽度取决于其包含的内容</p>\n<h1 id=\"10-flex-auto\"><a href=\"#10-flex-auto\" class=\"headerlink\" title=\"10.flex:auto;\"></a>10.flex:auto;</h1><p>flex默认值是<code>0 1 auto</code>，flex是flex-grow，flex-shrink，flex-basis的合并简写属性<br>当使用<code>flex:auto;</code>，等同于<code>flex:1 1 auto;</code></p>\n<h3 id=\"flex-margin-left-auto-可使元素右对齐\"><a href=\"#flex-margin-left-auto-可使元素右对齐\" class=\"headerlink\" title=\"flex+margin-left:auto;可使元素右对齐\"></a>flex+margin-left:auto;可使元素右对齐</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;Item1&lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item item-2&quot;&gt;Item2&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item-2 &#123;</span><br><span class=\"line\">  margin-left: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"flex-margin-auto-可使元素水平垂直居中\"><a href=\"#flex-margin-auto-可使元素水平垂直居中\" class=\"headerlink\" title=\"flex+margin:auto;可使元素水平垂直居中\"></a>flex+margin:auto;可使元素水平垂直居中</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;item&quot;&gt;Item1&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  height: 400px;</span><br><span class=\"line\">  background-color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.item &#123;</span><br><span class=\"line\">  width: 200px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  margin: auto auto;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>grid可参考flex，暂不研究</strong></p>\n<hr>\n<hr>\n<blockquote>\n<p>参考文献：<br>英文版：<a href=\"https://ishadeed.com/article/auto-css/\">https://ishadeed.com/article/auto-css/</a><br>中文翻译版：<a href=\"https://blog.csdn.net/qq449245884/article/details/105963479/\">https://blog.csdn.net/qq449245884/article/details/105963479/</a><br><a href=\"https://css-tricks.com/how-auto-margins-work-in-flexbox/\">https://css-tricks.com/how-auto-margins-work-in-flexbox/</a>  </p>\n</blockquote>\n<hr>\n"},{"title":"JavaScript定义变量","date":"2021-12-23T06:22:39.000Z","_content":"\n## 一、声明变量\n\n**1.** 优先执行：在执行任何代码之前进行处理\n**2.** 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的\n**3.** 作用域在当前执行上下文：作用域限制函数内或全局作用域\n\n**注：** 建议先声明变量再使用，在 ES5 严格模式下，分配值给未声明变量将引发错误\n\n---\n\n声明变量的方法：\nES5：var 和 function\nES6：var、function、let、const、import、class\n\n---\n\n#### 优先执行\n\n**变量提升：** 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”\n始终在作用域顶部声明变量（全局/函数代码的顶部）\n变量提升影响变量声明，不影响其值的初始化\n\n#### 不可配置性\n\n```\nvar a=1;\nb=2;\ndelete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示\ndelete this.b;\nconsole.info(a,b);//抛出refrenceerror（引用错误，b已被删除）\n```\n\n#### 声明多个变量\n\n**隐式声明全局变量**\n在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）\n\n```\nvar a=b='A';\n//等效于\nb='A';\nvar a='A';\n//连等操作是从右向左执行的，相当于b = 'A'、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量\nvar a=(b='A');\nconsole.info(a,b);//'A','A'\n//并且赋值号返回右侧变量的值\n\nvar x=y,y='A';\nconsole.info(x+y);//undefinedA\n//当\"x = y\"执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是'undefined'\n\nvar x=0;\nfunction f(){\n  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1\n}\nf();//不执行函数f，获取x的值全局声明的x，y则是未定义\nconsole.info(x,y);//0,1 //此处获取的全局的x,y\n```\n\n## 二、var 定义变量\n\nvar 声明的变量作用域是它当前的**执行上下文**，作用域是函数内或全局\n多次用 var 声明变量，变量不会丢失其值\n\n## 三、let 定义变量\n\nlet 声明的变量作用域被限制在块级中的变量、语句或者表达式\n在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError（语法错误）\n**注：** 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误\n\n#### var 与 let 不同\n\n初始化：\nlet 定义被执行时（编译时）才初始化\nvar 在作用域最顶部初始化且值为 undefined\n作用域：\nlet 被限制在块级中的变量、语句或者表达式\nvar 只能是全局或者整个函数块的\n\n#### 暂存死区\n\n“暂时性死区”（temporal dead zone，简称 TDZ）\n\n暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量（摘自 ES6 入门-->阮一峰）\n\n(let,const)在变量初始化之前访问变量导致 ReferenceError，该变量处在一个自顶部到初始化处理的“暂存死区”中\n使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError\n\n```\nfunction test(){\n   var foo = 33;\n   if (foo) {\n      let foo = (foo + 55); // ReferenceError\n      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）\n   }\n}\ntest();\n\nfunction go(n) {\n  // n here is defined!\n  console.info(n); // Object {a: [1,2,3]}\n\n  for (let n of n.a) { // ReferenceError，n.a被解析为位于指令本身(\"let n\")中的“ n”对象的属性“ a”。\n    console.info(n);\n  }\n}\ngo({a: [1, 2, 3]});\n\nlet x = 1;\n{\n  var x = 2; // SyntaxError for re-declaration\n}\n//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量\n//等效-->\nlet x=1;\nvar x;//重复\n{\n  x=2;\n}\n```\n\n## 四、cosnt 定义变量\n\n与 let 声明变量类似\nconst 定义块级常量，声明必须赋值\n创建一个值的只读引用，变量标识符不能重新分配\n在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）\n一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称\n\n```\nconst MY_FAV=7;\nif (MY_FAV === 7) {\n  // 没问题，并且创建了一个块作用域变量 MY_FAV\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n  console.info('my favorite number is ' + MY_FAV);//20\n  // 这被提升到全局上下文并引发错误\n  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明\n}\nconsole.info('my favorite number is ' + MY_FAV);//全局,7\n\nconst MY_OBJECT={'key':'value'}\nMY_OBJECT={'OTHER_KEY':'value'};//Uncaught TypeError: Assignment to constant variable 分配常量值错误\nMY_OBJECT.key='otherValue';\n\nconst MY_ARRAY = [];\n// 可以向数组填充数据\nMY_ARRAY.push('A'); // [\"A\"]\n// 但是，将一个新数组赋给变量会引发错误\nMY_ARRAY = ['B'];// Uncaught TypeError: Assignment to constant variable.\n```\n\n将对象冻结，使用 Object.freeze()，不让对象的引用值改变\n\n## 五、块级作用域与函数声明\n\nES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明\n浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数\nES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用\nES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n\n#### 对 ES6 的浏览器\n\n- 允许在块级作用域内声明函数\n- 函数声明类似于 var，即会提升到全局作用域或函数作用域的头部\n- 同时，函数声明还会提升到所在的块级作用域的头部\n\n严格模式下，函数只能声明在当前作用域的顶层。\n","source":"_posts/JavaScript定义变量.md","raw":"---\ntitle: JavaScript定义变量\ndate: 2021-12-23 14:22:39\ncategories:\n  - work\n---\n\n## 一、声明变量\n\n**1.** 优先执行：在执行任何代码之前进行处理\n**2.** 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的\n**3.** 作用域在当前执行上下文：作用域限制函数内或全局作用域\n\n**注：** 建议先声明变量再使用，在 ES5 严格模式下，分配值给未声明变量将引发错误\n\n---\n\n声明变量的方法：\nES5：var 和 function\nES6：var、function、let、const、import、class\n\n---\n\n#### 优先执行\n\n**变量提升：** 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”\n始终在作用域顶部声明变量（全局/函数代码的顶部）\n变量提升影响变量声明，不影响其值的初始化\n\n#### 不可配置性\n\n```\nvar a=1;\nb=2;\ndelete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示\ndelete this.b;\nconsole.info(a,b);//抛出refrenceerror（引用错误，b已被删除）\n```\n\n#### 声明多个变量\n\n**隐式声明全局变量**\n在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）\n\n```\nvar a=b='A';\n//等效于\nb='A';\nvar a='A';\n//连等操作是从右向左执行的，相当于b = 'A'、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量\nvar a=(b='A');\nconsole.info(a,b);//'A','A'\n//并且赋值号返回右侧变量的值\n\nvar x=y,y='A';\nconsole.info(x+y);//undefinedA\n//当\"x = y\"执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是'undefined'\n\nvar x=0;\nfunction f(){\n  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1\n}\nf();//不执行函数f，获取x的值全局声明的x，y则是未定义\nconsole.info(x,y);//0,1 //此处获取的全局的x,y\n```\n\n## 二、var 定义变量\n\nvar 声明的变量作用域是它当前的**执行上下文**，作用域是函数内或全局\n多次用 var 声明变量，变量不会丢失其值\n\n## 三、let 定义变量\n\nlet 声明的变量作用域被限制在块级中的变量、语句或者表达式\n在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError（语法错误）\n**注：** 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误\n\n#### var 与 let 不同\n\n初始化：\nlet 定义被执行时（编译时）才初始化\nvar 在作用域最顶部初始化且值为 undefined\n作用域：\nlet 被限制在块级中的变量、语句或者表达式\nvar 只能是全局或者整个函数块的\n\n#### 暂存死区\n\n“暂时性死区”（temporal dead zone，简称 TDZ）\n\n暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量（摘自 ES6 入门-->阮一峰）\n\n(let,const)在变量初始化之前访问变量导致 ReferenceError，该变量处在一个自顶部到初始化处理的“暂存死区”中\n使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError\n\n```\nfunction test(){\n   var foo = 33;\n   if (foo) {\n      let foo = (foo + 55); // ReferenceError\n      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）\n   }\n}\ntest();\n\nfunction go(n) {\n  // n here is defined!\n  console.info(n); // Object {a: [1,2,3]}\n\n  for (let n of n.a) { // ReferenceError，n.a被解析为位于指令本身(\"let n\")中的“ n”对象的属性“ a”。\n    console.info(n);\n  }\n}\ngo({a: [1, 2, 3]});\n\nlet x = 1;\n{\n  var x = 2; // SyntaxError for re-declaration\n}\n//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量\n//等效-->\nlet x=1;\nvar x;//重复\n{\n  x=2;\n}\n```\n\n## 四、cosnt 定义变量\n\n与 let 声明变量类似\nconst 定义块级常量，声明必须赋值\n创建一个值的只读引用，变量标识符不能重新分配\n在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）\n一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称\n\n```\nconst MY_FAV=7;\nif (MY_FAV === 7) {\n  // 没问题，并且创建了一个块作用域变量 MY_FAV\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n  console.info('my favorite number is ' + MY_FAV);//20\n  // 这被提升到全局上下文并引发错误\n  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明\n}\nconsole.info('my favorite number is ' + MY_FAV);//全局,7\n\nconst MY_OBJECT={'key':'value'}\nMY_OBJECT={'OTHER_KEY':'value'};//Uncaught TypeError: Assignment to constant variable 分配常量值错误\nMY_OBJECT.key='otherValue';\n\nconst MY_ARRAY = [];\n// 可以向数组填充数据\nMY_ARRAY.push('A'); // [\"A\"]\n// 但是，将一个新数组赋给变量会引发错误\nMY_ARRAY = ['B'];// Uncaught TypeError: Assignment to constant variable.\n```\n\n将对象冻结，使用 Object.freeze()，不让对象的引用值改变\n\n## 五、块级作用域与函数声明\n\nES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明\n浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数\nES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用\nES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。\n\n#### 对 ES6 的浏览器\n\n- 允许在块级作用域内声明函数\n- 函数声明类似于 var，即会提升到全局作用域或函数作用域的头部\n- 同时，函数声明还会提升到所在的块级作用域的头部\n\n严格模式下，函数只能声明在当前作用域的顶层。\n","slug":"JavaScript定义变量","published":1,"updated":"2022-11-29T06:57:42.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcuffzda0003os3mazt2d7o2","content":"<h2 id=\"一、声明变量\"><a href=\"#一、声明变量\" class=\"headerlink\" title=\"一、声明变量\"></a>一、声明变量</h2><p><strong>1.</strong> 优先执行：在执行任何代码之前进行处理<br><strong>2.</strong> 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的<br><strong>3.</strong> 作用域在当前执行上下文：作用域限制函数内或全局作用域</p>\n<p><strong>注：</strong> 建议先声明变量再使用，在 ES5 严格模式下，分配值给未声明变量将引发错误</p>\n<hr>\n<p>声明变量的方法：<br>ES5：var 和 function<br>ES6：var、function、let、const、import、class</p>\n<hr>\n<h4 id=\"优先执行\"><a href=\"#优先执行\" class=\"headerlink\" title=\"优先执行\"></a>优先执行</h4><p><strong>变量提升：</strong> 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”<br>始终在作用域顶部声明变量（全局/函数代码的顶部）<br>变量提升影响变量声明，不影响其值的初始化</p>\n<h4 id=\"不可配置性\"><a href=\"#不可配置性\" class=\"headerlink\" title=\"不可配置性\"></a>不可配置性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">b=2;</span><br><span class=\"line\">delete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示</span><br><span class=\"line\">delete this.b;</span><br><span class=\"line\">console.info(a,b);//抛出refrenceerror（引用错误，b已被删除）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明多个变量\"><a href=\"#声明多个变量\" class=\"headerlink\" title=\"声明多个变量\"></a>声明多个变量</h4><p><strong>隐式声明全局变量</strong><br>在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=b=&#x27;A&#x27;;</span><br><span class=\"line\">//等效于</span><br><span class=\"line\">b=&#x27;A&#x27;;</span><br><span class=\"line\">var a=&#x27;A&#x27;;</span><br><span class=\"line\">//连等操作是从右向左执行的，相当于b = &#x27;A&#x27;、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量</span><br><span class=\"line\">var a=(b=&#x27;A&#x27;);</span><br><span class=\"line\">console.info(a,b);//&#x27;A&#x27;,&#x27;A&#x27;</span><br><span class=\"line\">//并且赋值号返回右侧变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">var x=y,y=&#x27;A&#x27;;</span><br><span class=\"line\">console.info(x+y);//undefinedA</span><br><span class=\"line\">//当&quot;x = y&quot;执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是&#x27;undefined&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var x=0;</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();//不执行函数f，获取x的值全局声明的x，y则是未定义</span><br><span class=\"line\">console.info(x,y);//0,1 //此处获取的全局的x,y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、var-定义变量\"><a href=\"#二、var-定义变量\" class=\"headerlink\" title=\"二、var 定义变量\"></a>二、var 定义变量</h2><p>var 声明的变量作用域是它当前的<strong>执行上下文</strong>，作用域是函数内或全局<br>多次用 var 声明变量，变量不会丢失其值</p>\n<h2 id=\"三、let-定义变量\"><a href=\"#三、let-定义变量\" class=\"headerlink\" title=\"三、let 定义变量\"></a>三、let 定义变量</h2><p>let 声明的变量作用域被限制在块级中的变量、语句或者表达式<br>在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError（语法错误）<br><strong>注：</strong> 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误</p>\n<h4 id=\"var-与-let-不同\"><a href=\"#var-与-let-不同\" class=\"headerlink\" title=\"var 与 let 不同\"></a>var 与 let 不同</h4><p>初始化：<br>let 定义被执行时（编译时）才初始化<br>var 在作用域最顶部初始化且值为 undefined<br>作用域：<br>let 被限制在块级中的变量、语句或者表达式<br>var 只能是全局或者整个函数块的</p>\n<h4 id=\"暂存死区\"><a href=\"#暂存死区\" class=\"headerlink\" title=\"暂存死区\"></a>暂存死区</h4><p>“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量（摘自 ES6 入门–&gt;阮一峰）</p>\n<p>(let,const)在变量初始化之前访问变量导致 ReferenceError，该变量处在一个自顶部到初始化处理的“暂存死区”中<br>使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">   var foo = 33;</span><br><span class=\"line\">   if (foo) &#123;</span><br><span class=\"line\">      let foo = (foo + 55); // ReferenceError</span><br><span class=\"line\">      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\">function go(n) &#123;</span><br><span class=\"line\">  // n here is defined!</span><br><span class=\"line\">  console.info(n); // Object &#123;a: [1,2,3]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let n of n.a) &#123; // ReferenceError，n.a被解析为位于指令本身(&quot;let n&quot;)中的“ n”对象的属性“ a”。</span><br><span class=\"line\">    console.info(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">go(&#123;a: [1, 2, 3]&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">let x = 1;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  var x = 2; // SyntaxError for re-declaration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量</span><br><span class=\"line\">//等效--&gt;</span><br><span class=\"line\">let x=1;</span><br><span class=\"line\">var x;//重复</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  x=2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、cosnt-定义变量\"><a href=\"#四、cosnt-定义变量\" class=\"headerlink\" title=\"四、cosnt 定义变量\"></a>四、cosnt 定义变量</h2><p>与 let 声明变量类似<br>const 定义块级常量，声明必须赋值<br>创建一个值的只读引用，变量标识符不能重新分配<br>在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）<br>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MY_FAV=7;</span><br><span class=\"line\">if (MY_FAV === 7) &#123;</span><br><span class=\"line\">  // 没问题，并且创建了一个块作用域变量 MY_FAV</span><br><span class=\"line\">  // (works equally well with let to declare a block scoped non const variable)</span><br><span class=\"line\">  let MY_FAV = 20;</span><br><span class=\"line\">  console.info(&#x27;my favorite number is &#x27; + MY_FAV);//20</span><br><span class=\"line\">  // 这被提升到全局上下文并引发错误</span><br><span class=\"line\">  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.info(&#x27;my favorite number is &#x27; + MY_FAV);//全局,7</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_OBJECT=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;</span><br><span class=\"line\">MY_OBJECT=&#123;&#x27;OTHER_KEY&#x27;:&#x27;value&#x27;&#125;;//Uncaught TypeError: Assignment to constant variable 分配常量值错误</span><br><span class=\"line\">MY_OBJECT.key=&#x27;otherValue&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_ARRAY = [];</span><br><span class=\"line\">// 可以向数组填充数据</span><br><span class=\"line\">MY_ARRAY.push(&#x27;A&#x27;); // [&quot;A&quot;]</span><br><span class=\"line\">// 但是，将一个新数组赋给变量会引发错误</span><br><span class=\"line\">MY_ARRAY = [&#x27;B&#x27;];// Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n\n<p>将对象冻结，使用 Object.freeze()，不让对象的引用值改变</p>\n<h2 id=\"五、块级作用域与函数声明\"><a href=\"#五、块级作用域与函数声明\" class=\"headerlink\" title=\"五、块级作用域与函数声明\"></a>五、块级作用域与函数声明</h2><p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明<br>浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数<br>ES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用<br>ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>\n<h4 id=\"对-ES6-的浏览器\"><a href=\"#对-ES6-的浏览器\" class=\"headerlink\" title=\"对 ES6 的浏览器\"></a>对 ES6 的浏览器</h4><ul>\n<li>允许在块级作用域内声明函数</li>\n<li>函数声明类似于 var，即会提升到全局作用域或函数作用域的头部</li>\n<li>同时，函数声明还会提升到所在的块级作用域的头部</li>\n</ul>\n<p>严格模式下，函数只能声明在当前作用域的顶层。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、声明变量\"><a href=\"#一、声明变量\" class=\"headerlink\" title=\"一、声明变量\"></a>一、声明变量</h2><p><strong>1.</strong> 优先执行：在执行任何代码之前进行处理<br><strong>2.</strong> 不可配置性：声明变量所在上下文环境的不可配置属性，非声明变量是可配置的<br><strong>3.</strong> 作用域在当前执行上下文：作用域限制函数内或全局作用域</p>\n<p><strong>注：</strong> 建议先声明变量再使用，在 ES5 严格模式下，分配值给未声明变量将引发错误</p>\n<hr>\n<p>声明变量的方法：<br>ES5：var 和 function<br>ES6：var、function、let、const、import、class</p>\n<hr>\n<h4 id=\"优先执行\"><a href=\"#优先执行\" class=\"headerlink\" title=\"优先执行\"></a>优先执行</h4><p><strong>变量提升：</strong> 变量在任意代码执行之前处理，意味着变量可以在声明之前使用，这种行为叫做“hosting”<br>始终在作用域顶部声明变量（全局/函数代码的顶部）<br>变量提升影响变量声明，不影响其值的初始化</p>\n<h4 id=\"不可配置性\"><a href=\"#不可配置性\" class=\"headerlink\" title=\"不可配置性\"></a>不可配置性</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">b=2;</span><br><span class=\"line\">delete this.a;//在严格模式下抛出typeError，其他情况下执行失败，但无提示</span><br><span class=\"line\">delete this.b;</span><br><span class=\"line\">console.info(a,b);//抛出refrenceerror（引用错误，b已被删除）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明多个变量\"><a href=\"#声明多个变量\" class=\"headerlink\" title=\"声明多个变量\"></a>声明多个变量</h4><p><strong>隐式声明全局变量</strong><br>在非严格模式下，直接赋值给未声明的变量中，则执行赋值后，该变量会被隐式地创建为全局变量（它将成为全局对象的属性）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=b=&#x27;A&#x27;;</span><br><span class=\"line\">//等效于</span><br><span class=\"line\">b=&#x27;A&#x27;;</span><br><span class=\"line\">var a=&#x27;A&#x27;;</span><br><span class=\"line\">//连等操作是从右向左执行的，相当于b = &#x27;A&#x27;、let a = b，很明显b没有声明就直接赋值了，所以会隐式创建为一个全局变量</span><br><span class=\"line\">var a=(b=&#x27;A&#x27;);</span><br><span class=\"line\">console.info(a,b);//&#x27;A&#x27;,&#x27;A&#x27;</span><br><span class=\"line\">//并且赋值号返回右侧变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">var x=y,y=&#x27;A&#x27;;</span><br><span class=\"line\">console.info(x+y);//undefinedA</span><br><span class=\"line\">//当&quot;x = y&quot;执行时，y 已经存在，所以不抛出ReferenceError，并且它的值是&#x27;undefined&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">var x=0;</span><br><span class=\"line\">function f()&#123;</span><br><span class=\"line\">  var x=y=1;//此处x为函数内局部变量，执行函数f之后隐式创建全局变量y并赋值1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f();//不执行函数f，获取x的值全局声明的x，y则是未定义</span><br><span class=\"line\">console.info(x,y);//0,1 //此处获取的全局的x,y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、var-定义变量\"><a href=\"#二、var-定义变量\" class=\"headerlink\" title=\"二、var 定义变量\"></a>二、var 定义变量</h2><p>var 声明的变量作用域是它当前的<strong>执行上下文</strong>，作用域是函数内或全局<br>多次用 var 声明变量，变量不会丢失其值</p>\n<h2 id=\"三、let-定义变量\"><a href=\"#三、let-定义变量\" class=\"headerlink\" title=\"三、let 定义变量\"></a>三、let 定义变量</h2><p>let 声明的变量作用域被限制在块级中的变量、语句或者表达式<br>在同一个函数或块作用域中重复声明同一个变量会引起 SyntaxError（语法错误）<br><strong>注：</strong> 在 switch 语句中只有一个块，多次 let 声明同一个变量则报错；在 case 子句中的块会创建一个新的块作用域的词法环境，就不会产生上诉重复声明的错误</p>\n<h4 id=\"var-与-let-不同\"><a href=\"#var-与-let-不同\" class=\"headerlink\" title=\"var 与 let 不同\"></a>var 与 let 不同</h4><p>初始化：<br>let 定义被执行时（编译时）才初始化<br>var 在作用域最顶部初始化且值为 undefined<br>作用域：<br>let 被限制在块级中的变量、语句或者表达式<br>var 只能是全局或者整个函数块的</p>\n<h4 id=\"暂存死区\"><a href=\"#暂存死区\" class=\"headerlink\" title=\"暂存死区\"></a>暂存死区</h4><p>“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量（摘自 ES6 入门–&gt;阮一峰）</p>\n<p>(let,const)在变量初始化之前访问变量导致 ReferenceError，该变量处在一个自顶部到初始化处理的“暂存死区”中<br>使用 typeof 检测暂存死区中的变量，抛出异常 RefeferenceError</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">   var foo = 33;</span><br><span class=\"line\">   if (foo) &#123;</span><br><span class=\"line\">      let foo = (foo + 55); // ReferenceError</span><br><span class=\"line\">      //先计算foo+55，但是foo存在暂时性死区中（foo在if块中声明foo之前使用，作用域是从内到外……就近）</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"></span><br><span class=\"line\">function go(n) &#123;</span><br><span class=\"line\">  // n here is defined!</span><br><span class=\"line\">  console.info(n); // Object &#123;a: [1,2,3]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let n of n.a) &#123; // ReferenceError，n.a被解析为位于指令本身(&quot;let n&quot;)中的“ n”对象的属性“ a”。</span><br><span class=\"line\">    console.info(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">go(&#123;a: [1, 2, 3]&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">let x = 1;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  var x = 2; // SyntaxError for re-declaration</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//var会将变量提升至块的顶部, 这会导致隐式地重复声明变量</span><br><span class=\"line\">//等效--&gt;</span><br><span class=\"line\">let x=1;</span><br><span class=\"line\">var x;//重复</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  x=2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、cosnt-定义变量\"><a href=\"#四、cosnt-定义变量\" class=\"headerlink\" title=\"四、cosnt 定义变量\"></a>四、cosnt 定义变量</h2><p>与 let 声明变量类似<br>const 定义块级常量，声明必须赋值<br>创建一个值的只读引用，变量标识符不能重新分配<br>在引用内容是对象的情况下，可以改变对象的内容（例如，其参数）<br>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MY_FAV=7;</span><br><span class=\"line\">if (MY_FAV === 7) &#123;</span><br><span class=\"line\">  // 没问题，并且创建了一个块作用域变量 MY_FAV</span><br><span class=\"line\">  // (works equally well with let to declare a block scoped non const variable)</span><br><span class=\"line\">  let MY_FAV = 20;</span><br><span class=\"line\">  console.info(&#x27;my favorite number is &#x27; + MY_FAV);//20</span><br><span class=\"line\">  // 这被提升到全局上下文并引发错误</span><br><span class=\"line\">  var MY_FAV = 20;//SyntaxError for re-declaration 语法错误，重复声明</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.info(&#x27;my favorite number is &#x27; + MY_FAV);//全局,7</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_OBJECT=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;</span><br><span class=\"line\">MY_OBJECT=&#123;&#x27;OTHER_KEY&#x27;:&#x27;value&#x27;&#125;;//Uncaught TypeError: Assignment to constant variable 分配常量值错误</span><br><span class=\"line\">MY_OBJECT.key=&#x27;otherValue&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const MY_ARRAY = [];</span><br><span class=\"line\">// 可以向数组填充数据</span><br><span class=\"line\">MY_ARRAY.push(&#x27;A&#x27;); // [&quot;A&quot;]</span><br><span class=\"line\">// 但是，将一个新数组赋给变量会引发错误</span><br><span class=\"line\">MY_ARRAY = [&#x27;B&#x27;];// Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n\n<p>将对象冻结，使用 Object.freeze()，不让对象的引用值改变</p>\n<h2 id=\"五、块级作用域与函数声明\"><a href=\"#五、块级作用域与函数声明\" class=\"headerlink\" title=\"五、块级作用域与函数声明\"></a>五、块级作用域与函数声明</h2><p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明<br>浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数<br>ES6 规定，块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用<br>ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p>\n<h4 id=\"对-ES6-的浏览器\"><a href=\"#对-ES6-的浏览器\" class=\"headerlink\" title=\"对 ES6 的浏览器\"></a>对 ES6 的浏览器</h4><ul>\n<li>允许在块级作用域内声明函数</li>\n<li>函数声明类似于 var，即会提升到全局作用域或函数作用域的头部</li>\n<li>同时，函数声明还会提升到所在的块级作用域的头部</li>\n</ul>\n<p>严格模式下，函数只能声明在当前作用域的顶层。</p>\n"},{"title":"我的第一篇博客","date":"2021-12-22T16:00:00.000Z","_content":"\n---\n太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……\n终于拥有一个属于我自己的博客啦\\~哈哈哈哈\n喔喔，欢迎来到我的小空间，Helen的博客主页\\~\n事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！\n---\n\n\n","source":"_posts/first.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2021-12-23\n---\n\n---\n太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……\n终于拥有一个属于我自己的博客啦\\~哈哈哈哈\n喔喔，欢迎来到我的小空间，Helen的博客主页\\~\n事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！\n---\n\n\n","slug":"first","published":1,"updated":"2021-12-23T06:37:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcuffzdb0004os3m7nbuhf3n","content":"<hr>\n<p>太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……<br>终于拥有一个属于我自己的博客啦~哈哈哈哈<br>喔喔，欢迎来到我的小空间，Helen的博客主页~<br>事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>太激动了！从大学学web到毕业以来，一直想拥有属于自己的博客，奈何一直觉得博客很难搭建，就迟迟未开始……<br>终于拥有一个属于我自己的博客啦~哈哈哈哈<br>喔喔，欢迎来到我的小空间，Helen的博客主页~<br>事实证明，拖延症是个坏毛病，解决一个问题，开始一件事情，最好就是从问题发现开始，或者现在立马开始！</p>\n<hr>\n"},{"title":"js深拷贝与浅拷贝","date":"2021-12-30T08:05:39.000Z","_content":"\n## 一、概念\n\n深拷贝：两个对象经过拷贝后，除了拷贝下来相同的属性之外，没有任何其他关联的两个对象\n浅拷贝：两个对象经过拷贝后，虽然属性相同，也是不同对象，但内部的对象指向同一个内存空间\n\n## 二、实现方式\n\n#### JSON 方法\n\n`let newObj = JSON.parse(JSON.stringify(oldObj))`\n缺点：无法拷贝对象里的函数、原型链的属性\n\n#### 循环递归\n\n```\nfunction deepCopy(source){\n  let target = Array.isArray(source)?[]:{}\n  for(let k in source){\n    if(typeof source[k] ==== 'object'){\n      target[k]=deepCopy(source[k])\n    }else{\n      target[k] = source[k]\n    }\n  }\n  return target;\n}\n```\n","source":"_posts/js深拷贝与浅拷贝.md","raw":"---\ntitle: js深拷贝与浅拷贝\ndate: 2021-12-30 16:05:39\ntags: work\n---\n\n## 一、概念\n\n深拷贝：两个对象经过拷贝后，除了拷贝下来相同的属性之外，没有任何其他关联的两个对象\n浅拷贝：两个对象经过拷贝后，虽然属性相同，也是不同对象，但内部的对象指向同一个内存空间\n\n## 二、实现方式\n\n#### JSON 方法\n\n`let newObj = JSON.parse(JSON.stringify(oldObj))`\n缺点：无法拷贝对象里的函数、原型链的属性\n\n#### 循环递归\n\n```\nfunction deepCopy(source){\n  let target = Array.isArray(source)?[]:{}\n  for(let k in source){\n    if(typeof source[k] ==== 'object'){\n      target[k]=deepCopy(source[k])\n    }else{\n      target[k] = source[k]\n    }\n  }\n  return target;\n}\n```\n","slug":"js深拷贝与浅拷贝","published":1,"updated":"2021-12-30T08:19:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcuffzdd0006os3mgllk5tp0","content":"<h2 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h2><p>深拷贝：两个对象经过拷贝后，除了拷贝下来相同的属性之外，没有任何其他关联的两个对象<br>浅拷贝：两个对象经过拷贝后，虽然属性相同，也是不同对象，但内部的对象指向同一个内存空间</p>\n<h2 id=\"二、实现方式\"><a href=\"#二、实现方式\" class=\"headerlink\" title=\"二、实现方式\"></a>二、实现方式</h2><h4 id=\"JSON-方法\"><a href=\"#JSON-方法\" class=\"headerlink\" title=\"JSON 方法\"></a>JSON 方法</h4><p><code>let newObj = JSON.parse(JSON.stringify(oldObj))</code><br>缺点：无法拷贝对象里的函数、原型链的属性</p>\n<h4 id=\"循环递归\"><a href=\"#循环递归\" class=\"headerlink\" title=\"循环递归\"></a>循环递归</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepCopy(source)&#123;</span><br><span class=\"line\">  let target = Array.isArray(source)?[]:&#123;&#125;</span><br><span class=\"line\">  for(let k in source)&#123;</span><br><span class=\"line\">    if(typeof source[k] ==== &#x27;object&#x27;)&#123;</span><br><span class=\"line\">      target[k]=deepCopy(source[k])</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      target[k] = source[k]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h2><p>深拷贝：两个对象经过拷贝后，除了拷贝下来相同的属性之外，没有任何其他关联的两个对象<br>浅拷贝：两个对象经过拷贝后，虽然属性相同，也是不同对象，但内部的对象指向同一个内存空间</p>\n<h2 id=\"二、实现方式\"><a href=\"#二、实现方式\" class=\"headerlink\" title=\"二、实现方式\"></a>二、实现方式</h2><h4 id=\"JSON-方法\"><a href=\"#JSON-方法\" class=\"headerlink\" title=\"JSON 方法\"></a>JSON 方法</h4><p><code>let newObj = JSON.parse(JSON.stringify(oldObj))</code><br>缺点：无法拷贝对象里的函数、原型链的属性</p>\n<h4 id=\"循环递归\"><a href=\"#循环递归\" class=\"headerlink\" title=\"循环递归\"></a>循环递归</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepCopy(source)&#123;</span><br><span class=\"line\">  let target = Array.isArray(source)?[]:&#123;&#125;</span><br><span class=\"line\">  for(let k in source)&#123;</span><br><span class=\"line\">    if(typeof source[k] ==== &#x27;object&#x27;)&#123;</span><br><span class=\"line\">      target[k]=deepCopy(source[k])</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      target[k] = source[k]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"import与export","date":"2021-12-27T02:42:07.000Z","_content":"\n## 一、import\n\n#### 静态 import\n\n初始化加载依赖项的最优选择，在加载时就被编译\n导入的模块运行在严格模式下\n在浏览器中，import 语句只能在声明了 type=\"module\" 的 script 的标签中使用\n\n```\nimport xxx from 'ppp'\nimport * as xxx from 'ppp'\nimport {xxx,yyy} from 'ppp'\nimport {xxx as aaa,yyy as bbb} from 'ppp'\nimport 'ppp';//整个模块仅为副作，运行模块中的全局代码, 但实际上不导入任何值\n```\n\n#### 动态 import\n\n按需加载模块\n不依赖 type=\"module\" 的 script 标签\n关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise，也支持 await 关键字\n\n## 二、export\n\n导出的模块处于严格模式\n\n#### 命名导出（每个模块包含任意数量）\n\n```\nexport {myFunction,myVariable}\n```\n\n#### 默认导出（每个模块包含一个）\n\n```\nexport let name1,name2,...,nameN;//var const均适用\nexport let name1=...,name2=...,...,nameN=...;//var const均适用\nexport function functionName(){...};\nexport class className{...}\n```\n","source":"_posts/import与export.md","raw":"---\ntitle: import与export\ndate: 2021-12-27 10:42:07\ntags: work\n---\n\n## 一、import\n\n#### 静态 import\n\n初始化加载依赖项的最优选择，在加载时就被编译\n导入的模块运行在严格模式下\n在浏览器中，import 语句只能在声明了 type=\"module\" 的 script 的标签中使用\n\n```\nimport xxx from 'ppp'\nimport * as xxx from 'ppp'\nimport {xxx,yyy} from 'ppp'\nimport {xxx as aaa,yyy as bbb} from 'ppp'\nimport 'ppp';//整个模块仅为副作，运行模块中的全局代码, 但实际上不导入任何值\n```\n\n#### 动态 import\n\n按需加载模块\n不依赖 type=\"module\" 的 script 标签\n关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise，也支持 await 关键字\n\n## 二、export\n\n导出的模块处于严格模式\n\n#### 命名导出（每个模块包含任意数量）\n\n```\nexport {myFunction,myVariable}\n```\n\n#### 默认导出（每个模块包含一个）\n\n```\nexport let name1,name2,...,nameN;//var const均适用\nexport let name1=...,name2=...,...,nameN=...;//var const均适用\nexport function functionName(){...};\nexport class className{...}\n```\n","slug":"import与export","published":1,"updated":"2021-12-27T06:24:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcuffzdg000aos3m9due52q4","content":"<h2 id=\"一、import\"><a href=\"#一、import\" class=\"headerlink\" title=\"一、import\"></a>一、import</h2><h4 id=\"静态-import\"><a href=\"#静态-import\" class=\"headerlink\" title=\"静态 import\"></a>静态 import</h4><p>初始化加载依赖项的最优选择，在加载时就被编译<br>导入的模块运行在严格模式下<br>在浏览器中，import 语句只能在声明了 type=”module” 的 script 的标签中使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import xxx from &#x27;ppp&#x27;</span><br><span class=\"line\">import * as xxx from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#123;xxx,yyy&#125; from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#123;xxx as aaa,yyy as bbb&#125; from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#x27;ppp&#x27;;//整个模块仅为副作，运行模块中的全局代码, 但实际上不导入任何值</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态-import\"><a href=\"#动态-import\" class=\"headerlink\" title=\"动态 import\"></a>动态 import</h4><p>按需加载模块<br>不依赖 type=”module” 的 script 标签<br>关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise，也支持 await 关键字</p>\n<h2 id=\"二、export\"><a href=\"#二、export\" class=\"headerlink\" title=\"二、export\"></a>二、export</h2><p>导出的模块处于严格模式</p>\n<h4 id=\"命名导出（每个模块包含任意数量）\"><a href=\"#命名导出（每个模块包含任意数量）\" class=\"headerlink\" title=\"命名导出（每个模块包含任意数量）\"></a>命名导出（每个模块包含任意数量）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;myFunction,myVariable&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认导出（每个模块包含一个）\"><a href=\"#默认导出（每个模块包含一个）\" class=\"headerlink\" title=\"默认导出（每个模块包含一个）\"></a>默认导出（每个模块包含一个）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export let name1,name2,...,nameN;//var const均适用</span><br><span class=\"line\">export let name1=...,name2=...,...,nameN=...;//var const均适用</span><br><span class=\"line\">export function functionName()&#123;...&#125;;</span><br><span class=\"line\">export class className&#123;...&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、import\"><a href=\"#一、import\" class=\"headerlink\" title=\"一、import\"></a>一、import</h2><h4 id=\"静态-import\"><a href=\"#静态-import\" class=\"headerlink\" title=\"静态 import\"></a>静态 import</h4><p>初始化加载依赖项的最优选择，在加载时就被编译<br>导入的模块运行在严格模式下<br>在浏览器中，import 语句只能在声明了 type=”module” 的 script 的标签中使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import xxx from &#x27;ppp&#x27;</span><br><span class=\"line\">import * as xxx from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#123;xxx,yyy&#125; from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#123;xxx as aaa,yyy as bbb&#125; from &#x27;ppp&#x27;</span><br><span class=\"line\">import &#x27;ppp&#x27;;//整个模块仅为副作，运行模块中的全局代码, 但实际上不导入任何值</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态-import\"><a href=\"#动态-import\" class=\"headerlink\" title=\"动态 import\"></a>动态 import</h4><p>按需加载模块<br>不依赖 type=”module” 的 script 标签<br>关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise，也支持 await 关键字</p>\n<h2 id=\"二、export\"><a href=\"#二、export\" class=\"headerlink\" title=\"二、export\"></a>二、export</h2><p>导出的模块处于严格模式</p>\n<h4 id=\"命名导出（每个模块包含任意数量）\"><a href=\"#命名导出（每个模块包含任意数量）\" class=\"headerlink\" title=\"命名导出（每个模块包含任意数量）\"></a>命名导出（每个模块包含任意数量）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;myFunction,myVariable&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认导出（每个模块包含一个）\"><a href=\"#默认导出（每个模块包含一个）\" class=\"headerlink\" title=\"默认导出（每个模块包含一个）\"></a>默认导出（每个模块包含一个）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export let name1,name2,...,nameN;//var const均适用</span><br><span class=\"line\">export let name1=...,name2=...,...,nameN=...;//var const均适用</span><br><span class=\"line\">export function functionName()&#123;...&#125;;</span><br><span class=\"line\">export class className&#123;...&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"layout","title":"类型转换","date":"2023-01-13T02:10:06.000Z","_content":"\n---\n\n# 一、结果类型\n\n* String\n* Boolean\n* Number\n\n\n# 二、String(字符串)、Number(数值)和Boolean(布尔)转换\n\n### 1.字符串\n\n除`null`和`undefined`外，所有值都有`toString()`方法，结果与`String()`方法一致\n\n**String**\n```\nString();''\nString({});//'[object Object]'\nString([]);//''\nString(undefined);//'undefined'\nString(null);//'null'\nString(NaN);//'NaN'\nString(Symbol());//'Symbol()'\nString([0]);//'0'\nString([0,1]);//'0,1'\nString(0);//'0'\nString(' ');//' ' 非空串，包含一个空格\n```\n\n**toSting()**\n```\ntoString();//'[object Undefined]'\n\n{}.toString();//Uncaught SyntaxError: Unexpected token '.'\n({}.toString());//'[object Object]'\n\n[].toString();//''\n\n(undefined.toString())或undefined.toString();//Uncaught TypeError: Cannot read properties of undefined (reading 'toString')\n\nnull.toString();//Uncaught TypeError: Cannot read properties of null (reading 'toString')\n\nNaN.toString();//'NaN'\n\nSymbol().toString();//'Symbol()'\n\n[0].toString();//'0'\n\n[0,1].toString();//'0,1'\n\n0.toString();//Uncaught SyntaxError: Invalid or unexpected token\n(0.toString());//Uncaught SyntaxError: Invalid or unexpected token\n\n' '.toString();//' '非空串，包含一个空格\n```\n\n**空串('')+特殊值** \n\n为了更清晰，字符串+任何值=>字符串，实验以下代码\n\n```\n''+0;//'0'\n''+[];//''\n''+{};//'[object Object]'\n''+undefined;//'undefined'\n''+null;//'null'\n''+NaN;//'NaN'\n''+[0];//'0'\n''+[0,1];//'0,1'\n''+Symbol();//Uncaught TypeError: Cannot convert a Symbol value to a string\n```\n\n\n### 2.数值\n\n字符串转换成数值：引擎都会先去除字符串起始和末尾的空白，比如\\n \\t，去除空表后，字符串无法转换成数字时，则返回NaN\n\n**Number**\n```\nNumber({});//NaN\nNumber(NaN);//NaN\nNumber(undefined);//NaN\nNumber('true');//NaN\nNumber('false');//NaN\nNumber('123id');//NaN\nNumber('id123');//NaN\nNumber([0,1]);//NaN\nNumber([0]);//0\nNumber();//0\nNumber(null);//0\nNumber([]);//0\nNumber('');//0\nNumber(' ');//0 非空串，包含一个空格\nNumber(false);//0\nNumber(true);//1\nNumber(\"-12.34\");// -12.34\nNumber(\"\\n\");// 0\nNumber(Symbol());//Uncaught TypeError: Cannot convert a Symbol value to a number\n```\n\n**+(一元)**\n```\n+{};//NaN\n+NaN;//NaN\n+undefined;//NaN\n+'true';//NaN\n+'123id';//NaN\n+'id123';//NaN\n+[0,1];//NaN\n+[0];//0\n+0;//0\n+null;//0\n+[];//0\n+'';//0\n+' ';//0\n+false;//0\n+true;//1\n```\n\n**parseFloat/parseInt** \n```\nparseInt([0,1]);//0\nparseInt(0);//0\nparseInt(1);//1\nparseInt('123id');//123\nparseInt('id123');//NaN\nparseInt();//NaN\nparseInt({});//NaN\nparseInt([]);//NaN\nparseInt(undefined);//NaN\nparseInt(null);//NaN\nparseInt('true');//NaN\nparseInt('');//NaN\nparseInt(' ');//NaN\nparseInt(false);//NaN\nparseInt(true);//NaN\nparseInt(NaN);//NaN\nparseInt('0x89id');//137\nparseInt('0x89ed');//35309\n```\n***parseInt语法***\nparseInt(string, radix);\nstring：要被解析的值。将参数转换为字符串 (使用 ToString抽象操作)，字符串开头的空白符将会被忽略\nradix：从 2 到 36 的整数，表示进制的基数，超出这个范围，将返回 NaN；假如指定 0 或未指定，基数将会根据字符串的值进行推算（没有默认值，不是10，例0x开头会自动转成8进制）\n\n**运算符(待完善...)**\n\n* `-` `*` `/` `%` 适用`Number`将两操作数转换后得到的结果\n\n* `|` `&` `^` `~` \n\n* `>` `<` `>=` `<=`\n`NaN` , `undefined` 与转换后的值比较都为 `false`\n\n`{}` 的特殊比较结果\n`{}` 放在操作符第一位最好用括号分组，否则引擎认为 `{}` 是块语句声明，直接忽略，无转换\n```\n({}>0);// > < >= <= 均false\n({}>1);// > < >= <= 均false\n({}>undefined);// > < >= <= 均false\n({}>NaN);// > < >= <= 均false\n({}>null);// > < >= <= 均false\n({}>{});//false\n({}>={});//true\n({}>[]);//true\n({}>=[]);//true\n({}>'1');//true\n({}>'0');//true\n({}>'');//true\n({}<[]);//false\n({}<=[]);//false\n(undefined>[]);//false\n({}>{});//false\n```\n\n\n### 3.布尔\n\n* 字符串转布尔值：除了空串('')，其他字符串转换成布尔值都是`true`\n* 数字转布尔值：除了数字0（和非数字NaN），其他数字布尔值为`true`\n* 任何非基本类型值总是转换成`true`\n\n```\nBoolean();//false\nBoolean('');//false\nBoolean(NaN);//false\nBoolean(undefined);//false\nBoolean(null);//false\nBoolean(false);//false\nBoolean(' ');//true\nBoolean('true');//true\nBoolean('false');//true\nBoolean('0');//true\nBoolean(true);//true\nBoolean({});//true\nBoolean([]);//true\nBoolean(Symbol());//true\n```\n\n\n# 三、不严格相等(==)\n\n### 1.转换规则\n\n`==`两边的操作数通常进行数值转换（除以下 ***特殊规则***外）\n\n#### 参考表格\n* ==或!= 特殊值的不严格相等\n[JavaScript-Equality-Table](https://dorey.github.io/JavaScript-Equality-Table/)\n\n* ==或!= 特殊值的不严格相等-图片\n![截图](images/JS-Equality-Table.png)\n\n\n### 2.特殊规则\n\n* `null/undefined`只与`null`和`undefined`等，且==两边操作数不转换成数字\n\n* NaN与任何值都不等，包括自身(==,===均适用)\n\n* 当`==`两个操作数都是字符串时，操作数都 ***不转换*** 为数字\n\n\n# 四、+（加）隐式转换\n\n### 优先级顺序\n\n* 1.操作数都是非基本类型，使用`[ToPrimitive]`转换成基本类型\n\n* 2.其中一个操作数是string（字符串），另一个操作数转换成字符串进行运算\n\n* 3.以上都不是，俩操作数都转成数值进行运算\n\n### 规则\n\n* 运算顺序是从左到右\n\n* 将字面量[]转成空串''\n\n# 五、Symbol\n\n* 1.symbol只能显示转换，不支持隐式转换，隐式转换会报错：TypeError\n\n* 2.symbol无法转换成数字，抛出TypeError错误\n\n\n# 六、对象值\n\n对象值转换成数字或字符串有专用内置属性`[[ToPrimitive]]`\n对象值转换主要使用定义在`Object.prototype`上的`valueOf`和`toString`两种方法\n`==`转换数组为数值时，数组先执行`valueOf()`，返回数组本身，再执行`toString()`，相当于执行数组的`join()`方法，将数组拼接成字符串\n\n运算规则：\n* 1).输入值本就是基本类型，不转换，直接返回；\n* 2).调佣`toString()`方法，结果是基本类型，返回；\n* 3).调用`valueOf()`，结果是基本类型，返回；\n* 4).`toString()`和`valueOf()`都无法得到基本类型值，抛出错误`TypeError`\n\n注：数值先调用`valueOf()`，返回值再调用`toString()`；字符串则相反先`toString()`再`valueOf()`\n数组和对象的`valueOf()`方法返回对象本身，因此被忽略\n大多数内置类型没有`valueOf()`方法，因此转换成数值和转换成字符串最后都是调用`toString()`\n\n\n# 参考文献\n\n[MDN:parseInt](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n\n[JavaScript Type Conversions](https://www.programiz.com/javascript/type-conversion)\n\n[JavaScript type coercion explained](https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/)\n\n[JavaScript Type Conversions Explained](https://blog.openreplay.com/javascript-type-conversions-explained/)\n\n---\n","source":"_posts/类型转换.md","raw":"---\nlayout:\n  - layout\ntitle: 类型转换\ndate: 2023-01-13 10:10:06\ntags:\n---\n\n---\n\n# 一、结果类型\n\n* String\n* Boolean\n* Number\n\n\n# 二、String(字符串)、Number(数值)和Boolean(布尔)转换\n\n### 1.字符串\n\n除`null`和`undefined`外，所有值都有`toString()`方法，结果与`String()`方法一致\n\n**String**\n```\nString();''\nString({});//'[object Object]'\nString([]);//''\nString(undefined);//'undefined'\nString(null);//'null'\nString(NaN);//'NaN'\nString(Symbol());//'Symbol()'\nString([0]);//'0'\nString([0,1]);//'0,1'\nString(0);//'0'\nString(' ');//' ' 非空串，包含一个空格\n```\n\n**toSting()**\n```\ntoString();//'[object Undefined]'\n\n{}.toString();//Uncaught SyntaxError: Unexpected token '.'\n({}.toString());//'[object Object]'\n\n[].toString();//''\n\n(undefined.toString())或undefined.toString();//Uncaught TypeError: Cannot read properties of undefined (reading 'toString')\n\nnull.toString();//Uncaught TypeError: Cannot read properties of null (reading 'toString')\n\nNaN.toString();//'NaN'\n\nSymbol().toString();//'Symbol()'\n\n[0].toString();//'0'\n\n[0,1].toString();//'0,1'\n\n0.toString();//Uncaught SyntaxError: Invalid or unexpected token\n(0.toString());//Uncaught SyntaxError: Invalid or unexpected token\n\n' '.toString();//' '非空串，包含一个空格\n```\n\n**空串('')+特殊值** \n\n为了更清晰，字符串+任何值=>字符串，实验以下代码\n\n```\n''+0;//'0'\n''+[];//''\n''+{};//'[object Object]'\n''+undefined;//'undefined'\n''+null;//'null'\n''+NaN;//'NaN'\n''+[0];//'0'\n''+[0,1];//'0,1'\n''+Symbol();//Uncaught TypeError: Cannot convert a Symbol value to a string\n```\n\n\n### 2.数值\n\n字符串转换成数值：引擎都会先去除字符串起始和末尾的空白，比如\\n \\t，去除空表后，字符串无法转换成数字时，则返回NaN\n\n**Number**\n```\nNumber({});//NaN\nNumber(NaN);//NaN\nNumber(undefined);//NaN\nNumber('true');//NaN\nNumber('false');//NaN\nNumber('123id');//NaN\nNumber('id123');//NaN\nNumber([0,1]);//NaN\nNumber([0]);//0\nNumber();//0\nNumber(null);//0\nNumber([]);//0\nNumber('');//0\nNumber(' ');//0 非空串，包含一个空格\nNumber(false);//0\nNumber(true);//1\nNumber(\"-12.34\");// -12.34\nNumber(\"\\n\");// 0\nNumber(Symbol());//Uncaught TypeError: Cannot convert a Symbol value to a number\n```\n\n**+(一元)**\n```\n+{};//NaN\n+NaN;//NaN\n+undefined;//NaN\n+'true';//NaN\n+'123id';//NaN\n+'id123';//NaN\n+[0,1];//NaN\n+[0];//0\n+0;//0\n+null;//0\n+[];//0\n+'';//0\n+' ';//0\n+false;//0\n+true;//1\n```\n\n**parseFloat/parseInt** \n```\nparseInt([0,1]);//0\nparseInt(0);//0\nparseInt(1);//1\nparseInt('123id');//123\nparseInt('id123');//NaN\nparseInt();//NaN\nparseInt({});//NaN\nparseInt([]);//NaN\nparseInt(undefined);//NaN\nparseInt(null);//NaN\nparseInt('true');//NaN\nparseInt('');//NaN\nparseInt(' ');//NaN\nparseInt(false);//NaN\nparseInt(true);//NaN\nparseInt(NaN);//NaN\nparseInt('0x89id');//137\nparseInt('0x89ed');//35309\n```\n***parseInt语法***\nparseInt(string, radix);\nstring：要被解析的值。将参数转换为字符串 (使用 ToString抽象操作)，字符串开头的空白符将会被忽略\nradix：从 2 到 36 的整数，表示进制的基数，超出这个范围，将返回 NaN；假如指定 0 或未指定，基数将会根据字符串的值进行推算（没有默认值，不是10，例0x开头会自动转成8进制）\n\n**运算符(待完善...)**\n\n* `-` `*` `/` `%` 适用`Number`将两操作数转换后得到的结果\n\n* `|` `&` `^` `~` \n\n* `>` `<` `>=` `<=`\n`NaN` , `undefined` 与转换后的值比较都为 `false`\n\n`{}` 的特殊比较结果\n`{}` 放在操作符第一位最好用括号分组，否则引擎认为 `{}` 是块语句声明，直接忽略，无转换\n```\n({}>0);// > < >= <= 均false\n({}>1);// > < >= <= 均false\n({}>undefined);// > < >= <= 均false\n({}>NaN);// > < >= <= 均false\n({}>null);// > < >= <= 均false\n({}>{});//false\n({}>={});//true\n({}>[]);//true\n({}>=[]);//true\n({}>'1');//true\n({}>'0');//true\n({}>'');//true\n({}<[]);//false\n({}<=[]);//false\n(undefined>[]);//false\n({}>{});//false\n```\n\n\n### 3.布尔\n\n* 字符串转布尔值：除了空串('')，其他字符串转换成布尔值都是`true`\n* 数字转布尔值：除了数字0（和非数字NaN），其他数字布尔值为`true`\n* 任何非基本类型值总是转换成`true`\n\n```\nBoolean();//false\nBoolean('');//false\nBoolean(NaN);//false\nBoolean(undefined);//false\nBoolean(null);//false\nBoolean(false);//false\nBoolean(' ');//true\nBoolean('true');//true\nBoolean('false');//true\nBoolean('0');//true\nBoolean(true);//true\nBoolean({});//true\nBoolean([]);//true\nBoolean(Symbol());//true\n```\n\n\n# 三、不严格相等(==)\n\n### 1.转换规则\n\n`==`两边的操作数通常进行数值转换（除以下 ***特殊规则***外）\n\n#### 参考表格\n* ==或!= 特殊值的不严格相等\n[JavaScript-Equality-Table](https://dorey.github.io/JavaScript-Equality-Table/)\n\n* ==或!= 特殊值的不严格相等-图片\n![截图](images/JS-Equality-Table.png)\n\n\n### 2.特殊规则\n\n* `null/undefined`只与`null`和`undefined`等，且==两边操作数不转换成数字\n\n* NaN与任何值都不等，包括自身(==,===均适用)\n\n* 当`==`两个操作数都是字符串时，操作数都 ***不转换*** 为数字\n\n\n# 四、+（加）隐式转换\n\n### 优先级顺序\n\n* 1.操作数都是非基本类型，使用`[ToPrimitive]`转换成基本类型\n\n* 2.其中一个操作数是string（字符串），另一个操作数转换成字符串进行运算\n\n* 3.以上都不是，俩操作数都转成数值进行运算\n\n### 规则\n\n* 运算顺序是从左到右\n\n* 将字面量[]转成空串''\n\n# 五、Symbol\n\n* 1.symbol只能显示转换，不支持隐式转换，隐式转换会报错：TypeError\n\n* 2.symbol无法转换成数字，抛出TypeError错误\n\n\n# 六、对象值\n\n对象值转换成数字或字符串有专用内置属性`[[ToPrimitive]]`\n对象值转换主要使用定义在`Object.prototype`上的`valueOf`和`toString`两种方法\n`==`转换数组为数值时，数组先执行`valueOf()`，返回数组本身，再执行`toString()`，相当于执行数组的`join()`方法，将数组拼接成字符串\n\n运算规则：\n* 1).输入值本就是基本类型，不转换，直接返回；\n* 2).调佣`toString()`方法，结果是基本类型，返回；\n* 3).调用`valueOf()`，结果是基本类型，返回；\n* 4).`toString()`和`valueOf()`都无法得到基本类型值，抛出错误`TypeError`\n\n注：数值先调用`valueOf()`，返回值再调用`toString()`；字符串则相反先`toString()`再`valueOf()`\n数组和对象的`valueOf()`方法返回对象本身，因此被忽略\n大多数内置类型没有`valueOf()`方法，因此转换成数值和转换成字符串最后都是调用`toString()`\n\n\n# 参考文献\n\n[MDN:parseInt](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n\n[JavaScript Type Conversions](https://www.programiz.com/javascript/type-conversion)\n\n[JavaScript type coercion explained](https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/)\n\n[JavaScript Type Conversions Explained](https://blog.openreplay.com/javascript-type-conversions-explained/)\n\n---\n","slug":"类型转换","published":1,"updated":"2023-01-13T11:18:45.481Z","comments":1,"photos":[],"link":"","_id":"clcuffzdh000bos3mcx90dnq2","content":"<hr>\n<h1 id=\"一、结果类型\"><a href=\"#一、结果类型\" class=\"headerlink\" title=\"一、结果类型\"></a>一、结果类型</h1><ul>\n<li>String</li>\n<li>Boolean</li>\n<li>Number</li>\n</ul>\n<h1 id=\"二、String-字符串-、Number-数值-和Boolean-布尔-转换\"><a href=\"#二、String-字符串-、Number-数值-和Boolean-布尔-转换\" class=\"headerlink\" title=\"二、String(字符串)、Number(数值)和Boolean(布尔)转换\"></a>二、String(字符串)、Number(数值)和Boolean(布尔)转换</h1><h3 id=\"1-字符串\"><a href=\"#1-字符串\" class=\"headerlink\" title=\"1.字符串\"></a>1.字符串</h3><p>除<code>null</code>和<code>undefined</code>外，所有值都有<code>toString()</code>方法，结果与<code>String()</code>方法一致</p>\n<p><strong>String</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String();&#x27;&#x27;</span><br><span class=\"line\">String(&#123;&#125;);//&#x27;[object Object]&#x27;</span><br><span class=\"line\">String([]);//&#x27;&#x27;</span><br><span class=\"line\">String(undefined);//&#x27;undefined&#x27;</span><br><span class=\"line\">String(null);//&#x27;null&#x27;</span><br><span class=\"line\">String(NaN);//&#x27;NaN&#x27;</span><br><span class=\"line\">String(Symbol());//&#x27;Symbol()&#x27;</span><br><span class=\"line\">String([0]);//&#x27;0&#x27;</span><br><span class=\"line\">String([0,1]);//&#x27;0,1&#x27;</span><br><span class=\"line\">String(0);//&#x27;0&#x27;</span><br><span class=\"line\">String(&#x27; &#x27;);//&#x27; &#x27; 非空串，包含一个空格</span><br></pre></td></tr></table></figure>\n\n<p><strong>toSting()</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toString();//&#x27;[object Undefined]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;.toString();//Uncaught SyntaxError: Unexpected token &#x27;.&#x27;</span><br><span class=\"line\">(&#123;&#125;.toString());//&#x27;[object Object]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[].toString();//&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">(undefined.toString())或undefined.toString();//Uncaught TypeError: Cannot read properties of undefined (reading &#x27;toString&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">null.toString();//Uncaught TypeError: Cannot read properties of null (reading &#x27;toString&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">NaN.toString();//&#x27;NaN&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol().toString();//&#x27;Symbol()&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[0].toString();//&#x27;0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[0,1].toString();//&#x27;0,1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">0.toString();//Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\">(0.toString());//Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27; &#x27;.toString();//&#x27; &#x27;非空串，包含一个空格</span><br></pre></td></tr></table></figure>\n\n<p><strong>空串(‘’)+特殊值</strong> </p>\n<p>为了更清晰，字符串+任何值=&gt;字符串，实验以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&#x27;+0;//&#x27;0&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[];//&#x27;&#x27;</span><br><span class=\"line\">&#x27;&#x27;+&#123;&#125;;//&#x27;[object Object]&#x27;</span><br><span class=\"line\">&#x27;&#x27;+undefined;//&#x27;undefined&#x27;</span><br><span class=\"line\">&#x27;&#x27;+null;//&#x27;null&#x27;</span><br><span class=\"line\">&#x27;&#x27;+NaN;//&#x27;NaN&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[0];//&#x27;0&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[0,1];//&#x27;0,1&#x27;</span><br><span class=\"line\">&#x27;&#x27;+Symbol();//Uncaught TypeError: Cannot convert a Symbol value to a string</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-数值\"><a href=\"#2-数值\" class=\"headerlink\" title=\"2.数值\"></a>2.数值</h3><p>字符串转换成数值：引擎都会先去除字符串起始和末尾的空白，比如\\n \\t，去除空表后，字符串无法转换成数字时，则返回NaN</p>\n<p><strong>Number</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number(&#123;&#125;);//NaN</span><br><span class=\"line\">Number(NaN);//NaN</span><br><span class=\"line\">Number(undefined);//NaN</span><br><span class=\"line\">Number(&#x27;true&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;false&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;123id&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;id123&#x27;);//NaN</span><br><span class=\"line\">Number([0,1]);//NaN</span><br><span class=\"line\">Number([0]);//0</span><br><span class=\"line\">Number();//0</span><br><span class=\"line\">Number(null);//0</span><br><span class=\"line\">Number([]);//0</span><br><span class=\"line\">Number(&#x27;&#x27;);//0</span><br><span class=\"line\">Number(&#x27; &#x27;);//0 非空串，包含一个空格</span><br><span class=\"line\">Number(false);//0</span><br><span class=\"line\">Number(true);//1</span><br><span class=\"line\">Number(&quot;-12.34&quot;);// -12.34</span><br><span class=\"line\">Number(&quot;\\n&quot;);// 0</span><br><span class=\"line\">Number(Symbol());//Uncaught TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></table></figure>\n\n<p><strong>+(一元)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&#123;&#125;;//NaN</span><br><span class=\"line\">+NaN;//NaN</span><br><span class=\"line\">+undefined;//NaN</span><br><span class=\"line\">+&#x27;true&#x27;;//NaN</span><br><span class=\"line\">+&#x27;123id&#x27;;//NaN</span><br><span class=\"line\">+&#x27;id123&#x27;;//NaN</span><br><span class=\"line\">+[0,1];//NaN</span><br><span class=\"line\">+[0];//0</span><br><span class=\"line\">+0;//0</span><br><span class=\"line\">+null;//0</span><br><span class=\"line\">+[];//0</span><br><span class=\"line\">+&#x27;&#x27;;//0</span><br><span class=\"line\">+&#x27; &#x27;;//0</span><br><span class=\"line\">+false;//0</span><br><span class=\"line\">+true;//1</span><br></pre></td></tr></table></figure>\n\n<p><strong>parseFloat/parseInt</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt([0,1]);//0</span><br><span class=\"line\">parseInt(0);//0</span><br><span class=\"line\">parseInt(1);//1</span><br><span class=\"line\">parseInt(&#x27;123id&#x27;);//123</span><br><span class=\"line\">parseInt(&#x27;id123&#x27;);//NaN</span><br><span class=\"line\">parseInt();//NaN</span><br><span class=\"line\">parseInt(&#123;&#125;);//NaN</span><br><span class=\"line\">parseInt([]);//NaN</span><br><span class=\"line\">parseInt(undefined);//NaN</span><br><span class=\"line\">parseInt(null);//NaN</span><br><span class=\"line\">parseInt(&#x27;true&#x27;);//NaN</span><br><span class=\"line\">parseInt(&#x27;&#x27;);//NaN</span><br><span class=\"line\">parseInt(&#x27; &#x27;);//NaN</span><br><span class=\"line\">parseInt(false);//NaN</span><br><span class=\"line\">parseInt(true);//NaN</span><br><span class=\"line\">parseInt(NaN);//NaN</span><br><span class=\"line\">parseInt(&#x27;0x89id&#x27;);//137</span><br><span class=\"line\">parseInt(&#x27;0x89ed&#x27;);//35309</span><br></pre></td></tr></table></figure>\n<p><em><strong>parseInt语法</strong></em><br>parseInt(string, radix);<br>string：要被解析的值。将参数转换为字符串 (使用 ToString抽象操作)，字符串开头的空白符将会被忽略<br>radix：从 2 到 36 的整数，表示进制的基数，超出这个范围，将返回 NaN；假如指定 0 或未指定，基数将会根据字符串的值进行推算（没有默认值，不是10，例0x开头会自动转成8进制）</p>\n<p><strong>运算符(待完善…)</strong></p>\n<ul>\n<li><p><code>-</code> <code>*</code> <code>/</code> <code>%</code> 适用<code>Number</code>将两操作数转换后得到的结果</p>\n</li>\n<li><p><code>|</code> <code>&amp;</code> <code>^</code> <code>~</code> </p>\n</li>\n<li><p><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code><br><code>NaN</code> , <code>undefined</code> 与转换后的值比较都为 <code>false</code></p>\n</li>\n</ul>\n<p><code>&#123;&#125;</code> 的特殊比较结果<br><code>&#123;&#125;</code> 放在操作符第一位最好用括号分组，否则引擎认为 <code>&#123;&#125;</code> 是块语句声明，直接忽略，无转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123;&#125;&gt;0);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;1);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;undefined);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;NaN);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;null);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;&#123;&#125;);//false</span><br><span class=\"line\">(&#123;&#125;&gt;=&#123;&#125;);//true</span><br><span class=\"line\">(&#123;&#125;&gt;[]);//true</span><br><span class=\"line\">(&#123;&#125;&gt;=[]);//true</span><br><span class=\"line\">(&#123;&#125;&gt;&#x27;1&#x27;);//true</span><br><span class=\"line\">(&#123;&#125;&gt;&#x27;0&#x27;);//true</span><br><span class=\"line\">(&#123;&#125;&gt;&#x27;&#x27;);//true</span><br><span class=\"line\">(&#123;&#125;&lt;[]);//false</span><br><span class=\"line\">(&#123;&#125;&lt;=[]);//false</span><br><span class=\"line\">(undefined&gt;[]);//false</span><br><span class=\"line\">(&#123;&#125;&gt;&#123;&#125;);//false</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-布尔\"><a href=\"#3-布尔\" class=\"headerlink\" title=\"3.布尔\"></a>3.布尔</h3><ul>\n<li>字符串转布尔值：除了空串(‘’)，其他字符串转换成布尔值都是<code>true</code></li>\n<li>数字转布尔值：除了数字0（和非数字NaN），其他数字布尔值为<code>true</code></li>\n<li>任何非基本类型值总是转换成<code>true</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean();//false</span><br><span class=\"line\">Boolean(&#x27;&#x27;);//false</span><br><span class=\"line\">Boolean(NaN);//false</span><br><span class=\"line\">Boolean(undefined);//false</span><br><span class=\"line\">Boolean(null);//false</span><br><span class=\"line\">Boolean(false);//false</span><br><span class=\"line\">Boolean(&#x27; &#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;true&#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;false&#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;0&#x27;);//true</span><br><span class=\"line\">Boolean(true);//true</span><br><span class=\"line\">Boolean(&#123;&#125;);//true</span><br><span class=\"line\">Boolean([]);//true</span><br><span class=\"line\">Boolean(Symbol());//true</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"三、不严格相等\"><a href=\"#三、不严格相等\" class=\"headerlink\" title=\"三、不严格相等(==)\"></a>三、不严格相等(==)</h1><h3 id=\"1-转换规则\"><a href=\"#1-转换规则\" class=\"headerlink\" title=\"1.转换规则\"></a>1.转换规则</h3><p><code>==</code>两边的操作数通常进行数值转换（除以下 <em><strong>特殊规则</strong></em>外）</p>\n<h4 id=\"参考表格\"><a href=\"#参考表格\" class=\"headerlink\" title=\"参考表格\"></a>参考表格</h4><ul>\n<li><p>==或!= 特殊值的不严格相等<br><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">JavaScript-Equality-Table</a></p>\n</li>\n<li><p>==或!= 特殊值的不严格相等-图片<br><img src=\"/images/JS-Equality-Table.png\" alt=\"截图\"></p>\n</li>\n</ul>\n<h3 id=\"2-特殊规则\"><a href=\"#2-特殊规则\" class=\"headerlink\" title=\"2.特殊规则\"></a>2.特殊规则</h3><ul>\n<li><p><code>null/undefined</code>只与<code>null</code>和<code>undefined</code>等，且==两边操作数不转换成数字</p>\n</li>\n<li><p>NaN与任何值都不等，包括自身(==,===均适用)</p>\n</li>\n<li><p>当<code>==</code>两个操作数都是字符串时，操作数都 <em><strong>不转换</strong></em> 为数字</p>\n</li>\n</ul>\n<h1 id=\"四、-（加）隐式转换\"><a href=\"#四、-（加）隐式转换\" class=\"headerlink\" title=\"四、+（加）隐式转换\"></a>四、+（加）隐式转换</h1><h3 id=\"优先级顺序\"><a href=\"#优先级顺序\" class=\"headerlink\" title=\"优先级顺序\"></a>优先级顺序</h3><ul>\n<li><p>1.操作数都是非基本类型，使用<code>[ToPrimitive]</code>转换成基本类型</p>\n</li>\n<li><p>2.其中一个操作数是string（字符串），另一个操作数转换成字符串进行运算</p>\n</li>\n<li><p>3.以上都不是，俩操作数都转成数值进行运算</p>\n</li>\n</ul>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ul>\n<li><p>运算顺序是从左到右</p>\n</li>\n<li><p>将字面量[]转成空串’’</p>\n</li>\n</ul>\n<h1 id=\"五、Symbol\"><a href=\"#五、Symbol\" class=\"headerlink\" title=\"五、Symbol\"></a>五、Symbol</h1><ul>\n<li><p>1.symbol只能显示转换，不支持隐式转换，隐式转换会报错：TypeError</p>\n</li>\n<li><p>2.symbol无法转换成数字，抛出TypeError错误</p>\n</li>\n</ul>\n<h1 id=\"六、对象值\"><a href=\"#六、对象值\" class=\"headerlink\" title=\"六、对象值\"></a>六、对象值</h1><p>对象值转换成数字或字符串有专用内置属性<code>[[ToPrimitive]]</code><br>对象值转换主要使用定义在<code>Object.prototype</code>上的<code>valueOf</code>和<code>toString</code>两种方法<br><code>==</code>转换数组为数值时，数组先执行<code>valueOf()</code>，返回数组本身，再执行<code>toString()</code>，相当于执行数组的<code>join()</code>方法，将数组拼接成字符串</p>\n<p>运算规则：</p>\n<ul>\n<li>1).输入值本就是基本类型，不转换，直接返回；</li>\n<li>2).调佣<code>toString()</code>方法，结果是基本类型，返回；</li>\n<li>3).调用<code>valueOf()</code>，结果是基本类型，返回；</li>\n<li>4).<code>toString()</code>和<code>valueOf()</code>都无法得到基本类型值，抛出错误<code>TypeError</code></li>\n</ul>\n<p>注：数值先调用<code>valueOf()</code>，返回值再调用<code>toString()</code>；字符串则相反先<code>toString()</code>再<code>valueOf()</code><br>数组和对象的<code>valueOf()</code>方法返回对象本身，因此被忽略<br>大多数内置类型没有<code>valueOf()</code>方法，因此转换成数值和转换成字符串最后都是调用<code>toString()</code></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">MDN:parseInt</a></p>\n<p><a href=\"https://www.programiz.com/javascript/type-conversion\">JavaScript Type Conversions</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/\">JavaScript type coercion explained</a></p>\n<p><a href=\"https://blog.openreplay.com/javascript-type-conversions-explained/\">JavaScript Type Conversions Explained</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h1 id=\"一、结果类型\"><a href=\"#一、结果类型\" class=\"headerlink\" title=\"一、结果类型\"></a>一、结果类型</h1><ul>\n<li>String</li>\n<li>Boolean</li>\n<li>Number</li>\n</ul>\n<h1 id=\"二、String-字符串-、Number-数值-和Boolean-布尔-转换\"><a href=\"#二、String-字符串-、Number-数值-和Boolean-布尔-转换\" class=\"headerlink\" title=\"二、String(字符串)、Number(数值)和Boolean(布尔)转换\"></a>二、String(字符串)、Number(数值)和Boolean(布尔)转换</h1><h3 id=\"1-字符串\"><a href=\"#1-字符串\" class=\"headerlink\" title=\"1.字符串\"></a>1.字符串</h3><p>除<code>null</code>和<code>undefined</code>外，所有值都有<code>toString()</code>方法，结果与<code>String()</code>方法一致</p>\n<p><strong>String</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String();&#x27;&#x27;</span><br><span class=\"line\">String(&#123;&#125;);//&#x27;[object Object]&#x27;</span><br><span class=\"line\">String([]);//&#x27;&#x27;</span><br><span class=\"line\">String(undefined);//&#x27;undefined&#x27;</span><br><span class=\"line\">String(null);//&#x27;null&#x27;</span><br><span class=\"line\">String(NaN);//&#x27;NaN&#x27;</span><br><span class=\"line\">String(Symbol());//&#x27;Symbol()&#x27;</span><br><span class=\"line\">String([0]);//&#x27;0&#x27;</span><br><span class=\"line\">String([0,1]);//&#x27;0,1&#x27;</span><br><span class=\"line\">String(0);//&#x27;0&#x27;</span><br><span class=\"line\">String(&#x27; &#x27;);//&#x27; &#x27; 非空串，包含一个空格</span><br></pre></td></tr></table></figure>\n\n<p><strong>toSting()</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toString();//&#x27;[object Undefined]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;.toString();//Uncaught SyntaxError: Unexpected token &#x27;.&#x27;</span><br><span class=\"line\">(&#123;&#125;.toString());//&#x27;[object Object]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[].toString();//&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">(undefined.toString())或undefined.toString();//Uncaught TypeError: Cannot read properties of undefined (reading &#x27;toString&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">null.toString();//Uncaught TypeError: Cannot read properties of null (reading &#x27;toString&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">NaN.toString();//&#x27;NaN&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol().toString();//&#x27;Symbol()&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[0].toString();//&#x27;0&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[0,1].toString();//&#x27;0,1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">0.toString();//Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\">(0.toString());//Uncaught SyntaxError: Invalid or unexpected token</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27; &#x27;.toString();//&#x27; &#x27;非空串，包含一个空格</span><br></pre></td></tr></table></figure>\n\n<p><strong>空串(‘’)+特殊值</strong> </p>\n<p>为了更清晰，字符串+任何值=&gt;字符串，实验以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&#x27;+0;//&#x27;0&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[];//&#x27;&#x27;</span><br><span class=\"line\">&#x27;&#x27;+&#123;&#125;;//&#x27;[object Object]&#x27;</span><br><span class=\"line\">&#x27;&#x27;+undefined;//&#x27;undefined&#x27;</span><br><span class=\"line\">&#x27;&#x27;+null;//&#x27;null&#x27;</span><br><span class=\"line\">&#x27;&#x27;+NaN;//&#x27;NaN&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[0];//&#x27;0&#x27;</span><br><span class=\"line\">&#x27;&#x27;+[0,1];//&#x27;0,1&#x27;</span><br><span class=\"line\">&#x27;&#x27;+Symbol();//Uncaught TypeError: Cannot convert a Symbol value to a string</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-数值\"><a href=\"#2-数值\" class=\"headerlink\" title=\"2.数值\"></a>2.数值</h3><p>字符串转换成数值：引擎都会先去除字符串起始和末尾的空白，比如\\n \\t，去除空表后，字符串无法转换成数字时，则返回NaN</p>\n<p><strong>Number</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number(&#123;&#125;);//NaN</span><br><span class=\"line\">Number(NaN);//NaN</span><br><span class=\"line\">Number(undefined);//NaN</span><br><span class=\"line\">Number(&#x27;true&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;false&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;123id&#x27;);//NaN</span><br><span class=\"line\">Number(&#x27;id123&#x27;);//NaN</span><br><span class=\"line\">Number([0,1]);//NaN</span><br><span class=\"line\">Number([0]);//0</span><br><span class=\"line\">Number();//0</span><br><span class=\"line\">Number(null);//0</span><br><span class=\"line\">Number([]);//0</span><br><span class=\"line\">Number(&#x27;&#x27;);//0</span><br><span class=\"line\">Number(&#x27; &#x27;);//0 非空串，包含一个空格</span><br><span class=\"line\">Number(false);//0</span><br><span class=\"line\">Number(true);//1</span><br><span class=\"line\">Number(&quot;-12.34&quot;);// -12.34</span><br><span class=\"line\">Number(&quot;\\n&quot;);// 0</span><br><span class=\"line\">Number(Symbol());//Uncaught TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></table></figure>\n\n<p><strong>+(一元)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+&#123;&#125;;//NaN</span><br><span class=\"line\">+NaN;//NaN</span><br><span class=\"line\">+undefined;//NaN</span><br><span class=\"line\">+&#x27;true&#x27;;//NaN</span><br><span class=\"line\">+&#x27;123id&#x27;;//NaN</span><br><span class=\"line\">+&#x27;id123&#x27;;//NaN</span><br><span class=\"line\">+[0,1];//NaN</span><br><span class=\"line\">+[0];//0</span><br><span class=\"line\">+0;//0</span><br><span class=\"line\">+null;//0</span><br><span class=\"line\">+[];//0</span><br><span class=\"line\">+&#x27;&#x27;;//0</span><br><span class=\"line\">+&#x27; &#x27;;//0</span><br><span class=\"line\">+false;//0</span><br><span class=\"line\">+true;//1</span><br></pre></td></tr></table></figure>\n\n<p><strong>parseFloat/parseInt</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt([0,1]);//0</span><br><span class=\"line\">parseInt(0);//0</span><br><span class=\"line\">parseInt(1);//1</span><br><span class=\"line\">parseInt(&#x27;123id&#x27;);//123</span><br><span class=\"line\">parseInt(&#x27;id123&#x27;);//NaN</span><br><span class=\"line\">parseInt();//NaN</span><br><span class=\"line\">parseInt(&#123;&#125;);//NaN</span><br><span class=\"line\">parseInt([]);//NaN</span><br><span class=\"line\">parseInt(undefined);//NaN</span><br><span class=\"line\">parseInt(null);//NaN</span><br><span class=\"line\">parseInt(&#x27;true&#x27;);//NaN</span><br><span class=\"line\">parseInt(&#x27;&#x27;);//NaN</span><br><span class=\"line\">parseInt(&#x27; &#x27;);//NaN</span><br><span class=\"line\">parseInt(false);//NaN</span><br><span class=\"line\">parseInt(true);//NaN</span><br><span class=\"line\">parseInt(NaN);//NaN</span><br><span class=\"line\">parseInt(&#x27;0x89id&#x27;);//137</span><br><span class=\"line\">parseInt(&#x27;0x89ed&#x27;);//35309</span><br></pre></td></tr></table></figure>\n<p><em><strong>parseInt语法</strong></em><br>parseInt(string, radix);<br>string：要被解析的值。将参数转换为字符串 (使用 ToString抽象操作)，字符串开头的空白符将会被忽略<br>radix：从 2 到 36 的整数，表示进制的基数，超出这个范围，将返回 NaN；假如指定 0 或未指定，基数将会根据字符串的值进行推算（没有默认值，不是10，例0x开头会自动转成8进制）</p>\n<p><strong>运算符(待完善…)</strong></p>\n<ul>\n<li><p><code>-</code> <code>*</code> <code>/</code> <code>%</code> 适用<code>Number</code>将两操作数转换后得到的结果</p>\n</li>\n<li><p><code>|</code> <code>&amp;</code> <code>^</code> <code>~</code> </p>\n</li>\n<li><p><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code><br><code>NaN</code> , <code>undefined</code> 与转换后的值比较都为 <code>false</code></p>\n</li>\n</ul>\n<p><code>&#123;&#125;</code> 的特殊比较结果<br><code>&#123;&#125;</code> 放在操作符第一位最好用括号分组，否则引擎认为 <code>&#123;&#125;</code> 是块语句声明，直接忽略，无转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123;&#125;&gt;0);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;1);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;undefined);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;NaN);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;null);// &gt; &lt; &gt;= &lt;= 均false</span><br><span class=\"line\">(&#123;&#125;&gt;&#123;&#125;);//false</span><br><span class=\"line\">(&#123;&#125;&gt;=&#123;&#125;);//true</span><br><span class=\"line\">(&#123;&#125;&gt;[]);//true</span><br><span class=\"line\">(&#123;&#125;&gt;=[]);//true</span><br><span class=\"line\">(&#123;&#125;&gt;&#x27;1&#x27;);//true</span><br><span class=\"line\">(&#123;&#125;&gt;&#x27;0&#x27;);//true</span><br><span class=\"line\">(&#123;&#125;&gt;&#x27;&#x27;);//true</span><br><span class=\"line\">(&#123;&#125;&lt;[]);//false</span><br><span class=\"line\">(&#123;&#125;&lt;=[]);//false</span><br><span class=\"line\">(undefined&gt;[]);//false</span><br><span class=\"line\">(&#123;&#125;&gt;&#123;&#125;);//false</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-布尔\"><a href=\"#3-布尔\" class=\"headerlink\" title=\"3.布尔\"></a>3.布尔</h3><ul>\n<li>字符串转布尔值：除了空串(‘’)，其他字符串转换成布尔值都是<code>true</code></li>\n<li>数字转布尔值：除了数字0（和非数字NaN），其他数字布尔值为<code>true</code></li>\n<li>任何非基本类型值总是转换成<code>true</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boolean();//false</span><br><span class=\"line\">Boolean(&#x27;&#x27;);//false</span><br><span class=\"line\">Boolean(NaN);//false</span><br><span class=\"line\">Boolean(undefined);//false</span><br><span class=\"line\">Boolean(null);//false</span><br><span class=\"line\">Boolean(false);//false</span><br><span class=\"line\">Boolean(&#x27; &#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;true&#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;false&#x27;);//true</span><br><span class=\"line\">Boolean(&#x27;0&#x27;);//true</span><br><span class=\"line\">Boolean(true);//true</span><br><span class=\"line\">Boolean(&#123;&#125;);//true</span><br><span class=\"line\">Boolean([]);//true</span><br><span class=\"line\">Boolean(Symbol());//true</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"三、不严格相等\"><a href=\"#三、不严格相等\" class=\"headerlink\" title=\"三、不严格相等(==)\"></a>三、不严格相等(==)</h1><h3 id=\"1-转换规则\"><a href=\"#1-转换规则\" class=\"headerlink\" title=\"1.转换规则\"></a>1.转换规则</h3><p><code>==</code>两边的操作数通常进行数值转换（除以下 <em><strong>特殊规则</strong></em>外）</p>\n<h4 id=\"参考表格\"><a href=\"#参考表格\" class=\"headerlink\" title=\"参考表格\"></a>参考表格</h4><ul>\n<li><p>==或!= 特殊值的不严格相等<br><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">JavaScript-Equality-Table</a></p>\n</li>\n<li><p>==或!= 特殊值的不严格相等-图片<br><img src=\"/images/JS-Equality-Table.png\" alt=\"截图\"></p>\n</li>\n</ul>\n<h3 id=\"2-特殊规则\"><a href=\"#2-特殊规则\" class=\"headerlink\" title=\"2.特殊规则\"></a>2.特殊规则</h3><ul>\n<li><p><code>null/undefined</code>只与<code>null</code>和<code>undefined</code>等，且==两边操作数不转换成数字</p>\n</li>\n<li><p>NaN与任何值都不等，包括自身(==,===均适用)</p>\n</li>\n<li><p>当<code>==</code>两个操作数都是字符串时，操作数都 <em><strong>不转换</strong></em> 为数字</p>\n</li>\n</ul>\n<h1 id=\"四、-（加）隐式转换\"><a href=\"#四、-（加）隐式转换\" class=\"headerlink\" title=\"四、+（加）隐式转换\"></a>四、+（加）隐式转换</h1><h3 id=\"优先级顺序\"><a href=\"#优先级顺序\" class=\"headerlink\" title=\"优先级顺序\"></a>优先级顺序</h3><ul>\n<li><p>1.操作数都是非基本类型，使用<code>[ToPrimitive]</code>转换成基本类型</p>\n</li>\n<li><p>2.其中一个操作数是string（字符串），另一个操作数转换成字符串进行运算</p>\n</li>\n<li><p>3.以上都不是，俩操作数都转成数值进行运算</p>\n</li>\n</ul>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><ul>\n<li><p>运算顺序是从左到右</p>\n</li>\n<li><p>将字面量[]转成空串’’</p>\n</li>\n</ul>\n<h1 id=\"五、Symbol\"><a href=\"#五、Symbol\" class=\"headerlink\" title=\"五、Symbol\"></a>五、Symbol</h1><ul>\n<li><p>1.symbol只能显示转换，不支持隐式转换，隐式转换会报错：TypeError</p>\n</li>\n<li><p>2.symbol无法转换成数字，抛出TypeError错误</p>\n</li>\n</ul>\n<h1 id=\"六、对象值\"><a href=\"#六、对象值\" class=\"headerlink\" title=\"六、对象值\"></a>六、对象值</h1><p>对象值转换成数字或字符串有专用内置属性<code>[[ToPrimitive]]</code><br>对象值转换主要使用定义在<code>Object.prototype</code>上的<code>valueOf</code>和<code>toString</code>两种方法<br><code>==</code>转换数组为数值时，数组先执行<code>valueOf()</code>，返回数组本身，再执行<code>toString()</code>，相当于执行数组的<code>join()</code>方法，将数组拼接成字符串</p>\n<p>运算规则：</p>\n<ul>\n<li>1).输入值本就是基本类型，不转换，直接返回；</li>\n<li>2).调佣<code>toString()</code>方法，结果是基本类型，返回；</li>\n<li>3).调用<code>valueOf()</code>，结果是基本类型，返回；</li>\n<li>4).<code>toString()</code>和<code>valueOf()</code>都无法得到基本类型值，抛出错误<code>TypeError</code></li>\n</ul>\n<p>注：数值先调用<code>valueOf()</code>，返回值再调用<code>toString()</code>；字符串则相反先<code>toString()</code>再<code>valueOf()</code><br>数组和对象的<code>valueOf()</code>方法返回对象本身，因此被忽略<br>大多数内置类型没有<code>valueOf()</code>方法，因此转换成数值和转换成字符串最后都是调用<code>toString()</code></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">MDN:parseInt</a></p>\n<p><a href=\"https://www.programiz.com/javascript/type-conversion\">JavaScript Type Conversions</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/\">JavaScript type coercion explained</a></p>\n<p><a href=\"https://blog.openreplay.com/javascript-type-conversions-explained/\">JavaScript Type Conversions Explained</a></p>\n<hr>\n"},{"layout":"post","title":"变量和事件名","date":"2022-10-27T05:50:12.000Z","_content":"\n# 变量名\n\n| 描述 |  前缀 | 命名 |  \n|:-----|:------|:-----| \n| Array 数组 | a | aList,aGroup|  \n| Boolean 布尔 | b | bChecked,bHasLogin |  \n| Function 函数 | f | fGetHtml,fInit |  \n| Number 数字 | n | nPage,nTotal |\n| Object 对象 | o | oButton,oDate |\n| Regular Expression 正则 | r | rDomain,rEmail |\n| String 字符 | s | sName,sHtml |\n\n# 事件名动词\n\n|动词|含义|动词|含义|  \n|:--|:--|:--|:--| \n|get |获取| set |设置|  \n|add |增加|remove |删除|  \n|create |创建|destory |移除| \n|start |启动|stop |停止|\n|open |打开|close |关闭| \n|read |读取|write |写入|\n|load |载入|save |保存|\n|create |创建|destroy |销毁|  \n|begin |开始|end |结束|  \n|backup |备份|restore |恢复| \n|import |导入|export |导出| \n|split |分割|merge |合并|\n|inject |注入|extract |提取|  \n|attach |附着|detach |脱离| \n|bind |绑定|separate |分离|  \n|view |查看|browse |浏览|\n|edit |编辑|modify |修改| \n|select |选取|mark |标记| \n|copy |复制|paste |粘贴|  \n|undo |撤销|redo |重做| \n|insert |插入|delete |移除|  \n|add |加入|append |添加| \n|clean |清理|clear |清除|  \n|index |索引|sort |排序| \n|find |查找|search |搜索|  \n|increase |增加|decrease |减少|\n|play |播放|pause |暂停|  \n|launch |启动|run |运行| \n|compile |编译|execute |执行|  \n|debug |调试|trace |跟踪|\n|observe |观察|listen |监听|  \n|build |构建|publish |发布| \n|input |输入|output |输出| \n|encode |编码|decode |解码|\n|encrypt |加密|decrypt |解密| \n|compress |压缩|decompress |解压缩|  \n|pack |打包|unpack |解包|  \n|parse |解析|emit |生成|\n|connect |连接|disconnect |断开|  \n|send |发送|receive |接收| \n|download |下载|upload |上传| \n|refresh |刷新|synchronize |同步|  \n|update |更新|revert |复原|  \n|lock |锁定|unlock |解锁|\n|check out |签出|check in |签入| \n|submit |提交|commit |交付| \n|push |推|pull |拉|  \n|expand |展开|collapse |折叠| \n|begin |起始|end |结束|  \n|start |开始|finish |完成|  \n|enter |进入|exit |退出|  \n|abort |放弃|quit |离开|  \n|obsolete |废弃|depreciate |废旧| \n|collect |收集|aggregate |聚集|   \n\n","source":"_posts/变量和事件名.md","raw":"---\nlayout:\n  - post\ntitle: 变量和事件名\ndate: 2022-10-27 13:50:12\ntags: work\n---\n\n# 变量名\n\n| 描述 |  前缀 | 命名 |  \n|:-----|:------|:-----| \n| Array 数组 | a | aList,aGroup|  \n| Boolean 布尔 | b | bChecked,bHasLogin |  \n| Function 函数 | f | fGetHtml,fInit |  \n| Number 数字 | n | nPage,nTotal |\n| Object 对象 | o | oButton,oDate |\n| Regular Expression 正则 | r | rDomain,rEmail |\n| String 字符 | s | sName,sHtml |\n\n# 事件名动词\n\n|动词|含义|动词|含义|  \n|:--|:--|:--|:--| \n|get |获取| set |设置|  \n|add |增加|remove |删除|  \n|create |创建|destory |移除| \n|start |启动|stop |停止|\n|open |打开|close |关闭| \n|read |读取|write |写入|\n|load |载入|save |保存|\n|create |创建|destroy |销毁|  \n|begin |开始|end |结束|  \n|backup |备份|restore |恢复| \n|import |导入|export |导出| \n|split |分割|merge |合并|\n|inject |注入|extract |提取|  \n|attach |附着|detach |脱离| \n|bind |绑定|separate |分离|  \n|view |查看|browse |浏览|\n|edit |编辑|modify |修改| \n|select |选取|mark |标记| \n|copy |复制|paste |粘贴|  \n|undo |撤销|redo |重做| \n|insert |插入|delete |移除|  \n|add |加入|append |添加| \n|clean |清理|clear |清除|  \n|index |索引|sort |排序| \n|find |查找|search |搜索|  \n|increase |增加|decrease |减少|\n|play |播放|pause |暂停|  \n|launch |启动|run |运行| \n|compile |编译|execute |执行|  \n|debug |调试|trace |跟踪|\n|observe |观察|listen |监听|  \n|build |构建|publish |发布| \n|input |输入|output |输出| \n|encode |编码|decode |解码|\n|encrypt |加密|decrypt |解密| \n|compress |压缩|decompress |解压缩|  \n|pack |打包|unpack |解包|  \n|parse |解析|emit |生成|\n|connect |连接|disconnect |断开|  \n|send |发送|receive |接收| \n|download |下载|upload |上传| \n|refresh |刷新|synchronize |同步|  \n|update |更新|revert |复原|  \n|lock |锁定|unlock |解锁|\n|check out |签出|check in |签入| \n|submit |提交|commit |交付| \n|push |推|pull |拉|  \n|expand |展开|collapse |折叠| \n|begin |起始|end |结束|  \n|start |开始|finish |完成|  \n|enter |进入|exit |退出|  \n|abort |放弃|quit |离开|  \n|obsolete |废弃|depreciate |废旧| \n|collect |收集|aggregate |聚集|   \n\n","slug":"变量和事件名","published":1,"updated":"2022-10-27T06:17:56.606Z","comments":1,"photos":[],"link":"","_id":"clcuffzdi000dos3m8nrfdiii","content":"<h1 id=\"变量名\"><a href=\"#变量名\" class=\"headerlink\" title=\"变量名\"></a>变量名</h1><table>\n<thead>\n<tr>\n<th align=\"left\">描述</th>\n<th align=\"left\">前缀</th>\n<th align=\"left\">命名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Array 数组</td>\n<td align=\"left\">a</td>\n<td align=\"left\">aList,aGroup</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean 布尔</td>\n<td align=\"left\">b</td>\n<td align=\"left\">bChecked,bHasLogin</td>\n</tr>\n<tr>\n<td align=\"left\">Function 函数</td>\n<td align=\"left\">f</td>\n<td align=\"left\">fGetHtml,fInit</td>\n</tr>\n<tr>\n<td align=\"left\">Number 数字</td>\n<td align=\"left\">n</td>\n<td align=\"left\">nPage,nTotal</td>\n</tr>\n<tr>\n<td align=\"left\">Object 对象</td>\n<td align=\"left\">o</td>\n<td align=\"left\">oButton,oDate</td>\n</tr>\n<tr>\n<td align=\"left\">Regular Expression 正则</td>\n<td align=\"left\">r</td>\n<td align=\"left\">rDomain,rEmail</td>\n</tr>\n<tr>\n<td align=\"left\">String 字符</td>\n<td align=\"left\">s</td>\n<td align=\"left\">sName,sHtml</td>\n</tr>\n</tbody></table>\n<h1 id=\"事件名动词\"><a href=\"#事件名动词\" class=\"headerlink\" title=\"事件名动词\"></a>事件名动词</h1><table>\n<thead>\n<tr>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">get</td>\n<td align=\"left\">获取</td>\n<td align=\"left\">set</td>\n<td align=\"left\">设置</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">增加</td>\n<td align=\"left\">remove</td>\n<td align=\"left\">删除</td>\n</tr>\n<tr>\n<td align=\"left\">create</td>\n<td align=\"left\">创建</td>\n<td align=\"left\">destory</td>\n<td align=\"left\">移除</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">启动</td>\n<td align=\"left\">stop</td>\n<td align=\"left\">停止</td>\n</tr>\n<tr>\n<td align=\"left\">open</td>\n<td align=\"left\">打开</td>\n<td align=\"left\">close</td>\n<td align=\"left\">关闭</td>\n</tr>\n<tr>\n<td align=\"left\">read</td>\n<td align=\"left\">读取</td>\n<td align=\"left\">write</td>\n<td align=\"left\">写入</td>\n</tr>\n<tr>\n<td align=\"left\">load</td>\n<td align=\"left\">载入</td>\n<td align=\"left\">save</td>\n<td align=\"left\">保存</td>\n</tr>\n<tr>\n<td align=\"left\">create</td>\n<td align=\"left\">创建</td>\n<td align=\"left\">destroy</td>\n<td align=\"left\">销毁</td>\n</tr>\n<tr>\n<td align=\"left\">begin</td>\n<td align=\"left\">开始</td>\n<td align=\"left\">end</td>\n<td align=\"left\">结束</td>\n</tr>\n<tr>\n<td align=\"left\">backup</td>\n<td align=\"left\">备份</td>\n<td align=\"left\">restore</td>\n<td align=\"left\">恢复</td>\n</tr>\n<tr>\n<td align=\"left\">import</td>\n<td align=\"left\">导入</td>\n<td align=\"left\">export</td>\n<td align=\"left\">导出</td>\n</tr>\n<tr>\n<td align=\"left\">split</td>\n<td align=\"left\">分割</td>\n<td align=\"left\">merge</td>\n<td align=\"left\">合并</td>\n</tr>\n<tr>\n<td align=\"left\">inject</td>\n<td align=\"left\">注入</td>\n<td align=\"left\">extract</td>\n<td align=\"left\">提取</td>\n</tr>\n<tr>\n<td align=\"left\">attach</td>\n<td align=\"left\">附着</td>\n<td align=\"left\">detach</td>\n<td align=\"left\">脱离</td>\n</tr>\n<tr>\n<td align=\"left\">bind</td>\n<td align=\"left\">绑定</td>\n<td align=\"left\">separate</td>\n<td align=\"left\">分离</td>\n</tr>\n<tr>\n<td align=\"left\">view</td>\n<td align=\"left\">查看</td>\n<td align=\"left\">browse</td>\n<td align=\"left\">浏览</td>\n</tr>\n<tr>\n<td align=\"left\">edit</td>\n<td align=\"left\">编辑</td>\n<td align=\"left\">modify</td>\n<td align=\"left\">修改</td>\n</tr>\n<tr>\n<td align=\"left\">select</td>\n<td align=\"left\">选取</td>\n<td align=\"left\">mark</td>\n<td align=\"left\">标记</td>\n</tr>\n<tr>\n<td align=\"left\">copy</td>\n<td align=\"left\">复制</td>\n<td align=\"left\">paste</td>\n<td align=\"left\">粘贴</td>\n</tr>\n<tr>\n<td align=\"left\">undo</td>\n<td align=\"left\">撤销</td>\n<td align=\"left\">redo</td>\n<td align=\"left\">重做</td>\n</tr>\n<tr>\n<td align=\"left\">insert</td>\n<td align=\"left\">插入</td>\n<td align=\"left\">delete</td>\n<td align=\"left\">移除</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">加入</td>\n<td align=\"left\">append</td>\n<td align=\"left\">添加</td>\n</tr>\n<tr>\n<td align=\"left\">clean</td>\n<td align=\"left\">清理</td>\n<td align=\"left\">clear</td>\n<td align=\"left\">清除</td>\n</tr>\n<tr>\n<td align=\"left\">index</td>\n<td align=\"left\">索引</td>\n<td align=\"left\">sort</td>\n<td align=\"left\">排序</td>\n</tr>\n<tr>\n<td align=\"left\">find</td>\n<td align=\"left\">查找</td>\n<td align=\"left\">search</td>\n<td align=\"left\">搜索</td>\n</tr>\n<tr>\n<td align=\"left\">increase</td>\n<td align=\"left\">增加</td>\n<td align=\"left\">decrease</td>\n<td align=\"left\">减少</td>\n</tr>\n<tr>\n<td align=\"left\">play</td>\n<td align=\"left\">播放</td>\n<td align=\"left\">pause</td>\n<td align=\"left\">暂停</td>\n</tr>\n<tr>\n<td align=\"left\">launch</td>\n<td align=\"left\">启动</td>\n<td align=\"left\">run</td>\n<td align=\"left\">运行</td>\n</tr>\n<tr>\n<td align=\"left\">compile</td>\n<td align=\"left\">编译</td>\n<td align=\"left\">execute</td>\n<td align=\"left\">执行</td>\n</tr>\n<tr>\n<td align=\"left\">debug</td>\n<td align=\"left\">调试</td>\n<td align=\"left\">trace</td>\n<td align=\"left\">跟踪</td>\n</tr>\n<tr>\n<td align=\"left\">observe</td>\n<td align=\"left\">观察</td>\n<td align=\"left\">listen</td>\n<td align=\"left\">监听</td>\n</tr>\n<tr>\n<td align=\"left\">build</td>\n<td align=\"left\">构建</td>\n<td align=\"left\">publish</td>\n<td align=\"left\">发布</td>\n</tr>\n<tr>\n<td align=\"left\">input</td>\n<td align=\"left\">输入</td>\n<td align=\"left\">output</td>\n<td align=\"left\">输出</td>\n</tr>\n<tr>\n<td align=\"left\">encode</td>\n<td align=\"left\">编码</td>\n<td align=\"left\">decode</td>\n<td align=\"left\">解码</td>\n</tr>\n<tr>\n<td align=\"left\">encrypt</td>\n<td align=\"left\">加密</td>\n<td align=\"left\">decrypt</td>\n<td align=\"left\">解密</td>\n</tr>\n<tr>\n<td align=\"left\">compress</td>\n<td align=\"left\">压缩</td>\n<td align=\"left\">decompress</td>\n<td align=\"left\">解压缩</td>\n</tr>\n<tr>\n<td align=\"left\">pack</td>\n<td align=\"left\">打包</td>\n<td align=\"left\">unpack</td>\n<td align=\"left\">解包</td>\n</tr>\n<tr>\n<td align=\"left\">parse</td>\n<td align=\"left\">解析</td>\n<td align=\"left\">emit</td>\n<td align=\"left\">生成</td>\n</tr>\n<tr>\n<td align=\"left\">connect</td>\n<td align=\"left\">连接</td>\n<td align=\"left\">disconnect</td>\n<td align=\"left\">断开</td>\n</tr>\n<tr>\n<td align=\"left\">send</td>\n<td align=\"left\">发送</td>\n<td align=\"left\">receive</td>\n<td align=\"left\">接收</td>\n</tr>\n<tr>\n<td align=\"left\">download</td>\n<td align=\"left\">下载</td>\n<td align=\"left\">upload</td>\n<td align=\"left\">上传</td>\n</tr>\n<tr>\n<td align=\"left\">refresh</td>\n<td align=\"left\">刷新</td>\n<td align=\"left\">synchronize</td>\n<td align=\"left\">同步</td>\n</tr>\n<tr>\n<td align=\"left\">update</td>\n<td align=\"left\">更新</td>\n<td align=\"left\">revert</td>\n<td align=\"left\">复原</td>\n</tr>\n<tr>\n<td align=\"left\">lock</td>\n<td align=\"left\">锁定</td>\n<td align=\"left\">unlock</td>\n<td align=\"left\">解锁</td>\n</tr>\n<tr>\n<td align=\"left\">check out</td>\n<td align=\"left\">签出</td>\n<td align=\"left\">check in</td>\n<td align=\"left\">签入</td>\n</tr>\n<tr>\n<td align=\"left\">submit</td>\n<td align=\"left\">提交</td>\n<td align=\"left\">commit</td>\n<td align=\"left\">交付</td>\n</tr>\n<tr>\n<td align=\"left\">push</td>\n<td align=\"left\">推</td>\n<td align=\"left\">pull</td>\n<td align=\"left\">拉</td>\n</tr>\n<tr>\n<td align=\"left\">expand</td>\n<td align=\"left\">展开</td>\n<td align=\"left\">collapse</td>\n<td align=\"left\">折叠</td>\n</tr>\n<tr>\n<td align=\"left\">begin</td>\n<td align=\"left\">起始</td>\n<td align=\"left\">end</td>\n<td align=\"left\">结束</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">开始</td>\n<td align=\"left\">finish</td>\n<td align=\"left\">完成</td>\n</tr>\n<tr>\n<td align=\"left\">enter</td>\n<td align=\"left\">进入</td>\n<td align=\"left\">exit</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"left\">abort</td>\n<td align=\"left\">放弃</td>\n<td align=\"left\">quit</td>\n<td align=\"left\">离开</td>\n</tr>\n<tr>\n<td align=\"left\">obsolete</td>\n<td align=\"left\">废弃</td>\n<td align=\"left\">depreciate</td>\n<td align=\"left\">废旧</td>\n</tr>\n<tr>\n<td align=\"left\">collect</td>\n<td align=\"left\">收集</td>\n<td align=\"left\">aggregate</td>\n<td align=\"left\">聚集</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"变量名\"><a href=\"#变量名\" class=\"headerlink\" title=\"变量名\"></a>变量名</h1><table>\n<thead>\n<tr>\n<th align=\"left\">描述</th>\n<th align=\"left\">前缀</th>\n<th align=\"left\">命名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Array 数组</td>\n<td align=\"left\">a</td>\n<td align=\"left\">aList,aGroup</td>\n</tr>\n<tr>\n<td align=\"left\">Boolean 布尔</td>\n<td align=\"left\">b</td>\n<td align=\"left\">bChecked,bHasLogin</td>\n</tr>\n<tr>\n<td align=\"left\">Function 函数</td>\n<td align=\"left\">f</td>\n<td align=\"left\">fGetHtml,fInit</td>\n</tr>\n<tr>\n<td align=\"left\">Number 数字</td>\n<td align=\"left\">n</td>\n<td align=\"left\">nPage,nTotal</td>\n</tr>\n<tr>\n<td align=\"left\">Object 对象</td>\n<td align=\"left\">o</td>\n<td align=\"left\">oButton,oDate</td>\n</tr>\n<tr>\n<td align=\"left\">Regular Expression 正则</td>\n<td align=\"left\">r</td>\n<td align=\"left\">rDomain,rEmail</td>\n</tr>\n<tr>\n<td align=\"left\">String 字符</td>\n<td align=\"left\">s</td>\n<td align=\"left\">sName,sHtml</td>\n</tr>\n</tbody></table>\n<h1 id=\"事件名动词\"><a href=\"#事件名动词\" class=\"headerlink\" title=\"事件名动词\"></a>事件名动词</h1><table>\n<thead>\n<tr>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">get</td>\n<td align=\"left\">获取</td>\n<td align=\"left\">set</td>\n<td align=\"left\">设置</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">增加</td>\n<td align=\"left\">remove</td>\n<td align=\"left\">删除</td>\n</tr>\n<tr>\n<td align=\"left\">create</td>\n<td align=\"left\">创建</td>\n<td align=\"left\">destory</td>\n<td align=\"left\">移除</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">启动</td>\n<td align=\"left\">stop</td>\n<td align=\"left\">停止</td>\n</tr>\n<tr>\n<td align=\"left\">open</td>\n<td align=\"left\">打开</td>\n<td align=\"left\">close</td>\n<td align=\"left\">关闭</td>\n</tr>\n<tr>\n<td align=\"left\">read</td>\n<td align=\"left\">读取</td>\n<td align=\"left\">write</td>\n<td align=\"left\">写入</td>\n</tr>\n<tr>\n<td align=\"left\">load</td>\n<td align=\"left\">载入</td>\n<td align=\"left\">save</td>\n<td align=\"left\">保存</td>\n</tr>\n<tr>\n<td align=\"left\">create</td>\n<td align=\"left\">创建</td>\n<td align=\"left\">destroy</td>\n<td align=\"left\">销毁</td>\n</tr>\n<tr>\n<td align=\"left\">begin</td>\n<td align=\"left\">开始</td>\n<td align=\"left\">end</td>\n<td align=\"left\">结束</td>\n</tr>\n<tr>\n<td align=\"left\">backup</td>\n<td align=\"left\">备份</td>\n<td align=\"left\">restore</td>\n<td align=\"left\">恢复</td>\n</tr>\n<tr>\n<td align=\"left\">import</td>\n<td align=\"left\">导入</td>\n<td align=\"left\">export</td>\n<td align=\"left\">导出</td>\n</tr>\n<tr>\n<td align=\"left\">split</td>\n<td align=\"left\">分割</td>\n<td align=\"left\">merge</td>\n<td align=\"left\">合并</td>\n</tr>\n<tr>\n<td align=\"left\">inject</td>\n<td align=\"left\">注入</td>\n<td align=\"left\">extract</td>\n<td align=\"left\">提取</td>\n</tr>\n<tr>\n<td align=\"left\">attach</td>\n<td align=\"left\">附着</td>\n<td align=\"left\">detach</td>\n<td align=\"left\">脱离</td>\n</tr>\n<tr>\n<td align=\"left\">bind</td>\n<td align=\"left\">绑定</td>\n<td align=\"left\">separate</td>\n<td align=\"left\">分离</td>\n</tr>\n<tr>\n<td align=\"left\">view</td>\n<td align=\"left\">查看</td>\n<td align=\"left\">browse</td>\n<td align=\"left\">浏览</td>\n</tr>\n<tr>\n<td align=\"left\">edit</td>\n<td align=\"left\">编辑</td>\n<td align=\"left\">modify</td>\n<td align=\"left\">修改</td>\n</tr>\n<tr>\n<td align=\"left\">select</td>\n<td align=\"left\">选取</td>\n<td align=\"left\">mark</td>\n<td align=\"left\">标记</td>\n</tr>\n<tr>\n<td align=\"left\">copy</td>\n<td align=\"left\">复制</td>\n<td align=\"left\">paste</td>\n<td align=\"left\">粘贴</td>\n</tr>\n<tr>\n<td align=\"left\">undo</td>\n<td align=\"left\">撤销</td>\n<td align=\"left\">redo</td>\n<td align=\"left\">重做</td>\n</tr>\n<tr>\n<td align=\"left\">insert</td>\n<td align=\"left\">插入</td>\n<td align=\"left\">delete</td>\n<td align=\"left\">移除</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">加入</td>\n<td align=\"left\">append</td>\n<td align=\"left\">添加</td>\n</tr>\n<tr>\n<td align=\"left\">clean</td>\n<td align=\"left\">清理</td>\n<td align=\"left\">clear</td>\n<td align=\"left\">清除</td>\n</tr>\n<tr>\n<td align=\"left\">index</td>\n<td align=\"left\">索引</td>\n<td align=\"left\">sort</td>\n<td align=\"left\">排序</td>\n</tr>\n<tr>\n<td align=\"left\">find</td>\n<td align=\"left\">查找</td>\n<td align=\"left\">search</td>\n<td align=\"left\">搜索</td>\n</tr>\n<tr>\n<td align=\"left\">increase</td>\n<td align=\"left\">增加</td>\n<td align=\"left\">decrease</td>\n<td align=\"left\">减少</td>\n</tr>\n<tr>\n<td align=\"left\">play</td>\n<td align=\"left\">播放</td>\n<td align=\"left\">pause</td>\n<td align=\"left\">暂停</td>\n</tr>\n<tr>\n<td align=\"left\">launch</td>\n<td align=\"left\">启动</td>\n<td align=\"left\">run</td>\n<td align=\"left\">运行</td>\n</tr>\n<tr>\n<td align=\"left\">compile</td>\n<td align=\"left\">编译</td>\n<td align=\"left\">execute</td>\n<td align=\"left\">执行</td>\n</tr>\n<tr>\n<td align=\"left\">debug</td>\n<td align=\"left\">调试</td>\n<td align=\"left\">trace</td>\n<td align=\"left\">跟踪</td>\n</tr>\n<tr>\n<td align=\"left\">observe</td>\n<td align=\"left\">观察</td>\n<td align=\"left\">listen</td>\n<td align=\"left\">监听</td>\n</tr>\n<tr>\n<td align=\"left\">build</td>\n<td align=\"left\">构建</td>\n<td align=\"left\">publish</td>\n<td align=\"left\">发布</td>\n</tr>\n<tr>\n<td align=\"left\">input</td>\n<td align=\"left\">输入</td>\n<td align=\"left\">output</td>\n<td align=\"left\">输出</td>\n</tr>\n<tr>\n<td align=\"left\">encode</td>\n<td align=\"left\">编码</td>\n<td align=\"left\">decode</td>\n<td align=\"left\">解码</td>\n</tr>\n<tr>\n<td align=\"left\">encrypt</td>\n<td align=\"left\">加密</td>\n<td align=\"left\">decrypt</td>\n<td align=\"left\">解密</td>\n</tr>\n<tr>\n<td align=\"left\">compress</td>\n<td align=\"left\">压缩</td>\n<td align=\"left\">decompress</td>\n<td align=\"left\">解压缩</td>\n</tr>\n<tr>\n<td align=\"left\">pack</td>\n<td align=\"left\">打包</td>\n<td align=\"left\">unpack</td>\n<td align=\"left\">解包</td>\n</tr>\n<tr>\n<td align=\"left\">parse</td>\n<td align=\"left\">解析</td>\n<td align=\"left\">emit</td>\n<td align=\"left\">生成</td>\n</tr>\n<tr>\n<td align=\"left\">connect</td>\n<td align=\"left\">连接</td>\n<td align=\"left\">disconnect</td>\n<td align=\"left\">断开</td>\n</tr>\n<tr>\n<td align=\"left\">send</td>\n<td align=\"left\">发送</td>\n<td align=\"left\">receive</td>\n<td align=\"left\">接收</td>\n</tr>\n<tr>\n<td align=\"left\">download</td>\n<td align=\"left\">下载</td>\n<td align=\"left\">upload</td>\n<td align=\"left\">上传</td>\n</tr>\n<tr>\n<td align=\"left\">refresh</td>\n<td align=\"left\">刷新</td>\n<td align=\"left\">synchronize</td>\n<td align=\"left\">同步</td>\n</tr>\n<tr>\n<td align=\"left\">update</td>\n<td align=\"left\">更新</td>\n<td align=\"left\">revert</td>\n<td align=\"left\">复原</td>\n</tr>\n<tr>\n<td align=\"left\">lock</td>\n<td align=\"left\">锁定</td>\n<td align=\"left\">unlock</td>\n<td align=\"left\">解锁</td>\n</tr>\n<tr>\n<td align=\"left\">check out</td>\n<td align=\"left\">签出</td>\n<td align=\"left\">check in</td>\n<td align=\"left\">签入</td>\n</tr>\n<tr>\n<td align=\"left\">submit</td>\n<td align=\"left\">提交</td>\n<td align=\"left\">commit</td>\n<td align=\"left\">交付</td>\n</tr>\n<tr>\n<td align=\"left\">push</td>\n<td align=\"left\">推</td>\n<td align=\"left\">pull</td>\n<td align=\"left\">拉</td>\n</tr>\n<tr>\n<td align=\"left\">expand</td>\n<td align=\"left\">展开</td>\n<td align=\"left\">collapse</td>\n<td align=\"left\">折叠</td>\n</tr>\n<tr>\n<td align=\"left\">begin</td>\n<td align=\"left\">起始</td>\n<td align=\"left\">end</td>\n<td align=\"left\">结束</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">开始</td>\n<td align=\"left\">finish</td>\n<td align=\"left\">完成</td>\n</tr>\n<tr>\n<td align=\"left\">enter</td>\n<td align=\"left\">进入</td>\n<td align=\"left\">exit</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"left\">abort</td>\n<td align=\"left\">放弃</td>\n<td align=\"left\">quit</td>\n<td align=\"left\">离开</td>\n</tr>\n<tr>\n<td align=\"left\">obsolete</td>\n<td align=\"left\">废弃</td>\n<td align=\"left\">depreciate</td>\n<td align=\"left\">废旧</td>\n</tr>\n<tr>\n<td align=\"left\">collect</td>\n<td align=\"left\">收集</td>\n<td align=\"left\">aggregate</td>\n<td align=\"left\">聚集</td>\n</tr>\n</tbody></table>\n"},{"layout":"layout","title":"浏览器标签/Tab的标题和图标","date":"2023-01-05T06:12:54.000Z","_content":"\n---\n\n## 一、图标\nfavicon.ico只需要放到网站根目录，并不需要添加到程序中，浏览器会直接通过域名调取这个文件\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n</head>\n</html>\n```\n\nrel表示关系relationship，icon是一个网站图标的链接，type属性包含了链接资源的MIME类型\n\n图片格式，type可接受类型：\n* image/png(PNG)\n* image/gif(GIF)\n* image/jpg(JPEG)\n* image/x-icon(ICO)\n* image/svg+xml(SVG)\n\n一个favicon图标必须满足以下要求：\n* 默认名字是：favicon.ico\n* 尺寸大小范围有：16x16，32x32，48x48，64x64，128x128（单位是px）\n* 颜色通道值：8/24/32 bites\n\n更新窗口图标后，浏览器仍不显示，需要清除浏览器缓存刷新网页（ctrl+f5）\n\n参考文档：\n\nhttps://github.com/audreyfeldroy/favicon-cheat-sheet \n\n\n## 二、标题\n```\n<html>\n    <head>\n        <title>文档标题</title>\n    </head>\n</html>\n```\n\n### 动态修改标题\n\n```\ndocument.title = \"新标题\";\ndocument.querySelector('title').textContent = '新标题';\n```\n\n---\n","source":"_posts/浏览器标签-Tab的标题和图标.md","raw":"---\nlayout:\n  - layout\ntitle: 浏览器标签/Tab的标题和图标\ndate: 2023-01-05 14:12:54\ntags:\n---\n\n---\n\n## 一、图标\nfavicon.ico只需要放到网站根目录，并不需要添加到程序中，浏览器会直接通过域名调取这个文件\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n</head>\n</html>\n```\n\nrel表示关系relationship，icon是一个网站图标的链接，type属性包含了链接资源的MIME类型\n\n图片格式，type可接受类型：\n* image/png(PNG)\n* image/gif(GIF)\n* image/jpg(JPEG)\n* image/x-icon(ICO)\n* image/svg+xml(SVG)\n\n一个favicon图标必须满足以下要求：\n* 默认名字是：favicon.ico\n* 尺寸大小范围有：16x16，32x32，48x48，64x64，128x128（单位是px）\n* 颜色通道值：8/24/32 bites\n\n更新窗口图标后，浏览器仍不显示，需要清除浏览器缓存刷新网页（ctrl+f5）\n\n参考文档：\n\nhttps://github.com/audreyfeldroy/favicon-cheat-sheet \n\n\n## 二、标题\n```\n<html>\n    <head>\n        <title>文档标题</title>\n    </head>\n</html>\n```\n\n### 动态修改标题\n\n```\ndocument.title = \"新标题\";\ndocument.querySelector('title').textContent = '新标题';\n```\n\n---\n","slug":"浏览器标签-Tab的标题和图标","published":1,"updated":"2023-01-05T07:11:58.917Z","comments":1,"photos":[],"link":"","_id":"clcuffzdi000eos3mezw7b2n3","content":"<hr>\n<h2 id=\"一、图标\"><a href=\"#一、图标\" class=\"headerlink\" title=\"一、图标\"></a>一、图标</h2><p>favicon.ico只需要放到网站根目录，并不需要添加到程序中，浏览器会直接通过域名调取这个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot; /&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>rel表示关系relationship，icon是一个网站图标的链接，type属性包含了链接资源的MIME类型</p>\n<p>图片格式，type可接受类型：</p>\n<ul>\n<li>image/png(PNG)</li>\n<li>image/gif(GIF)</li>\n<li>image/jpg(JPEG)</li>\n<li>image/x-icon(ICO)</li>\n<li>image/svg+xml(SVG)</li>\n</ul>\n<p>一个favicon图标必须满足以下要求：</p>\n<ul>\n<li>默认名字是：favicon.ico</li>\n<li>尺寸大小范围有：16x16，32x32，48x48，64x64，128x128（单位是px）</li>\n<li>颜色通道值：8/24/32 bites</li>\n</ul>\n<p>更新窗口图标后，浏览器仍不显示，需要清除浏览器缓存刷新网页（ctrl+f5）</p>\n<p>参考文档：</p>\n<p><a href=\"https://github.com/audreyfeldroy/favicon-cheat-sheet\">https://github.com/audreyfeldroy/favicon-cheat-sheet</a> </p>\n<h2 id=\"二、标题\"><a href=\"#二、标题\" class=\"headerlink\" title=\"二、标题\"></a>二、标题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;文档标题&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态修改标题\"><a href=\"#动态修改标题\" class=\"headerlink\" title=\"动态修改标题\"></a>动态修改标题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.title = &quot;新标题&quot;;</span><br><span class=\"line\">document.querySelector(&#x27;title&#x27;).textContent = &#x27;新标题&#x27;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"一、图标\"><a href=\"#一、图标\" class=\"headerlink\" title=\"一、图标\"></a>一、图标</h2><p>favicon.ico只需要放到网站根目录，并不需要添加到程序中，浏览器会直接通过域名调取这个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot; /&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>rel表示关系relationship，icon是一个网站图标的链接，type属性包含了链接资源的MIME类型</p>\n<p>图片格式，type可接受类型：</p>\n<ul>\n<li>image/png(PNG)</li>\n<li>image/gif(GIF)</li>\n<li>image/jpg(JPEG)</li>\n<li>image/x-icon(ICO)</li>\n<li>image/svg+xml(SVG)</li>\n</ul>\n<p>一个favicon图标必须满足以下要求：</p>\n<ul>\n<li>默认名字是：favicon.ico</li>\n<li>尺寸大小范围有：16x16，32x32，48x48，64x64，128x128（单位是px）</li>\n<li>颜色通道值：8/24/32 bites</li>\n</ul>\n<p>更新窗口图标后，浏览器仍不显示，需要清除浏览器缓存刷新网页（ctrl+f5）</p>\n<p>参考文档：</p>\n<p><a href=\"https://github.com/audreyfeldroy/favicon-cheat-sheet\">https://github.com/audreyfeldroy/favicon-cheat-sheet</a> </p>\n<h2 id=\"二、标题\"><a href=\"#二、标题\" class=\"headerlink\" title=\"二、标题\"></a>二、标题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;文档标题&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态修改标题\"><a href=\"#动态修改标题\" class=\"headerlink\" title=\"动态修改标题\"></a>动态修改标题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.title = &quot;新标题&quot;;</span><br><span class=\"line\">document.querySelector(&#x27;title&#x27;).textContent = &#x27;新标题&#x27;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clcuffzda0003os3mazt2d7o2","category_id":"clcuffzdc0005os3m4qeo4l6d","_id":"clcuffzdf0008os3ma5p00h1u"}],"PostTag":[{"post_id":"clcuffzdd0006os3mgllk5tp0","tag_id":"clcuffzde0007os3m5sbp86bd","_id":"clcuffzdf0009os3mcphp4bnp"},{"post_id":"clcuffzdg000aos3m9due52q4","tag_id":"clcuffzde0007os3m5sbp86bd","_id":"clcuffzdh000cos3m14z3g6nr"},{"post_id":"clcuffzdi000dos3m8nrfdiii","tag_id":"clcuffzde0007os3m5sbp86bd","_id":"clcuffzdj000fos3m4pcpexp6"}],"Tag":[{"name":"work","_id":"clcuffzde0007os3m5sbp86bd"}]}}